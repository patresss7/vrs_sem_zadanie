
KilometerTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b20  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ca8  08000ca8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ca8  08000ca8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ca8  08000ca8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ca8  08000ca8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ca8  08000ca8  00010ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cac  08000cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000cb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08000cbc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08000cbc  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003182  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000010cc  00000000  00000000  00023201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000004e8  00000000  00000000  000242d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000037f  00000000  00000000  000247b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a887  00000000  00000000  00024b37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005ee4  00000000  00000000  0003f3be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009a815  00000000  00000000  000452a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001160  00000000  00000000  000dfab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000e0c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000c90 	.word	0x08000c90

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08000c90 	.word	0x08000c90

080001c8 <set_RGB_led>:
#include "RGB_led.h"

void set_RGB_led(uint8_t R, uint8_t G, uint8_t B)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	460b      	mov	r3, r1
 80001d4:	71bb      	strb	r3, [r7, #6]
 80001d6:	4613      	mov	r3, r2
 80001d8:	717b      	strb	r3, [r7, #5]
	GPIO_set_pin(RGB_R_PIN, R);
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	4619      	mov	r1, r3
 80001de:	2001      	movs	r0, #1
 80001e0:	f000 f8ae 	bl	8000340 <GPIO_set_pin>
	GPIO_set_pin(RGB_G_PIN, G);
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	4619      	mov	r1, r3
 80001e8:	2002      	movs	r0, #2
 80001ea:	f000 f8a9 	bl	8000340 <GPIO_set_pin>
	GPIO_set_pin(RGB_B_PIN, B);
 80001ee:	797b      	ldrb	r3, [r7, #5]
 80001f0:	4619      	mov	r1, r3
 80001f2:	2010      	movs	r0, #16
 80001f4:	f000 f8a4 	bl	8000340 <GPIO_set_pin>
}
 80001f8:	bf00      	nop
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000200:	b480      	push	{r7}
 8000202:	b083      	sub	sp, #12
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
 8000208:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	683a      	ldr	r2, [r7, #0]
 800020e:	619a      	str	r2, [r3, #24]
}
 8000210:	bf00      	nop
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021a:	4770      	bx	lr

0800021c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	6078      	str	r0, [r7, #4]
 8000224:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	683a      	ldr	r2, [r7, #0]
 800022a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800022c:	bf00      	nop
 800022e:	370c      	adds	r7, #12
 8000230:	46bd      	mov	sp, r7
 8000232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000236:	4770      	bx	lr

08000238 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b088      	sub	sp, #32
 800023c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800023e:	f107 030c 	add.w	r3, r7, #12
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
 8000248:	609a      	str	r2, [r3, #8]
 800024a:	60da      	str	r2, [r3, #12]
 800024c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800024e:	4b39      	ldr	r3, [pc, #228]	; (8000334 <MX_GPIO_Init+0xfc>)
 8000250:	695b      	ldr	r3, [r3, #20]
 8000252:	4a38      	ldr	r2, [pc, #224]	; (8000334 <MX_GPIO_Init+0xfc>)
 8000254:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000258:	6153      	str	r3, [r2, #20]
 800025a:	4b36      	ldr	r3, [pc, #216]	; (8000334 <MX_GPIO_Init+0xfc>)
 800025c:	695b      	ldr	r3, [r3, #20]
 800025e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000262:	60bb      	str	r3, [r7, #8]
 8000264:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000266:	4b33      	ldr	r3, [pc, #204]	; (8000334 <MX_GPIO_Init+0xfc>)
 8000268:	695b      	ldr	r3, [r3, #20]
 800026a:	4a32      	ldr	r2, [pc, #200]	; (8000334 <MX_GPIO_Init+0xfc>)
 800026c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000270:	6153      	str	r3, [r2, #20]
 8000272:	4b30      	ldr	r3, [pc, #192]	; (8000334 <MX_GPIO_Init+0xfc>)
 8000274:	695b      	ldr	r3, [r3, #20]
 8000276:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800027a:	607b      	str	r3, [r7, #4]
 800027c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800027e:	4b2d      	ldr	r3, [pc, #180]	; (8000334 <MX_GPIO_Init+0xfc>)
 8000280:	695b      	ldr	r3, [r3, #20]
 8000282:	4a2c      	ldr	r2, [pc, #176]	; (8000334 <MX_GPIO_Init+0xfc>)
 8000284:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000288:	6153      	str	r3, [r2, #20]
 800028a:	4b2a      	ldr	r3, [pc, #168]	; (8000334 <MX_GPIO_Init+0xfc>)
 800028c:	695b      	ldr	r3, [r3, #20]
 800028e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000292:	603b      	str	r3, [r7, #0]
 8000294:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8000296:	2200      	movs	r2, #0
 8000298:	f240 7113 	movw	r1, #1811	; 0x713
 800029c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002a0:	f000 fcaa 	bl	8000bf8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80002a4:	2200      	movs	r2, #0
 80002a6:	f24e 4178 	movw	r1, #58488	; 0xe478
 80002aa:	4823      	ldr	r0, [pc, #140]	; (8000338 <MX_GPIO_Init+0x100>)
 80002ac:	f000 fca4 	bl	8000bf8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	2180      	movs	r1, #128	; 0x80
 80002b4:	4821      	ldr	r0, [pc, #132]	; (800033c <MX_GPIO_Init+0x104>)
 80002b6:	f000 fc9f 	bl	8000bf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 80002ba:	f240 7313 	movw	r3, #1811	; 0x713
 80002be:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c0:	2301      	movs	r3, #1
 80002c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4619      	mov	r1, r3
 80002d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80002d6:	f000 fb1d 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80002da:	2301      	movs	r3, #1
 80002dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80002de:	2300      	movs	r3, #0
 80002e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002e2:	2300      	movs	r3, #0
 80002e4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002e6:	f107 030c 	add.w	r3, r7, #12
 80002ea:	4619      	mov	r1, r3
 80002ec:	4812      	ldr	r0, [pc, #72]	; (8000338 <MX_GPIO_Init+0x100>)
 80002ee:	f000 fb11 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB13 PB14 PB15
                           PB3 PB4 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80002f2:	f24e 4378 	movw	r3, #58488	; 0xe478
 80002f6:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002f8:	2301      	movs	r3, #1
 80002fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002fc:	2300      	movs	r3, #0
 80002fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000300:	2300      	movs	r3, #0
 8000302:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000304:	f107 030c 	add.w	r3, r7, #12
 8000308:	4619      	mov	r1, r3
 800030a:	480b      	ldr	r0, [pc, #44]	; (8000338 <MX_GPIO_Init+0x100>)
 800030c:	f000 fb02 	bl	8000914 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000310:	2380      	movs	r3, #128	; 0x80
 8000312:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000314:	2301      	movs	r3, #1
 8000316:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000318:	2300      	movs	r3, #0
 800031a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800031c:	2300      	movs	r3, #0
 800031e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000320:	f107 030c 	add.w	r3, r7, #12
 8000324:	4619      	mov	r1, r3
 8000326:	4805      	ldr	r0, [pc, #20]	; (800033c <MX_GPIO_Init+0x104>)
 8000328:	f000 faf4 	bl	8000914 <HAL_GPIO_Init>

}
 800032c:	bf00      	nop
 800032e:	3720      	adds	r7, #32
 8000330:	46bd      	mov	sp, r7
 8000332:	bd80      	pop	{r7, pc}
 8000334:	40021000 	.word	0x40021000
 8000338:	48000400 	.word	0x48000400
 800033c:	48000800 	.word	0x48000800

08000340 <GPIO_set_pin>:

/* USER CODE BEGIN 2 */
void GPIO_set_pin(uint32_t PIN,uint8_t state)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
 8000348:	460b      	mov	r3, r1
 800034a:	70fb      	strb	r3, [r7, #3]
	if(state == 0){
 800034c:	78fb      	ldrb	r3, [r7, #3]
 800034e:	2b00      	cmp	r3, #0
 8000350:	d105      	bne.n	800035e <GPIO_set_pin+0x1e>
		LL_GPIO_ResetOutputPin(GPIOA, PIN);
 8000352:	6879      	ldr	r1, [r7, #4]
 8000354:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000358:	f7ff ff60 	bl	800021c <LL_GPIO_ResetOutputPin>
	}
	else if(state == 1)
	{
		LL_GPIO_SetOutputPin(GPIOA, PIN);
	}
} 
 800035c:	e007      	b.n	800036e <GPIO_set_pin+0x2e>
	else if(state == 1)
 800035e:	78fb      	ldrb	r3, [r7, #3]
 8000360:	2b01      	cmp	r3, #1
 8000362:	d104      	bne.n	800036e <GPIO_set_pin+0x2e>
		LL_GPIO_SetOutputPin(GPIOA, PIN);
 8000364:	6879      	ldr	r1, [r7, #4]
 8000366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800036a:	f7ff ff49 	bl	8000200 <LL_GPIO_SetOutputPin>
} 
 800036e:	bf00      	nop
 8000370:	3708      	adds	r7, #8
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}
	...

08000378 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800037c:	4b05      	ldr	r3, [pc, #20]	; (8000394 <LL_RCC_HSI_Enable+0x1c>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a04      	ldr	r2, [pc, #16]	; (8000394 <LL_RCC_HSI_Enable+0x1c>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6013      	str	r3, [r2, #0]
}
 8000388:	bf00      	nop
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40021000 	.word	0x40021000

08000398 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800039c:	4b06      	ldr	r3, [pc, #24]	; (80003b8 <LL_RCC_HSI_IsReady+0x20>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f003 0302 	and.w	r3, r3, #2
 80003a4:	2b02      	cmp	r3, #2
 80003a6:	bf0c      	ite	eq
 80003a8:	2301      	moveq	r3, #1
 80003aa:	2300      	movne	r3, #0
 80003ac:	b2db      	uxtb	r3, r3
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr
 80003b8:	40021000 	.word	0x40021000

080003bc <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80003bc:	b480      	push	{r7}
 80003be:	b083      	sub	sp, #12
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80003c4:	4b07      	ldr	r3, [pc, #28]	; (80003e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	00db      	lsls	r3, r3, #3
 80003d0:	4904      	ldr	r1, [pc, #16]	; (80003e4 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80003d2:	4313      	orrs	r3, r2
 80003d4:	600b      	str	r3, [r1, #0]
}
 80003d6:	bf00      	nop
 80003d8:	370c      	adds	r7, #12
 80003da:	46bd      	mov	sp, r7
 80003dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003e0:	4770      	bx	lr
 80003e2:	bf00      	nop
 80003e4:	40021000 	.word	0x40021000

080003e8 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003f0:	4b06      	ldr	r3, [pc, #24]	; (800040c <LL_RCC_SetSysClkSource+0x24>)
 80003f2:	685b      	ldr	r3, [r3, #4]
 80003f4:	f023 0203 	bic.w	r2, r3, #3
 80003f8:	4904      	ldr	r1, [pc, #16]	; (800040c <LL_RCC_SetSysClkSource+0x24>)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4313      	orrs	r3, r2
 80003fe:	604b      	str	r3, [r1, #4]
}
 8000400:	bf00      	nop
 8000402:	370c      	adds	r7, #12
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr
 800040c:	40021000 	.word	0x40021000

08000410 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000414:	4b04      	ldr	r3, [pc, #16]	; (8000428 <LL_RCC_GetSysClkSource+0x18>)
 8000416:	685b      	ldr	r3, [r3, #4]
 8000418:	f003 030c 	and.w	r3, r3, #12
}
 800041c:	4618      	mov	r0, r3
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	40021000 	.word	0x40021000

0800042c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <LL_RCC_SetAHBPrescaler+0x24>)
 8000436:	685b      	ldr	r3, [r3, #4]
 8000438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800043c:	4904      	ldr	r1, [pc, #16]	; (8000450 <LL_RCC_SetAHBPrescaler+0x24>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	604b      	str	r3, [r1, #4]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40021000 	.word	0x40021000

08000454 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <LL_RCC_SetAPB1Prescaler+0x24>)
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000464:	4904      	ldr	r1, [pc, #16]	; (8000478 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	4313      	orrs	r3, r2
 800046a:	604b      	str	r3, [r1, #4]
}
 800046c:	bf00      	nop
 800046e:	370c      	adds	r7, #12
 8000470:	46bd      	mov	sp, r7
 8000472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000476:	4770      	bx	lr
 8000478:	40021000 	.word	0x40021000

0800047c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000484:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000486:	685b      	ldr	r3, [r3, #4]
 8000488:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800048c:	4904      	ldr	r1, [pc, #16]	; (80004a0 <LL_RCC_SetAPB2Prescaler+0x24>)
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	604b      	str	r3, [r1, #4]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049e:	4770      	bx	lr
 80004a0:	40021000 	.word	0x40021000

080004a4 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <LL_FLASH_SetLatency+0x24>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	f023 0207 	bic.w	r2, r3, #7
 80004b4:	4904      	ldr	r1, [pc, #16]	; (80004c8 <LL_FLASH_SetLatency+0x24>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4313      	orrs	r3, r2
 80004ba:	600b      	str	r3, [r1, #0]
}
 80004bc:	bf00      	nop
 80004be:	370c      	adds	r7, #12
 80004c0:	46bd      	mov	sp, r7
 80004c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c6:	4770      	bx	lr
 80004c8:	40022000 	.word	0x40022000

080004cc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80004d0:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <LL_FLASH_GetLatency+0x18>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	f003 0307 	and.w	r3, r3, #7
}
 80004d8:	4618      	mov	r0, r3
 80004da:	46bd      	mov	sp, r7
 80004dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop
 80004e4:	40022000 	.word	0x40022000

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 f8d2 	bl	8000694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f808 	bl	8000504 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f7ff fea0 	bl	8000238 <MX_GPIO_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  set_RGB_led(0,1,0);
 80004f8:	2200      	movs	r2, #0
 80004fa:	2101      	movs	r1, #1
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fe63 	bl	80001c8 <set_RGB_led>
 8000502:	e7f9      	b.n	80004f8 <main+0x10>

08000504 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000508:	2000      	movs	r0, #0
 800050a:	f7ff ffcb 	bl	80004a4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 800050e:	bf00      	nop
 8000510:	f7ff ffdc 	bl	80004cc <LL_FLASH_GetLatency>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d1fa      	bne.n	8000510 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800051a:	f7ff ff2d 	bl	8000378 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800051e:	bf00      	nop
 8000520:	f7ff ff3a 	bl	8000398 <LL_RCC_HSI_IsReady>
 8000524:	4603      	mov	r3, r0
 8000526:	2b01      	cmp	r3, #1
 8000528:	d1fa      	bne.n	8000520 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800052a:	2010      	movs	r0, #16
 800052c:	f7ff ff46 	bl	80003bc <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000530:	2000      	movs	r0, #0
 8000532:	f7ff ff7b 	bl	800042c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000536:	2000      	movs	r0, #0
 8000538:	f7ff ff8c 	bl	8000454 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800053c:	2000      	movs	r0, #0
 800053e:	f7ff ff9d 	bl	800047c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000542:	2000      	movs	r0, #0
 8000544:	f7ff ff50 	bl	80003e8 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 8000548:	bf00      	nop
 800054a:	f7ff ff61 	bl	8000410 <LL_RCC_GetSysClkSource>
 800054e:	4603      	mov	r3, r0
 8000550:	2b00      	cmp	r3, #0
 8000552:	d1fa      	bne.n	800054a <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 8000554:	4806      	ldr	r0, [pc, #24]	; (8000570 <SystemClock_Config+0x6c>)
 8000556:	f000 fb67 	bl	8000c28 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 800055a:	200f      	movs	r0, #15
 800055c:	f000 f8b0 	bl	80006c0 <HAL_InitTick>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000566:	f000 f805 	bl	8000574 <Error_Handler>
  }
}
 800056a:	bf00      	nop
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	007a1200 	.word	0x007a1200

08000574 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000578:	b672      	cpsid	i
}
 800057a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800057c:	e7fe      	b.n	800057c <Error_Handler+0x8>
	...

08000580 <HAL_MspInit>:
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	4a0e      	ldr	r2, [pc, #56]	; (80005c4 <HAL_MspInit+0x44>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6193      	str	r3, [r2, #24]
 8000592:	4b0c      	ldr	r3, [pc, #48]	; (80005c4 <HAL_MspInit+0x44>)
 8000594:	699b      	ldr	r3, [r3, #24]
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	4b09      	ldr	r3, [pc, #36]	; (80005c4 <HAL_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <HAL_MspInit+0x44>)
 80005a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a8:	61d3      	str	r3, [r2, #28]
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_MspInit+0x44>)
 80005ac:	69db      	ldr	r3, [r3, #28]
 80005ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b2:	603b      	str	r3, [r7, #0]
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	bf00      	nop
 80005b8:	370c      	adds	r7, #12
 80005ba:	46bd      	mov	sp, r7
 80005bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop
 80005c4:	40021000 	.word	0x40021000

080005c8 <NMI_Handler>:
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
 80005cc:	e7fe      	b.n	80005cc <NMI_Handler+0x4>

080005ce <HardFault_Handler>:
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	e7fe      	b.n	80005d2 <HardFault_Handler+0x4>

080005d4 <MemManage_Handler>:
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
 80005d8:	e7fe      	b.n	80005d8 <MemManage_Handler+0x4>

080005da <BusFault_Handler>:
 80005da:	b480      	push	{r7}
 80005dc:	af00      	add	r7, sp, #0
 80005de:	e7fe      	b.n	80005de <BusFault_Handler+0x4>

080005e0 <UsageFault_Handler>:
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
 80005e4:	e7fe      	b.n	80005e4 <UsageFault_Handler+0x4>

080005e6 <SVC_Handler>:
 80005e6:	b480      	push	{r7}
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	bf00      	nop
 80005ec:	46bd      	mov	sp, r7
 80005ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f2:	4770      	bx	lr

080005f4 <DebugMon_Handler>:
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
 80005f8:	bf00      	nop
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr

08000602 <PendSV_Handler>:
 8000602:	b480      	push	{r7}
 8000604:	af00      	add	r7, sp, #0
 8000606:	bf00      	nop
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <SysTick_Handler>:
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
 8000614:	f000 f884 	bl	8000720 <HAL_IncTick>
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}

0800061c <SystemInit>:
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
 8000620:	4b06      	ldr	r3, [pc, #24]	; (800063c <SystemInit+0x20>)
 8000622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000626:	4a05      	ldr	r2, [pc, #20]	; (800063c <SystemInit+0x20>)
 8000628:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800062c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8000630:	bf00      	nop
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	e000ed00 	.word	0xe000ed00

08000640 <Reset_Handler>:
 8000640:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000678 <LoopForever+0x2>
 8000644:	f7ff ffea 	bl	800061c <SystemInit>
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <LoopForever+0x6>)
 800064a:	490d      	ldr	r1, [pc, #52]	; (8000680 <LoopForever+0xa>)
 800064c:	4a0d      	ldr	r2, [pc, #52]	; (8000684 <LoopForever+0xe>)
 800064e:	2300      	movs	r3, #0
 8000650:	e002      	b.n	8000658 <LoopCopyDataInit>

08000652 <CopyDataInit>:
 8000652:	58d4      	ldr	r4, [r2, r3]
 8000654:	50c4      	str	r4, [r0, r3]
 8000656:	3304      	adds	r3, #4

08000658 <LoopCopyDataInit>:
 8000658:	18c4      	adds	r4, r0, r3
 800065a:	428c      	cmp	r4, r1
 800065c:	d3f9      	bcc.n	8000652 <CopyDataInit>
 800065e:	4a0a      	ldr	r2, [pc, #40]	; (8000688 <LoopForever+0x12>)
 8000660:	4c0a      	ldr	r4, [pc, #40]	; (800068c <LoopForever+0x16>)
 8000662:	2300      	movs	r3, #0
 8000664:	e001      	b.n	800066a <LoopFillZerobss>

08000666 <FillZerobss>:
 8000666:	6013      	str	r3, [r2, #0]
 8000668:	3204      	adds	r2, #4

0800066a <LoopFillZerobss>:
 800066a:	42a2      	cmp	r2, r4
 800066c:	d3fb      	bcc.n	8000666 <FillZerobss>
 800066e:	f000 faeb 	bl	8000c48 <__libc_init_array>
 8000672:	f7ff ff39 	bl	80004e8 <main>

08000676 <LoopForever>:
 8000676:	e7fe      	b.n	8000676 <LoopForever>
 8000678:	20004000 	.word	0x20004000
 800067c:	20000000 	.word	0x20000000
 8000680:	2000000c 	.word	0x2000000c
 8000684:	08000cb0 	.word	0x08000cb0
 8000688:	2000000c 	.word	0x2000000c
 800068c:	2000002c 	.word	0x2000002c

08000690 <ADC1_IRQHandler>:
 8000690:	e7fe      	b.n	8000690 <ADC1_IRQHandler>
	...

08000694 <HAL_Init>:
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
 8000698:	4b08      	ldr	r3, [pc, #32]	; (80006bc <HAL_Init+0x28>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a07      	ldr	r2, [pc, #28]	; (80006bc <HAL_Init+0x28>)
 800069e:	f043 0310 	orr.w	r3, r3, #16
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	2003      	movs	r0, #3
 80006a6:	f000 f901 	bl	80008ac <HAL_NVIC_SetPriorityGrouping>
 80006aa:	200f      	movs	r0, #15
 80006ac:	f000 f808 	bl	80006c0 <HAL_InitTick>
 80006b0:	f7ff ff66 	bl	8000580 <HAL_MspInit>
 80006b4:	2300      	movs	r3, #0
 80006b6:	4618      	mov	r0, r3
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40022000 	.word	0x40022000

080006c0 <HAL_InitTick>:
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
 80006c6:	6078      	str	r0, [r7, #4]
 80006c8:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_InitTick+0x54>)
 80006ca:	681a      	ldr	r2, [r3, #0]
 80006cc:	4b12      	ldr	r3, [pc, #72]	; (8000718 <HAL_InitTick+0x58>)
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006da:	fbb2 f3f3 	udiv	r3, r2, r3
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 f90b 	bl	80008fa <HAL_SYSTICK_Config>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <HAL_InitTick+0x2e>
 80006ea:	2301      	movs	r3, #1
 80006ec:	e00e      	b.n	800070c <HAL_InitTick+0x4c>
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	2b0f      	cmp	r3, #15
 80006f2:	d80a      	bhi.n	800070a <HAL_InitTick+0x4a>
 80006f4:	2200      	movs	r2, #0
 80006f6:	6879      	ldr	r1, [r7, #4]
 80006f8:	f04f 30ff 	mov.w	r0, #4294967295
 80006fc:	f000 f8e1 	bl	80008c2 <HAL_NVIC_SetPriority>
 8000700:	4a06      	ldr	r2, [pc, #24]	; (800071c <HAL_InitTick+0x5c>)
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	6013      	str	r3, [r2, #0]
 8000706:	2300      	movs	r3, #0
 8000708:	e000      	b.n	800070c <HAL_InitTick+0x4c>
 800070a:	2301      	movs	r3, #1
 800070c:	4618      	mov	r0, r3
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	20000000 	.word	0x20000000
 8000718:	20000008 	.word	0x20000008
 800071c:	20000004 	.word	0x20000004

08000720 <HAL_IncTick>:
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
 8000724:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_IncTick+0x20>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	461a      	mov	r2, r3
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_IncTick+0x24>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4413      	add	r3, r2
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_IncTick+0x24>)
 8000732:	6013      	str	r3, [r2, #0]
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	20000008 	.word	0x20000008
 8000744:	20000028 	.word	0x20000028

08000748 <__NVIC_SetPriorityGrouping>:
 8000748:	b480      	push	{r7}
 800074a:	b085      	sub	sp, #20
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	f003 0307 	and.w	r3, r3, #7
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800075a:	68db      	ldr	r3, [r3, #12]
 800075c:	60bb      	str	r3, [r7, #8]
 800075e:	68ba      	ldr	r2, [r7, #8]
 8000760:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000764:	4013      	ands	r3, r2
 8000766:	60bb      	str	r3, [r7, #8]
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	021a      	lsls	r2, r3, #8
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	4313      	orrs	r3, r2
 8000770:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000774:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4a04      	ldr	r2, [pc, #16]	; (800078c <__NVIC_SetPriorityGrouping+0x44>)
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	60d3      	str	r3, [r2, #12]
 8000780:	bf00      	nop
 8000782:	3714      	adds	r7, #20
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00

08000790 <__NVIC_GetPriorityGrouping>:
 8000790:	b480      	push	{r7}
 8000792:	af00      	add	r7, sp, #0
 8000794:	4b04      	ldr	r3, [pc, #16]	; (80007a8 <__NVIC_GetPriorityGrouping+0x18>)
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	0a1b      	lsrs	r3, r3, #8
 800079a:	f003 0307 	and.w	r3, r3, #7
 800079e:	4618      	mov	r0, r3
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <__NVIC_SetPriority>:
 80007ac:	b480      	push	{r7}
 80007ae:	b083      	sub	sp, #12
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	4603      	mov	r3, r0
 80007b4:	6039      	str	r1, [r7, #0]
 80007b6:	71fb      	strb	r3, [r7, #7]
 80007b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	db0a      	blt.n	80007d6 <__NVIC_SetPriority+0x2a>
 80007c0:	683b      	ldr	r3, [r7, #0]
 80007c2:	b2da      	uxtb	r2, r3
 80007c4:	490c      	ldr	r1, [pc, #48]	; (80007f8 <__NVIC_SetPriority+0x4c>)
 80007c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ca:	0112      	lsls	r2, r2, #4
 80007cc:	b2d2      	uxtb	r2, r2
 80007ce:	440b      	add	r3, r1
 80007d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80007d4:	e00a      	b.n	80007ec <__NVIC_SetPriority+0x40>
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	b2da      	uxtb	r2, r3
 80007da:	4908      	ldr	r1, [pc, #32]	; (80007fc <__NVIC_SetPriority+0x50>)
 80007dc:	79fb      	ldrb	r3, [r7, #7]
 80007de:	f003 030f 	and.w	r3, r3, #15
 80007e2:	3b04      	subs	r3, #4
 80007e4:	0112      	lsls	r2, r2, #4
 80007e6:	b2d2      	uxtb	r2, r2
 80007e8:	440b      	add	r3, r1
 80007ea:	761a      	strb	r2, [r3, #24]
 80007ec:	bf00      	nop
 80007ee:	370c      	adds	r7, #12
 80007f0:	46bd      	mov	sp, r7
 80007f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f6:	4770      	bx	lr
 80007f8:	e000e100 	.word	0xe000e100
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <NVIC_EncodePriority>:
 8000800:	b480      	push	{r7}
 8000802:	b089      	sub	sp, #36	; 0x24
 8000804:	af00      	add	r7, sp, #0
 8000806:	60f8      	str	r0, [r7, #12]
 8000808:	60b9      	str	r1, [r7, #8]
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f003 0307 	and.w	r3, r3, #7
 8000812:	61fb      	str	r3, [r7, #28]
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	f1c3 0307 	rsb	r3, r3, #7
 800081a:	2b04      	cmp	r3, #4
 800081c:	bf28      	it	cs
 800081e:	2304      	movcs	r3, #4
 8000820:	61bb      	str	r3, [r7, #24]
 8000822:	69fb      	ldr	r3, [r7, #28]
 8000824:	3304      	adds	r3, #4
 8000826:	2b06      	cmp	r3, #6
 8000828:	d902      	bls.n	8000830 <NVIC_EncodePriority+0x30>
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	3b03      	subs	r3, #3
 800082e:	e000      	b.n	8000832 <NVIC_EncodePriority+0x32>
 8000830:	2300      	movs	r3, #0
 8000832:	617b      	str	r3, [r7, #20]
 8000834:	f04f 32ff 	mov.w	r2, #4294967295
 8000838:	69bb      	ldr	r3, [r7, #24]
 800083a:	fa02 f303 	lsl.w	r3, r2, r3
 800083e:	43da      	mvns	r2, r3
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	401a      	ands	r2, r3
 8000844:	697b      	ldr	r3, [r7, #20]
 8000846:	409a      	lsls	r2, r3
 8000848:	f04f 31ff 	mov.w	r1, #4294967295
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	fa01 f303 	lsl.w	r3, r1, r3
 8000852:	43d9      	mvns	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	400b      	ands	r3, r1
 8000858:	4313      	orrs	r3, r2
 800085a:	4618      	mov	r0, r3
 800085c:	3724      	adds	r7, #36	; 0x24
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
	...

08000868 <SysTick_Config>:
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	3b01      	subs	r3, #1
 8000874:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000878:	d301      	bcc.n	800087e <SysTick_Config+0x16>
 800087a:	2301      	movs	r3, #1
 800087c:	e00f      	b.n	800089e <SysTick_Config+0x36>
 800087e:	4a0a      	ldr	r2, [pc, #40]	; (80008a8 <SysTick_Config+0x40>)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	3b01      	subs	r3, #1
 8000884:	6053      	str	r3, [r2, #4]
 8000886:	210f      	movs	r1, #15
 8000888:	f04f 30ff 	mov.w	r0, #4294967295
 800088c:	f7ff ff8e 	bl	80007ac <__NVIC_SetPriority>
 8000890:	4b05      	ldr	r3, [pc, #20]	; (80008a8 <SysTick_Config+0x40>)
 8000892:	2200      	movs	r2, #0
 8000894:	609a      	str	r2, [r3, #8]
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <SysTick_Config+0x40>)
 8000898:	2207      	movs	r2, #7
 800089a:	601a      	str	r2, [r3, #0]
 800089c:	2300      	movs	r3, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	e000e010 	.word	0xe000e010

080008ac <HAL_NVIC_SetPriorityGrouping>:
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	6078      	str	r0, [r7, #4]
 80008b4:	6878      	ldr	r0, [r7, #4]
 80008b6:	f7ff ff47 	bl	8000748 <__NVIC_SetPriorityGrouping>
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}

080008c2 <HAL_NVIC_SetPriority>:
 80008c2:	b580      	push	{r7, lr}
 80008c4:	b086      	sub	sp, #24
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	4603      	mov	r3, r0
 80008ca:	60b9      	str	r1, [r7, #8]
 80008cc:	607a      	str	r2, [r7, #4]
 80008ce:	73fb      	strb	r3, [r7, #15]
 80008d0:	2300      	movs	r3, #0
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	f7ff ff5c 	bl	8000790 <__NVIC_GetPriorityGrouping>
 80008d8:	6178      	str	r0, [r7, #20]
 80008da:	687a      	ldr	r2, [r7, #4]
 80008dc:	68b9      	ldr	r1, [r7, #8]
 80008de:	6978      	ldr	r0, [r7, #20]
 80008e0:	f7ff ff8e 	bl	8000800 <NVIC_EncodePriority>
 80008e4:	4602      	mov	r2, r0
 80008e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008ea:	4611      	mov	r1, r2
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff ff5d 	bl	80007ac <__NVIC_SetPriority>
 80008f2:	bf00      	nop
 80008f4:	3718      	adds	r7, #24
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <HAL_SYSTICK_Config>:
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	6878      	ldr	r0, [r7, #4]
 8000904:	f7ff ffb0 	bl	8000868 <SysTick_Config>
 8000908:	4603      	mov	r3, r0
 800090a:	4618      	mov	r0, r3
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
	...

08000914 <HAL_GPIO_Init>:
 8000914:	b480      	push	{r7}
 8000916:	b087      	sub	sp, #28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	617b      	str	r3, [r7, #20]
 8000922:	e14e      	b.n	8000bc2 <HAL_GPIO_Init+0x2ae>
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	2101      	movs	r1, #1
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	fa01 f303 	lsl.w	r3, r1, r3
 8000930:	4013      	ands	r3, r2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	2b00      	cmp	r3, #0
 8000938:	f000 8140 	beq.w	8000bbc <HAL_GPIO_Init+0x2a8>
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	f003 0303 	and.w	r3, r3, #3
 8000944:	2b01      	cmp	r3, #1
 8000946:	d005      	beq.n	8000954 <HAL_GPIO_Init+0x40>
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	685b      	ldr	r3, [r3, #4]
 800094c:	f003 0303 	and.w	r3, r3, #3
 8000950:	2b02      	cmp	r3, #2
 8000952:	d130      	bne.n	80009b6 <HAL_GPIO_Init+0xa2>
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	689b      	ldr	r3, [r3, #8]
 8000958:	613b      	str	r3, [r7, #16]
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	2203      	movs	r2, #3
 8000960:	fa02 f303 	lsl.w	r3, r2, r3
 8000964:	43db      	mvns	r3, r3
 8000966:	693a      	ldr	r2, [r7, #16]
 8000968:	4013      	ands	r3, r2
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	68da      	ldr	r2, [r3, #12]
 8000970:	697b      	ldr	r3, [r7, #20]
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	fa02 f303 	lsl.w	r3, r2, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4313      	orrs	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	693a      	ldr	r2, [r7, #16]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	2201      	movs	r2, #1
 800098c:	697b      	ldr	r3, [r7, #20]
 800098e:	fa02 f303 	lsl.w	r3, r2, r3
 8000992:	43db      	mvns	r3, r3
 8000994:	693a      	ldr	r2, [r7, #16]
 8000996:	4013      	ands	r3, r2
 8000998:	613b      	str	r3, [r7, #16]
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	091b      	lsrs	r3, r3, #4
 80009a0:	f003 0201 	and.w	r2, r3, #1
 80009a4:	697b      	ldr	r3, [r7, #20]
 80009a6:	fa02 f303 	lsl.w	r3, r2, r3
 80009aa:	693a      	ldr	r2, [r7, #16]
 80009ac:	4313      	orrs	r3, r2
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	693a      	ldr	r2, [r7, #16]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	685b      	ldr	r3, [r3, #4]
 80009ba:	f003 0303 	and.w	r3, r3, #3
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d017      	beq.n	80009f2 <HAL_GPIO_Init+0xde>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	2203      	movs	r2, #3
 80009ce:	fa02 f303 	lsl.w	r3, r2, r3
 80009d2:	43db      	mvns	r3, r3
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	4013      	ands	r3, r2
 80009d8:	613b      	str	r3, [r7, #16]
 80009da:	683b      	ldr	r3, [r7, #0]
 80009dc:	689a      	ldr	r2, [r3, #8]
 80009de:	697b      	ldr	r3, [r7, #20]
 80009e0:	005b      	lsls	r3, r3, #1
 80009e2:	fa02 f303 	lsl.w	r3, r2, r3
 80009e6:	693a      	ldr	r2, [r7, #16]
 80009e8:	4313      	orrs	r3, r2
 80009ea:	613b      	str	r3, [r7, #16]
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	685b      	ldr	r3, [r3, #4]
 80009f6:	f003 0303 	and.w	r3, r3, #3
 80009fa:	2b02      	cmp	r3, #2
 80009fc:	d123      	bne.n	8000a46 <HAL_GPIO_Init+0x132>
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	08da      	lsrs	r2, r3, #3
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3208      	adds	r2, #8
 8000a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a0a:	613b      	str	r3, [r7, #16]
 8000a0c:	697b      	ldr	r3, [r7, #20]
 8000a0e:	f003 0307 	and.w	r3, r3, #7
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	220f      	movs	r2, #15
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	691a      	ldr	r2, [r3, #16]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	f003 0307 	and.w	r3, r3, #7
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	693a      	ldr	r2, [r7, #16]
 8000a34:	4313      	orrs	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	08da      	lsrs	r2, r3, #3
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	3208      	adds	r2, #8
 8000a40:	6939      	ldr	r1, [r7, #16]
 8000a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	681b      	ldr	r3, [r3, #0]
 8000a4a:	613b      	str	r3, [r7, #16]
 8000a4c:	697b      	ldr	r3, [r7, #20]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	2203      	movs	r2, #3
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	f003 0203 	and.w	r2, r3, #3
 8000a66:	697b      	ldr	r3, [r7, #20]
 8000a68:	005b      	lsls	r3, r3, #1
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4313      	orrs	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	693a      	ldr	r2, [r7, #16]
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	f000 809a 	beq.w	8000bbc <HAL_GPIO_Init+0x2a8>
 8000a88:	4b55      	ldr	r3, [pc, #340]	; (8000be0 <HAL_GPIO_Init+0x2cc>)
 8000a8a:	699b      	ldr	r3, [r3, #24]
 8000a8c:	4a54      	ldr	r2, [pc, #336]	; (8000be0 <HAL_GPIO_Init+0x2cc>)
 8000a8e:	f043 0301 	orr.w	r3, r3, #1
 8000a92:	6193      	str	r3, [r2, #24]
 8000a94:	4b52      	ldr	r3, [pc, #328]	; (8000be0 <HAL_GPIO_Init+0x2cc>)
 8000a96:	699b      	ldr	r3, [r3, #24]
 8000a98:	f003 0301 	and.w	r3, r3, #1
 8000a9c:	60bb      	str	r3, [r7, #8]
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	4a50      	ldr	r2, [pc, #320]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000aa2:	697b      	ldr	r3, [r7, #20]
 8000aa4:	089b      	lsrs	r3, r3, #2
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aac:	613b      	str	r3, [r7, #16]
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	f003 0303 	and.w	r3, r3, #3
 8000ab4:	009b      	lsls	r3, r3, #2
 8000ab6:	220f      	movs	r2, #15
 8000ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8000abc:	43db      	mvns	r3, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4013      	ands	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000aca:	d013      	beq.n	8000af4 <HAL_GPIO_Init+0x1e0>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	4a46      	ldr	r2, [pc, #280]	; (8000be8 <HAL_GPIO_Init+0x2d4>)
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d00d      	beq.n	8000af0 <HAL_GPIO_Init+0x1dc>
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a45      	ldr	r2, [pc, #276]	; (8000bec <HAL_GPIO_Init+0x2d8>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d007      	beq.n	8000aec <HAL_GPIO_Init+0x1d8>
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	4a44      	ldr	r2, [pc, #272]	; (8000bf0 <HAL_GPIO_Init+0x2dc>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d101      	bne.n	8000ae8 <HAL_GPIO_Init+0x1d4>
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	e006      	b.n	8000af6 <HAL_GPIO_Init+0x1e2>
 8000ae8:	2305      	movs	r3, #5
 8000aea:	e004      	b.n	8000af6 <HAL_GPIO_Init+0x1e2>
 8000aec:	2302      	movs	r3, #2
 8000aee:	e002      	b.n	8000af6 <HAL_GPIO_Init+0x1e2>
 8000af0:	2301      	movs	r3, #1
 8000af2:	e000      	b.n	8000af6 <HAL_GPIO_Init+0x1e2>
 8000af4:	2300      	movs	r3, #0
 8000af6:	697a      	ldr	r2, [r7, #20]
 8000af8:	f002 0203 	and.w	r2, r2, #3
 8000afc:	0092      	lsls	r2, r2, #2
 8000afe:	4093      	lsls	r3, r2
 8000b00:	693a      	ldr	r2, [r7, #16]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4937      	ldr	r1, [pc, #220]	; (8000be4 <HAL_GPIO_Init+0x2d0>)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8000b14:	4b37      	ldr	r3, [pc, #220]	; (8000bf4 <HAL_GPIO_Init+0x2e0>)
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	613b      	str	r3, [r7, #16]
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	43db      	mvns	r3, r3
 8000b1e:	693a      	ldr	r2, [r7, #16]
 8000b20:	4013      	ands	r3, r2
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d003      	beq.n	8000b38 <HAL_GPIO_Init+0x224>
 8000b30:	693a      	ldr	r2, [r7, #16]
 8000b32:	68fb      	ldr	r3, [r7, #12]
 8000b34:	4313      	orrs	r3, r2
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	4a2e      	ldr	r2, [pc, #184]	; (8000bf4 <HAL_GPIO_Init+0x2e0>)
 8000b3a:	693b      	ldr	r3, [r7, #16]
 8000b3c:	6093      	str	r3, [r2, #8]
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <HAL_GPIO_Init+0x2e0>)
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	613b      	str	r3, [r7, #16]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	43db      	mvns	r3, r3
 8000b48:	693a      	ldr	r2, [r7, #16]
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	613b      	str	r3, [r7, #16]
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	685b      	ldr	r3, [r3, #4]
 8000b52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_Init+0x24e>
 8000b5a:	693a      	ldr	r2, [r7, #16]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	613b      	str	r3, [r7, #16]
 8000b62:	4a24      	ldr	r2, [pc, #144]	; (8000bf4 <HAL_GPIO_Init+0x2e0>)
 8000b64:	693b      	ldr	r3, [r7, #16]
 8000b66:	60d3      	str	r3, [r2, #12]
 8000b68:	4b22      	ldr	r3, [pc, #136]	; (8000bf4 <HAL_GPIO_Init+0x2e0>)
 8000b6a:	685b      	ldr	r3, [r3, #4]
 8000b6c:	613b      	str	r3, [r7, #16]
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	43db      	mvns	r3, r3
 8000b72:	693a      	ldr	r2, [r7, #16]
 8000b74:	4013      	ands	r3, r2
 8000b76:	613b      	str	r3, [r7, #16]
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d003      	beq.n	8000b8c <HAL_GPIO_Init+0x278>
 8000b84:	693a      	ldr	r2, [r7, #16]
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	4a19      	ldr	r2, [pc, #100]	; (8000bf4 <HAL_GPIO_Init+0x2e0>)
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	6053      	str	r3, [r2, #4]
 8000b92:	4b18      	ldr	r3, [pc, #96]	; (8000bf4 <HAL_GPIO_Init+0x2e0>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	613b      	str	r3, [r7, #16]
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	613b      	str	r3, [r7, #16]
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	685b      	ldr	r3, [r3, #4]
 8000ba6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d003      	beq.n	8000bb6 <HAL_GPIO_Init+0x2a2>
 8000bae:	693a      	ldr	r2, [r7, #16]
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	4313      	orrs	r3, r2
 8000bb4:	613b      	str	r3, [r7, #16]
 8000bb6:	4a0f      	ldr	r2, [pc, #60]	; (8000bf4 <HAL_GPIO_Init+0x2e0>)
 8000bb8:	693b      	ldr	r3, [r7, #16]
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	3301      	adds	r3, #1
 8000bc0:	617b      	str	r3, [r7, #20]
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	681a      	ldr	r2, [r3, #0]
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	fa22 f303 	lsr.w	r3, r2, r3
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	f47f aea9 	bne.w	8000924 <HAL_GPIO_Init+0x10>
 8000bd2:	bf00      	nop
 8000bd4:	bf00      	nop
 8000bd6:	371c      	adds	r7, #28
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	40021000 	.word	0x40021000
 8000be4:	40010000 	.word	0x40010000
 8000be8:	48000400 	.word	0x48000400
 8000bec:	48000800 	.word	0x48000800
 8000bf0:	48000c00 	.word	0x48000c00
 8000bf4:	40010400 	.word	0x40010400

08000bf8 <HAL_GPIO_WritePin>:
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
 8000c00:	460b      	mov	r3, r1
 8000c02:	807b      	strh	r3, [r7, #2]
 8000c04:	4613      	mov	r3, r2
 8000c06:	707b      	strb	r3, [r7, #1]
 8000c08:	787b      	ldrb	r3, [r7, #1]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_WritePin+0x1e>
 8000c0e:	887a      	ldrh	r2, [r7, #2]
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	619a      	str	r2, [r3, #24]
 8000c14:	e002      	b.n	8000c1c <HAL_GPIO_WritePin+0x24>
 8000c16:	887a      	ldrh	r2, [r7, #2]
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	629a      	str	r2, [r3, #40]	; 0x28
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr

08000c28 <LL_SetSystemCoreClock>:
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	4a04      	ldr	r2, [pc, #16]	; (8000c44 <LL_SetSystemCoreClock+0x1c>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	bf00      	nop
 8000c38:	370c      	adds	r7, #12
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	20000000 	.word	0x20000000

08000c48 <__libc_init_array>:
 8000c48:	b570      	push	{r4, r5, r6, lr}
 8000c4a:	4d0d      	ldr	r5, [pc, #52]	; (8000c80 <__libc_init_array+0x38>)
 8000c4c:	4c0d      	ldr	r4, [pc, #52]	; (8000c84 <__libc_init_array+0x3c>)
 8000c4e:	1b64      	subs	r4, r4, r5
 8000c50:	10a4      	asrs	r4, r4, #2
 8000c52:	2600      	movs	r6, #0
 8000c54:	42a6      	cmp	r6, r4
 8000c56:	d109      	bne.n	8000c6c <__libc_init_array+0x24>
 8000c58:	4d0b      	ldr	r5, [pc, #44]	; (8000c88 <__libc_init_array+0x40>)
 8000c5a:	4c0c      	ldr	r4, [pc, #48]	; (8000c8c <__libc_init_array+0x44>)
 8000c5c:	f000 f818 	bl	8000c90 <_init>
 8000c60:	1b64      	subs	r4, r4, r5
 8000c62:	10a4      	asrs	r4, r4, #2
 8000c64:	2600      	movs	r6, #0
 8000c66:	42a6      	cmp	r6, r4
 8000c68:	d105      	bne.n	8000c76 <__libc_init_array+0x2e>
 8000c6a:	bd70      	pop	{r4, r5, r6, pc}
 8000c6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c70:	4798      	blx	r3
 8000c72:	3601      	adds	r6, #1
 8000c74:	e7ee      	b.n	8000c54 <__libc_init_array+0xc>
 8000c76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c7a:	4798      	blx	r3
 8000c7c:	3601      	adds	r6, #1
 8000c7e:	e7f2      	b.n	8000c66 <__libc_init_array+0x1e>
 8000c80:	08000ca8 	.word	0x08000ca8
 8000c84:	08000ca8 	.word	0x08000ca8
 8000c88:	08000ca8 	.word	0x08000ca8
 8000c8c:	08000cac 	.word	0x08000cac

08000c90 <_init>:
 8000c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c92:	bf00      	nop
 8000c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c96:	bc08      	pop	{r3}
 8000c98:	469e      	mov	lr, r3
 8000c9a:	4770      	bx	lr

08000c9c <_fini>:
 8000c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9e:	bf00      	nop
 8000ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ca2:	bc08      	pop	{r3}
 8000ca4:	469e      	mov	lr, r3
 8000ca6:	4770      	bx	lr
