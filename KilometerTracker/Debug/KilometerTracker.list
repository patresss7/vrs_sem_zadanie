
KilometerTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cfc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001e84  08001e84  00011e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001eac  08001eac  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08001eac  08001eac  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001eac  08001eac  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001eac  08001eac  00011eac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001eb0  08001eb0  00011eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08001eb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  20000004  08001eb8  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08001eb8  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004ffe  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000151b  00000000  00000000  00025075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006b8  00000000  00000000  00026590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004de  00000000  00000000  00026c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00014e5a  00000000  00000000  00027126  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005aa8  00000000  00000000  0003bf80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00071257  00000000  00000000  00041a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001a58  00000000  00000000  000b2c80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000b46d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001e6c 	.word	0x08001e6c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08001e6c 	.word	0x08001e6c

080001c8 <set_RGB_led>:
#include "RGB_led.h"

void set_RGB_led(uint8_t R, uint8_t G, uint8_t B)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	71fb      	strb	r3, [r7, #7]
 80001d2:	460b      	mov	r3, r1
 80001d4:	71bb      	strb	r3, [r7, #6]
 80001d6:	4613      	mov	r3, r2
 80001d8:	717b      	strb	r3, [r7, #5]
	GPIO_set_pin(RGB_R_PIN, R);
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	4619      	mov	r1, r3
 80001de:	2001      	movs	r0, #1
 80001e0:	f000 f976 	bl	80004d0 <GPIO_set_pin>
	GPIO_set_pin(RGB_G_PIN, G);
 80001e4:	79bb      	ldrb	r3, [r7, #6]
 80001e6:	4619      	mov	r1, r3
 80001e8:	2002      	movs	r0, #2
 80001ea:	f000 f971 	bl	80004d0 <GPIO_set_pin>
	GPIO_set_pin(RGB_B_PIN, B);
 80001ee:	797b      	ldrb	r3, [r7, #5]
 80001f0:	4619      	mov	r1, r3
 80001f2:	2010      	movs	r0, #16
 80001f4:	f000 f96c 	bl	80004d0 <GPIO_set_pin>
}
 80001f8:	bf00      	nop
 80001fa:	3708      	adds	r7, #8
 80001fc:	46bd      	mov	sp, r7
 80001fe:	bd80      	pop	{r7, pc}

08000200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000204:	4b04      	ldr	r3, [pc, #16]	; (8000218 <__NVIC_GetPriorityGrouping+0x18>)
 8000206:	68db      	ldr	r3, [r3, #12]
 8000208:	0a1b      	lsrs	r3, r3, #8
 800020a:	f003 0307 	and.w	r3, r3, #7
}
 800020e:	4618      	mov	r0, r3
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr
 8000218:	e000ed00 	.word	0xe000ed00

0800021c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800021c:	b480      	push	{r7}
 800021e:	b083      	sub	sp, #12
 8000220:	af00      	add	r7, sp, #0
 8000222:	4603      	mov	r3, r0
 8000224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022a:	2b00      	cmp	r3, #0
 800022c:	db0b      	blt.n	8000246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800022e:	79fb      	ldrb	r3, [r7, #7]
 8000230:	f003 021f 	and.w	r2, r3, #31
 8000234:	4907      	ldr	r1, [pc, #28]	; (8000254 <__NVIC_EnableIRQ+0x38>)
 8000236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800023a:	095b      	lsrs	r3, r3, #5
 800023c:	2001      	movs	r0, #1
 800023e:	fa00 f202 	lsl.w	r2, r0, r2
 8000242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000246:	bf00      	nop
 8000248:	370c      	adds	r7, #12
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	e000e100 	.word	0xe000e100

08000258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000258:	b480      	push	{r7}
 800025a:	b083      	sub	sp, #12
 800025c:	af00      	add	r7, sp, #0
 800025e:	4603      	mov	r3, r0
 8000260:	6039      	str	r1, [r7, #0]
 8000262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000268:	2b00      	cmp	r3, #0
 800026a:	db0a      	blt.n	8000282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800026c:	683b      	ldr	r3, [r7, #0]
 800026e:	b2da      	uxtb	r2, r3
 8000270:	490c      	ldr	r1, [pc, #48]	; (80002a4 <__NVIC_SetPriority+0x4c>)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	0112      	lsls	r2, r2, #4
 8000278:	b2d2      	uxtb	r2, r2
 800027a:	440b      	add	r3, r1
 800027c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000280:	e00a      	b.n	8000298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000282:	683b      	ldr	r3, [r7, #0]
 8000284:	b2da      	uxtb	r2, r3
 8000286:	4908      	ldr	r1, [pc, #32]	; (80002a8 <__NVIC_SetPriority+0x50>)
 8000288:	79fb      	ldrb	r3, [r7, #7]
 800028a:	f003 030f 	and.w	r3, r3, #15
 800028e:	3b04      	subs	r3, #4
 8000290:	0112      	lsls	r2, r2, #4
 8000292:	b2d2      	uxtb	r2, r2
 8000294:	440b      	add	r3, r1
 8000296:	761a      	strb	r2, [r3, #24]
}
 8000298:	bf00      	nop
 800029a:	370c      	adds	r7, #12
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	e000e100 	.word	0xe000e100
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b089      	sub	sp, #36	; 0x24
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	60f8      	str	r0, [r7, #12]
 80002b4:	60b9      	str	r1, [r7, #8]
 80002b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80002b8:	68fb      	ldr	r3, [r7, #12]
 80002ba:	f003 0307 	and.w	r3, r3, #7
 80002be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002c0:	69fb      	ldr	r3, [r7, #28]
 80002c2:	f1c3 0307 	rsb	r3, r3, #7
 80002c6:	2b04      	cmp	r3, #4
 80002c8:	bf28      	it	cs
 80002ca:	2304      	movcs	r3, #4
 80002cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ce:	69fb      	ldr	r3, [r7, #28]
 80002d0:	3304      	adds	r3, #4
 80002d2:	2b06      	cmp	r3, #6
 80002d4:	d902      	bls.n	80002dc <NVIC_EncodePriority+0x30>
 80002d6:	69fb      	ldr	r3, [r7, #28]
 80002d8:	3b03      	subs	r3, #3
 80002da:	e000      	b.n	80002de <NVIC_EncodePriority+0x32>
 80002dc:	2300      	movs	r3, #0
 80002de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002e0:	f04f 32ff 	mov.w	r2, #4294967295
 80002e4:	69bb      	ldr	r3, [r7, #24]
 80002e6:	fa02 f303 	lsl.w	r3, r2, r3
 80002ea:	43da      	mvns	r2, r3
 80002ec:	68bb      	ldr	r3, [r7, #8]
 80002ee:	401a      	ands	r2, r3
 80002f0:	697b      	ldr	r3, [r7, #20]
 80002f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002f4:	f04f 31ff 	mov.w	r1, #4294967295
 80002f8:	697b      	ldr	r3, [r7, #20]
 80002fa:	fa01 f303 	lsl.w	r3, r1, r3
 80002fe:	43d9      	mvns	r1, r3
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000304:	4313      	orrs	r3, r2
         );
}
 8000306:	4618      	mov	r0, r3
 8000308:	3724      	adds	r7, #36	; 0x24
 800030a:	46bd      	mov	sp, r7
 800030c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000310:	4770      	bx	lr
	...

08000314 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800031e:	695a      	ldr	r2, [r3, #20]
 8000320:	4907      	ldr	r1, [pc, #28]	; (8000340 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4313      	orrs	r3, r2
 8000326:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800032a:	695a      	ldr	r2, [r3, #20]
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	4013      	ands	r3, r2
 8000330:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000332:	68fb      	ldr	r3, [r7, #12]
}
 8000334:	bf00      	nop
 8000336:	3714      	adds	r7, #20
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	40021000 	.word	0x40021000

08000344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8000348:	2001      	movs	r0, #1
 800034a:	f7ff ffe3 	bl	8000314 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800034e:	f7ff ff57 	bl	8000200 <__NVIC_GetPriorityGrouping>
 8000352:	4603      	mov	r3, r0
 8000354:	2200      	movs	r2, #0
 8000356:	2100      	movs	r1, #0
 8000358:	4618      	mov	r0, r3
 800035a:	f7ff ffa7 	bl	80002ac <NVIC_EncodePriority>
 800035e:	4603      	mov	r3, r0
 8000360:	4619      	mov	r1, r3
 8000362:	200e      	movs	r0, #14
 8000364:	f7ff ff78 	bl	8000258 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000368:	200e      	movs	r0, #14
 800036a:	f7ff ff57 	bl	800021c <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800036e:	f7ff ff47 	bl	8000200 <__NVIC_GetPriorityGrouping>
 8000372:	4603      	mov	r3, r0
 8000374:	2200      	movs	r2, #0
 8000376:	2100      	movs	r1, #0
 8000378:	4618      	mov	r0, r3
 800037a:	f7ff ff97 	bl	80002ac <NVIC_EncodePriority>
 800037e:	4603      	mov	r3, r0
 8000380:	4619      	mov	r1, r3
 8000382:	200f      	movs	r0, #15
 8000384:	f7ff ff68 	bl	8000258 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000388:	200f      	movs	r0, #15
 800038a:	f7ff ff47 	bl	800021c <__NVIC_EnableIRQ>

}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <LL_AHB1_GRP1_EnableClock>:
{
 8000394:	b480      	push	{r7}
 8000396:	b085      	sub	sp, #20
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800039e:	695a      	ldr	r2, [r3, #20]
 80003a0:	4907      	ldr	r1, [pc, #28]	; (80003c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4313      	orrs	r3, r2
 80003a6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80003a8:	4b05      	ldr	r3, [pc, #20]	; (80003c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80003aa:	695a      	ldr	r2, [r3, #20]
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4013      	ands	r3, r2
 80003b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003b2:	68fb      	ldr	r3, [r7, #12]
}
 80003b4:	bf00      	nop
 80003b6:	3714      	adds	r7, #20
 80003b8:	46bd      	mov	sp, r7
 80003ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003be:	4770      	bx	lr
 80003c0:	40021000 	.word	0x40021000

080003c4 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	683a      	ldr	r2, [r7, #0]
 80003d2:	619a      	str	r2, [r3, #24]
}
 80003d4:	bf00      	nop
 80003d6:	370c      	adds	r7, #12
 80003d8:	46bd      	mov	sp, r7
 80003da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003de:	4770      	bx	lr

080003e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b083      	sub	sp, #12
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	683a      	ldr	r2, [r7, #0]
 80003ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fa:	4770      	bx	lr

080003fc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	b086      	sub	sp, #24
 8000400:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000402:	463b      	mov	r3, r7
 8000404:	2200      	movs	r2, #0
 8000406:	601a      	str	r2, [r3, #0]
 8000408:	605a      	str	r2, [r3, #4]
 800040a:	609a      	str	r2, [r3, #8]
 800040c:	60da      	str	r2, [r3, #12]
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000412:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000416:	f7ff ffbd 	bl	8000394 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800041a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800041e:	f7ff ffb9 	bl	8000394 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000422:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000426:	f7ff ffb5 	bl	8000394 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_8
 800042a:	f240 7113 	movw	r1, #1811	; 0x713
 800042e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000432:	f7ff ffd5 	bl	80003e0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_10);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8000436:	f24e 4178 	movw	r1, #58488	; 0xe478
 800043a:	4823      	ldr	r0, [pc, #140]	; (80004c8 <MX_GPIO_Init+0xcc>)
 800043c:	f7ff ffd0 	bl	80003e0 <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 8000440:	2180      	movs	r1, #128	; 0x80
 8000442:	4822      	ldr	r0, [pc, #136]	; (80004cc <MX_GPIO_Init+0xd0>)
 8000444:	f7ff ffcc 	bl	80003e0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_8
 8000448:	f240 7313 	movw	r3, #1811	; 0x713
 800044c:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_10;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800044e:	2301      	movs	r3, #1
 8000450:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000452:	2300      	movs	r3, #0
 8000454:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000456:	2300      	movs	r3, #0
 8000458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800045a:	2300      	movs	r3, #0
 800045c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800045e:	463b      	mov	r3, r7
 8000460:	4619      	mov	r1, r3
 8000462:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000466:	f001 f9b3 	bl	80017d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800046a:	2301      	movs	r3, #1
 800046c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800046e:	2300      	movs	r3, #0
 8000470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000476:	463b      	mov	r3, r7
 8000478:	4619      	mov	r1, r3
 800047a:	4813      	ldr	r0, [pc, #76]	; (80004c8 <MX_GPIO_Init+0xcc>)
 800047c:	f001 f9a8 	bl	80017d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8000480:	f24e 4378 	movw	r3, #58488	; 0xe478
 8000484:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000486:	2301      	movs	r3, #1
 8000488:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800048a:	2300      	movs	r3, #0
 800048c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800048e:	2300      	movs	r3, #0
 8000490:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000492:	2300      	movs	r3, #0
 8000494:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000496:	463b      	mov	r3, r7
 8000498:	4619      	mov	r1, r3
 800049a:	480b      	ldr	r0, [pc, #44]	; (80004c8 <MX_GPIO_Init+0xcc>)
 800049c:	f001 f998 	bl	80017d0 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80004a0:	2380      	movs	r3, #128	; 0x80
 80004a2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80004a4:	2301      	movs	r3, #1
 80004a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80004a8:	2300      	movs	r3, #0
 80004aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80004ac:	2300      	movs	r3, #0
 80004ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80004b0:	2300      	movs	r3, #0
 80004b2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004b4:	463b      	mov	r3, r7
 80004b6:	4619      	mov	r1, r3
 80004b8:	4804      	ldr	r0, [pc, #16]	; (80004cc <MX_GPIO_Init+0xd0>)
 80004ba:	f001 f989 	bl	80017d0 <LL_GPIO_Init>

}
 80004be:	bf00      	nop
 80004c0:	3718      	adds	r7, #24
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	48000400 	.word	0x48000400
 80004cc:	48000800 	.word	0x48000800

080004d0 <GPIO_set_pin>:

/* USER CODE BEGIN 2 */
void GPIO_set_pin(uint32_t PIN,uint8_t state)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	460b      	mov	r3, r1
 80004da:	70fb      	strb	r3, [r7, #3]
	if(state == 0){
 80004dc:	78fb      	ldrb	r3, [r7, #3]
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d105      	bne.n	80004ee <GPIO_set_pin+0x1e>
		LL_GPIO_ResetOutputPin(GPIOA, PIN);
 80004e2:	6879      	ldr	r1, [r7, #4]
 80004e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004e8:	f7ff ff7a 	bl	80003e0 <LL_GPIO_ResetOutputPin>
	}
	else if(state == 1)
	{
		LL_GPIO_SetOutputPin(GPIOA, PIN);
	}
} 
 80004ec:	e007      	b.n	80004fe <GPIO_set_pin+0x2e>
	else if(state == 1)
 80004ee:	78fb      	ldrb	r3, [r7, #3]
 80004f0:	2b01      	cmp	r3, #1
 80004f2:	d104      	bne.n	80004fe <GPIO_set_pin+0x2e>
		LL_GPIO_SetOutputPin(GPIOA, PIN);
 80004f4:	6879      	ldr	r1, [r7, #4]
 80004f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80004fa:	f7ff ff63 	bl	80003c4 <LL_GPIO_SetOutputPin>
} 
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
	...

08000508 <__NVIC_SetPriorityGrouping>:
{
 8000508:	b480      	push	{r7}
 800050a:	b085      	sub	sp, #20
 800050c:	af00      	add	r7, sp, #0
 800050e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f003 0307 	and.w	r3, r3, #7
 8000516:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <__NVIC_SetPriorityGrouping+0x44>)
 800051a:	68db      	ldr	r3, [r3, #12]
 800051c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800051e:	68ba      	ldr	r2, [r7, #8]
 8000520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000524:	4013      	ands	r3, r2
 8000526:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800052c:	68bb      	ldr	r3, [r7, #8]
 800052e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800053a:	4a04      	ldr	r2, [pc, #16]	; (800054c <__NVIC_SetPriorityGrouping+0x44>)
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	60d3      	str	r3, [r2, #12]
}
 8000540:	bf00      	nop
 8000542:	3714      	adds	r7, #20
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	e000ed00 	.word	0xe000ed00

08000550 <__NVIC_GetPriorityGrouping>:
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000554:	4b04      	ldr	r3, [pc, #16]	; (8000568 <__NVIC_GetPriorityGrouping+0x18>)
 8000556:	68db      	ldr	r3, [r3, #12]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	f003 0307 	and.w	r3, r3, #7
}
 800055e:	4618      	mov	r0, r3
 8000560:	46bd      	mov	sp, r7
 8000562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000566:	4770      	bx	lr
 8000568:	e000ed00 	.word	0xe000ed00

0800056c <__NVIC_SetPriority>:
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	6039      	str	r1, [r7, #0]
 8000576:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800057c:	2b00      	cmp	r3, #0
 800057e:	db0a      	blt.n	8000596 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	b2da      	uxtb	r2, r3
 8000584:	490c      	ldr	r1, [pc, #48]	; (80005b8 <__NVIC_SetPriority+0x4c>)
 8000586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800058a:	0112      	lsls	r2, r2, #4
 800058c:	b2d2      	uxtb	r2, r2
 800058e:	440b      	add	r3, r1
 8000590:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000594:	e00a      	b.n	80005ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	b2da      	uxtb	r2, r3
 800059a:	4908      	ldr	r1, [pc, #32]	; (80005bc <__NVIC_SetPriority+0x50>)
 800059c:	79fb      	ldrb	r3, [r7, #7]
 800059e:	f003 030f 	and.w	r3, r3, #15
 80005a2:	3b04      	subs	r3, #4
 80005a4:	0112      	lsls	r2, r2, #4
 80005a6:	b2d2      	uxtb	r2, r2
 80005a8:	440b      	add	r3, r1
 80005aa:	761a      	strb	r2, [r3, #24]
}
 80005ac:	bf00      	nop
 80005ae:	370c      	adds	r7, #12
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000e100 	.word	0xe000e100
 80005bc:	e000ed00 	.word	0xe000ed00

080005c0 <NVIC_EncodePriority>:
{
 80005c0:	b480      	push	{r7}
 80005c2:	b089      	sub	sp, #36	; 0x24
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	f003 0307 	and.w	r3, r3, #7
 80005d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005d4:	69fb      	ldr	r3, [r7, #28]
 80005d6:	f1c3 0307 	rsb	r3, r3, #7
 80005da:	2b04      	cmp	r3, #4
 80005dc:	bf28      	it	cs
 80005de:	2304      	movcs	r3, #4
 80005e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005e2:	69fb      	ldr	r3, [r7, #28]
 80005e4:	3304      	adds	r3, #4
 80005e6:	2b06      	cmp	r3, #6
 80005e8:	d902      	bls.n	80005f0 <NVIC_EncodePriority+0x30>
 80005ea:	69fb      	ldr	r3, [r7, #28]
 80005ec:	3b03      	subs	r3, #3
 80005ee:	e000      	b.n	80005f2 <NVIC_EncodePriority+0x32>
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f4:	f04f 32ff 	mov.w	r2, #4294967295
 80005f8:	69bb      	ldr	r3, [r7, #24]
 80005fa:	fa02 f303 	lsl.w	r3, r2, r3
 80005fe:	43da      	mvns	r2, r3
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	401a      	ands	r2, r3
 8000604:	697b      	ldr	r3, [r7, #20]
 8000606:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000608:	f04f 31ff 	mov.w	r1, #4294967295
 800060c:	697b      	ldr	r3, [r7, #20]
 800060e:	fa01 f303 	lsl.w	r3, r1, r3
 8000612:	43d9      	mvns	r1, r3
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000618:	4313      	orrs	r3, r2
}
 800061a:	4618      	mov	r0, r3
 800061c:	3724      	adds	r7, #36	; 0x24
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
	...

08000628 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800062c:	4b05      	ldr	r3, [pc, #20]	; (8000644 <LL_RCC_HSI_Enable+0x1c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a04      	ldr	r2, [pc, #16]	; (8000644 <LL_RCC_HSI_Enable+0x1c>)
 8000632:	f043 0301 	orr.w	r3, r3, #1
 8000636:	6013      	str	r3, [r2, #0]
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
 8000642:	bf00      	nop
 8000644:	40021000 	.word	0x40021000

08000648 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800064c:	4b06      	ldr	r3, [pc, #24]	; (8000668 <LL_RCC_HSI_IsReady+0x20>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f003 0302 	and.w	r3, r3, #2
 8000654:	2b02      	cmp	r3, #2
 8000656:	bf0c      	ite	eq
 8000658:	2301      	moveq	r3, #1
 800065a:	2300      	movne	r3, #0
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40021000 	.word	0x40021000

0800066c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	4904      	ldr	r1, [pc, #16]	; (8000694 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000682:	4313      	orrs	r3, r2
 8000684:	600b      	str	r3, [r1, #0]
}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006a0:	4b06      	ldr	r3, [pc, #24]	; (80006bc <LL_RCC_SetSysClkSource+0x24>)
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	f023 0203 	bic.w	r2, r3, #3
 80006a8:	4904      	ldr	r1, [pc, #16]	; (80006bc <LL_RCC_SetSysClkSource+0x24>)
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	4313      	orrs	r3, r2
 80006ae:	604b      	str	r3, [r1, #4]
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40021000 	.word	0x40021000

080006c0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80006c4:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <LL_RCC_GetSysClkSource+0x18>)
 80006c6:	685b      	ldr	r3, [r3, #4]
 80006c8:	f003 030c 	and.w	r3, r3, #12
}
 80006cc:	4618      	mov	r0, r3
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	40021000 	.word	0x40021000

080006dc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80006dc:	b480      	push	{r7}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LL_RCC_SetAHBPrescaler+0x24>)
 80006e6:	685b      	ldr	r3, [r3, #4]
 80006e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80006ec:	4904      	ldr	r1, [pc, #16]	; (8000700 <LL_RCC_SetAHBPrescaler+0x24>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	604b      	str	r3, [r1, #4]
}
 80006f4:	bf00      	nop
 80006f6:	370c      	adds	r7, #12
 80006f8:	46bd      	mov	sp, r7
 80006fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fe:	4770      	bx	lr
 8000700:	40021000 	.word	0x40021000

08000704 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <LL_RCC_SetAPB1Prescaler+0x24>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000714:	4904      	ldr	r1, [pc, #16]	; (8000728 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	4313      	orrs	r3, r2
 800071a:	604b      	str	r3, [r1, #4]
}
 800071c:	bf00      	nop
 800071e:	370c      	adds	r7, #12
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	40021000 	.word	0x40021000

0800072c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000734:	4b06      	ldr	r3, [pc, #24]	; (8000750 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800073c:	4904      	ldr	r1, [pc, #16]	; (8000750 <LL_RCC_SetAPB2Prescaler+0x24>)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	4313      	orrs	r3, r2
 8000742:	604b      	str	r3, [r1, #4]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr
 8000750:	40021000 	.word	0x40021000

08000754 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <LL_RCC_SetUSARTClockSource+0x34>)
 800075e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	0e1b      	lsrs	r3, r3, #24
 8000764:	2103      	movs	r1, #3
 8000766:	fa01 f303 	lsl.w	r3, r1, r3
 800076a:	43db      	mvns	r3, r3
 800076c:	401a      	ands	r2, r3
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8000774:	4904      	ldr	r1, [pc, #16]	; (8000788 <LL_RCC_SetUSARTClockSource+0x34>)
 8000776:	4313      	orrs	r3, r2
 8000778:	630b      	str	r3, [r1, #48]	; 0x30
}
 800077a:	bf00      	nop
 800077c:	370c      	adds	r7, #12
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40021000 	.word	0x40021000

0800078c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8000794:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000796:	69da      	ldr	r2, [r3, #28]
 8000798:	4907      	ldr	r1, [pc, #28]	; (80007b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4313      	orrs	r3, r2
 800079e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80007a0:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007a2:	69da      	ldr	r2, [r3, #28]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4013      	ands	r3, r2
 80007a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007aa:	68fb      	ldr	r3, [r7, #12]
}
 80007ac:	bf00      	nop
 80007ae:	3714      	adds	r7, #20
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr
 80007b8:	40021000 	.word	0x40021000

080007bc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80007bc:	b480      	push	{r7}
 80007be:	b085      	sub	sp, #20
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80007c4:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007c6:	699a      	ldr	r2, [r3, #24]
 80007c8:	4907      	ldr	r1, [pc, #28]	; (80007e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80007d2:	699a      	ldr	r2, [r3, #24]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4013      	ands	r3, r2
 80007d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007da:	68fb      	ldr	r3, [r7, #12]
}
 80007dc:	bf00      	nop
 80007de:	3714      	adds	r7, #20
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	40021000 	.word	0x40021000

080007ec <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80007f4:	4b06      	ldr	r3, [pc, #24]	; (8000810 <LL_FLASH_SetLatency+0x24>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f023 0207 	bic.w	r2, r3, #7
 80007fc:	4904      	ldr	r1, [pc, #16]	; (8000810 <LL_FLASH_SetLatency+0x24>)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4313      	orrs	r3, r2
 8000802:	600b      	str	r3, [r1, #0]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	40022000 	.word	0x40022000

08000814 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <LL_FLASH_GetLatency+0x18>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f003 0307 	and.w	r3, r3, #7
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
 800082a:	bf00      	nop
 800082c:	40022000 	.word	0x40022000

08000830 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff ffc1 	bl	80007bc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800083a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800083e:	f7ff ffa5 	bl	800078c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000842:	2003      	movs	r0, #3
 8000844:	f7ff fe60 	bl	8000508 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000848:	f7ff fe82 	bl	8000550 <__NVIC_GetPriorityGrouping>
 800084c:	4603      	mov	r3, r0
 800084e:	2200      	movs	r2, #0
 8000850:	210f      	movs	r1, #15
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff feb4 	bl	80005c0 <NVIC_EncodePriority>
 8000858:	4603      	mov	r3, r0
 800085a:	4619      	mov	r1, r3
 800085c:	f04f 30ff 	mov.w	r0, #4294967295
 8000860:	f7ff fe84 	bl	800056c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000864:	f000 f812 	bl	800088c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000868:	f7ff fdc8 	bl	80003fc <MX_GPIO_Init>
  MX_DMA_Init();
 800086c:	f7ff fd6a 	bl	8000344 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000870:	f000 fd3c 	bl	80012ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  USART1_RegisterCallback(proccesDmaData);
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <main+0x58>)
 8000876:	f000 fd27 	bl	80012c8 <USART1_RegisterCallback>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  set_RGB_led(0,1,0);
 800087a:	2200      	movs	r2, #0
 800087c:	2101      	movs	r1, #1
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fca2 	bl	80001c8 <set_RGB_led>
 8000884:	e7f9      	b.n	800087a <main+0x4a>
 8000886:	bf00      	nop
 8000888:	080008f9 	.word	0x080008f9

0800088c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000890:	2000      	movs	r0, #0
 8000892:	f7ff ffab 	bl	80007ec <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000896:	bf00      	nop
 8000898:	f7ff ffbc 	bl	8000814 <LL_FLASH_GetLatency>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d1fa      	bne.n	8000898 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 80008a2:	f7ff fec1 	bl	8000628 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80008a6:	bf00      	nop
 80008a8:	f7ff fece 	bl	8000648 <LL_RCC_HSI_IsReady>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d1fa      	bne.n	80008a8 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80008b2:	2010      	movs	r0, #16
 80008b4:	f7ff feda 	bl	800066c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80008b8:	2000      	movs	r0, #0
 80008ba:	f7ff ff0f 	bl	80006dc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80008be:	2000      	movs	r0, #0
 80008c0:	f7ff ff20 	bl	8000704 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80008c4:	2000      	movs	r0, #0
 80008c6:	f7ff ff31 	bl	800072c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80008ca:	2000      	movs	r0, #0
 80008cc:	f7ff fee4 	bl	8000698 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80008d0:	bf00      	nop
 80008d2:	f7ff fef5 	bl	80006c0 <LL_RCC_GetSysClkSource>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1fa      	bne.n	80008d2 <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 80008dc:	4805      	ldr	r0, [pc, #20]	; (80008f4 <SystemClock_Config+0x68>)
 80008de:	f001 fa83 	bl	8001de8 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 80008e2:	4804      	ldr	r0, [pc, #16]	; (80008f4 <SystemClock_Config+0x68>)
 80008e4:	f001 fa8e 	bl	8001e04 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff ff33 	bl	8000754 <LL_RCC_SetUSARTClockSource>
}
 80008ee:	bf00      	nop
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	007a1200 	.word	0x007a1200

080008f8 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t sign)
{
 80008f8:	b480      	push	{r7}
 80008fa:	b083      	sub	sp, #12
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	71fb      	strb	r3, [r7, #7]
	//todo
}
 8000902:	bf00      	nop
 8000904:	370c      	adds	r7, #12
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
	...

08000910 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	3b01      	subs	r3, #1
 800091e:	4a0b      	ldr	r2, [pc, #44]	; (800094c <LL_DMA_DisableChannel+0x3c>)
 8000920:	5cd3      	ldrb	r3, [r2, r3]
 8000922:	461a      	mov	r2, r3
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	4413      	add	r3, r2
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	683a      	ldr	r2, [r7, #0]
 800092c:	3a01      	subs	r2, #1
 800092e:	4907      	ldr	r1, [pc, #28]	; (800094c <LL_DMA_DisableChannel+0x3c>)
 8000930:	5c8a      	ldrb	r2, [r1, r2]
 8000932:	4611      	mov	r1, r2
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	440a      	add	r2, r1
 8000938:	f023 0301 	bic.w	r3, r3, #1
 800093c:	6013      	str	r3, [r2, #0]
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	08001e84 	.word	0x08001e84

08000950 <LL_DMA_IsActiveFlag_TC6>:
  * @rmtoll ISR          TCIF6         LL_DMA_IsActiveFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC6(DMA_TypeDef *DMAx)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF6) == (DMA_ISR_TCIF6));
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000960:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000964:	bf0c      	ite	eq
 8000966:	2301      	moveq	r3, #1
 8000968:	2300      	movne	r3, #0
 800096a:	b2db      	uxtb	r3, r3
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr

08000978 <LL_DMA_IsActiveFlag_TC7>:
  * @rmtoll ISR          TCIF7         LL_DMA_IsActiveFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC7(DMA_TypeDef *DMAx)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF7) == (DMA_ISR_TCIF7));
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000988:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800098c:	bf0c      	ite	eq
 800098e:	2301      	moveq	r3, #1
 8000990:	2300      	movne	r3, #0
 8000992:	b2db      	uxtb	r3, r3
}
 8000994:	4618      	mov	r0, r3
 8000996:	370c      	adds	r7, #12
 8000998:	46bd      	mov	sp, r7
 800099a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099e:	4770      	bx	lr

080009a0 <LL_DMA_IsActiveFlag_HT6>:
  * @rmtoll ISR          HTIF6         LL_DMA_IsActiveFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT6(DMA_TypeDef *DMAx)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF6) == (DMA_ISR_HTIF6));
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80009b4:	bf0c      	ite	eq
 80009b6:	2301      	moveq	r3, #1
 80009b8:	2300      	movne	r3, #0
 80009ba:	b2db      	uxtb	r3, r3
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_DMA_ClearFlag_TC6>:
  * @rmtoll IFCR         CTCIF6        LL_DMA_ClearFlag_TC6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC6(DMA_TypeDef *DMAx)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF6);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80009d6:	605a      	str	r2, [r3, #4]
}
 80009d8:	bf00      	nop
 80009da:	370c      	adds	r7, #12
 80009dc:	46bd      	mov	sp, r7
 80009de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e2:	4770      	bx	lr

080009e4 <LL_DMA_ClearFlag_TC7>:
  * @rmtoll IFCR         CTCIF7        LL_DMA_ClearFlag_TC7
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC7(DMA_TypeDef *DMAx)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF7);
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80009f2:	605a      	str	r2, [r3, #4]
}
 80009f4:	bf00      	nop
 80009f6:	370c      	adds	r7, #12
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr

08000a00 <LL_DMA_ClearFlag_HT6>:
  * @rmtoll IFCR         CHTIF6        LL_DMA_ClearFlag_HT6
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT6(DMA_TypeDef *DMAx)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF6);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000a0e:	605a      	str	r2, [r3, #4]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr

08000a1c <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	69db      	ldr	r3, [r3, #28]
 8000a28:	f003 0310 	and.w	r3, r3, #16
 8000a2c:	2b10      	cmp	r3, #16
 8000a2e:	d101      	bne.n	8000a34 <LL_USART_IsActiveFlag_IDLE+0x18>
 8000a30:	2301      	movs	r3, #1
 8000a32:	e000      	b.n	8000a36 <LL_USART_IsActiveFlag_IDLE+0x1a>
 8000a34:	2300      	movs	r3, #0
}
 8000a36:	4618      	mov	r0, r3
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr

08000a42 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 8000a42:	b480      	push	{r7}
 8000a44:	b083      	sub	sp, #12
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	69db      	ldr	r3, [r3, #28]
 8000a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a52:	2b40      	cmp	r3, #64	; 0x40
 8000a54:	d101      	bne.n	8000a5a <LL_USART_IsActiveFlag_TC+0x18>
 8000a56:	2301      	movs	r3, #1
 8000a58:	e000      	b.n	8000a5c <LL_USART_IsActiveFlag_TC+0x1a>
 8000a5a:	2300      	movs	r3, #0
}
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2210      	movs	r2, #16
 8000a74:	621a      	str	r2, [r3, #32]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <NMI_Handler+0x4>

08000a88 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <HardFault_Handler+0x4>

08000a8e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <MemManage_Handler+0x4>

08000a94 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <BusFault_Handler+0x4>

08000a9a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <UsageFault_Handler+0x4>

08000aa0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr

08000aae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab2:	bf00      	nop
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac0:	bf00      	nop
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr

08000aca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC6(DMA1) == SET)
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <DMA1_Channel4_IRQHandler+0x38>)
 8000ade:	f7ff ff37 	bl	8000950 <LL_DMA_IsActiveFlag_TC6>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d105      	bne.n	8000af4 <DMA1_Channel4_IRQHandler+0x1c>
	{
		USART1_CheckDmaReception();
 8000ae8:	f000 fce2 	bl	80014b0 <USART1_CheckDmaReception>
		LL_DMA_ClearFlag_TC6(DMA1);
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <DMA1_Channel4_IRQHandler+0x38>)
 8000aee:	f7ff ff6b 	bl	80009c8 <LL_DMA_ClearFlag_TC6>
  /* USER CODE END DMA1_Channel6_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000af2:	e00a      	b.n	8000b0a <DMA1_Channel4_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT6(DMA1) == SET)
 8000af4:	4806      	ldr	r0, [pc, #24]	; (8000b10 <DMA1_Channel4_IRQHandler+0x38>)
 8000af6:	f7ff ff53 	bl	80009a0 <LL_DMA_IsActiveFlag_HT6>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d104      	bne.n	8000b0a <DMA1_Channel4_IRQHandler+0x32>
		USART1_CheckDmaReception();
 8000b00:	f000 fcd6 	bl	80014b0 <USART1_CheckDmaReception>
		LL_DMA_ClearFlag_HT6(DMA1);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <DMA1_Channel4_IRQHandler+0x38>)
 8000b06:	f7ff ff7b 	bl	8000a00 <LL_DMA_ClearFlag_HT6>
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	40020000 	.word	0x40020000

08000b14 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC7(DMA1) == SET)
 8000b18:	480a      	ldr	r0, [pc, #40]	; (8000b44 <DMA1_Channel5_IRQHandler+0x30>)
 8000b1a:	f7ff ff2d 	bl	8000978 <LL_DMA_IsActiveFlag_TC7>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d10d      	bne.n	8000b40 <DMA1_Channel5_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC7(DMA1);
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <DMA1_Channel5_IRQHandler+0x30>)
 8000b26:	f7ff ff5d 	bl	80009e4 <LL_DMA_ClearFlag_TC7>

		while(LL_USART_IsActiveFlag_TC(USART2) == RESET);
 8000b2a:	bf00      	nop
 8000b2c:	4806      	ldr	r0, [pc, #24]	; (8000b48 <DMA1_Channel5_IRQHandler+0x34>)
 8000b2e:	f7ff ff88 	bl	8000a42 <LL_USART_IsActiveFlag_TC>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d0f9      	beq.n	8000b2c <DMA1_Channel5_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 8000b38:	2105      	movs	r1, #5
 8000b3a:	4802      	ldr	r0, [pc, #8]	; (8000b44 <DMA1_Channel5_IRQHandler+0x30>)
 8000b3c:	f7ff fee8 	bl	8000910 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel7_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40004400 	.word	0x40004400

08000b4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART1))
 8000b50:	4806      	ldr	r0, [pc, #24]	; (8000b6c <USART1_IRQHandler+0x20>)
 8000b52:	f7ff ff63 	bl	8000a1c <LL_USART_IsActiveFlag_IDLE>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d004      	beq.n	8000b66 <USART1_IRQHandler+0x1a>
	{
		USART1_CheckDmaReception();
 8000b5c:	f000 fca8 	bl	80014b0 <USART1_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART1);
 8000b60:	4802      	ldr	r0, [pc, #8]	; (8000b6c <USART1_IRQHandler+0x20>)
 8000b62:	f7ff ff81 	bl	8000a68 <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b66:	bf00      	nop
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40013800 	.word	0x40013800

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b480      	push	{r7}
 8000b72:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <SystemInit+0x20>)
 8000b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b7a:	4a05      	ldr	r2, [pc, #20]	; (8000b90 <SystemInit+0x20>)
 8000b7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_EnableIRQ>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	b083      	sub	sp, #12
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	db0b      	blt.n	8000bbe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ba6:	79fb      	ldrb	r3, [r7, #7]
 8000ba8:	f003 021f 	and.w	r2, r3, #31
 8000bac:	4907      	ldr	r1, [pc, #28]	; (8000bcc <__NVIC_EnableIRQ+0x38>)
 8000bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb2:	095b      	lsrs	r3, r3, #5
 8000bb4:	2001      	movs	r0, #1
 8000bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	e000e100 	.word	0xe000e100

08000bd0 <__NVIC_SetPriority>:
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <LL_DMA_EnableChannel>:
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
 8000c2c:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3b01      	subs	r3, #1
 8000c32:	4a0b      	ldr	r2, [pc, #44]	; (8000c60 <LL_DMA_EnableChannel+0x3c>)
 8000c34:	5cd3      	ldrb	r3, [r2, r3]
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	683a      	ldr	r2, [r7, #0]
 8000c40:	3a01      	subs	r2, #1
 8000c42:	4907      	ldr	r1, [pc, #28]	; (8000c60 <LL_DMA_EnableChannel+0x3c>)
 8000c44:	5c8a      	ldrb	r2, [r1, r2]
 8000c46:	4611      	mov	r1, r2
 8000c48:	687a      	ldr	r2, [r7, #4]
 8000c4a:	440a      	add	r2, r1
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6013      	str	r3, [r2, #0]
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	08001ea4 	.word	0x08001ea4

08000c64 <LL_DMA_DisableChannel>:
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	4a0b      	ldr	r2, [pc, #44]	; (8000ca0 <LL_DMA_DisableChannel+0x3c>)
 8000c74:	5cd3      	ldrb	r3, [r2, r3]
 8000c76:	461a      	mov	r2, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	683a      	ldr	r2, [r7, #0]
 8000c80:	3a01      	subs	r2, #1
 8000c82:	4907      	ldr	r1, [pc, #28]	; (8000ca0 <LL_DMA_DisableChannel+0x3c>)
 8000c84:	5c8a      	ldrb	r2, [r1, r2]
 8000c86:	4611      	mov	r1, r2
 8000c88:	687a      	ldr	r2, [r7, #4]
 8000c8a:	440a      	add	r2, r1
 8000c8c:	f023 0301 	bic.w	r3, r3, #1
 8000c90:	6013      	str	r3, [r2, #0]
}
 8000c92:	bf00      	nop
 8000c94:	370c      	adds	r7, #12
 8000c96:	46bd      	mov	sp, r7
 8000c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9c:	4770      	bx	lr
 8000c9e:	bf00      	nop
 8000ca0:	08001ea4 	.word	0x08001ea4

08000ca4 <LL_DMA_SetDataTransferDirection>:
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	60f8      	str	r0, [r7, #12]
 8000cac:	60b9      	str	r1, [r7, #8]
 8000cae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	; (8000cec <LL_DMA_SetDataTransferDirection+0x48>)
 8000cb6:	5cd3      	ldrb	r3, [r2, r3]
 8000cb8:	461a      	mov	r2, r3
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000cc4:	f023 0310 	bic.w	r3, r3, #16
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	3a01      	subs	r2, #1
 8000ccc:	4907      	ldr	r1, [pc, #28]	; (8000cec <LL_DMA_SetDataTransferDirection+0x48>)
 8000cce:	5c8a      	ldrb	r2, [r1, r2]
 8000cd0:	4611      	mov	r1, r2
 8000cd2:	68fa      	ldr	r2, [r7, #12]
 8000cd4:	440a      	add	r2, r1
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	687a      	ldr	r2, [r7, #4]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	600b      	str	r3, [r1, #0]
}
 8000cde:	bf00      	nop
 8000ce0:	3714      	adds	r7, #20
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	08001ea4 	.word	0x08001ea4

08000cf0 <LL_DMA_GetDataTransferDirection>:
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	3b01      	subs	r3, #1
 8000cfe:	4a07      	ldr	r2, [pc, #28]	; (8000d1c <LL_DMA_GetDataTransferDirection+0x2c>)
 8000d00:	5cd3      	ldrb	r3, [r2, r3]
 8000d02:	461a      	mov	r2, r3
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4413      	add	r3, r2
 8000d08:	681a      	ldr	r2, [r3, #0]
 8000d0a:	f244 0310 	movw	r3, #16400	; 0x4010
 8000d0e:	4013      	ands	r3, r2
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	08001ea4 	.word	0x08001ea4

08000d20 <LL_DMA_SetMode>:
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	60f8      	str	r0, [r7, #12]
 8000d28:	60b9      	str	r1, [r7, #8]
 8000d2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	4a0c      	ldr	r2, [pc, #48]	; (8000d64 <LL_DMA_SetMode+0x44>)
 8000d32:	5cd3      	ldrb	r3, [r2, r3]
 8000d34:	461a      	mov	r2, r3
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	4413      	add	r3, r2
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f023 0220 	bic.w	r2, r3, #32
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <LL_DMA_SetMode+0x44>)
 8000d46:	5ccb      	ldrb	r3, [r1, r3]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	440b      	add	r3, r1
 8000d4e:	4619      	mov	r1, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	600b      	str	r3, [r1, #0]
}
 8000d56:	bf00      	nop
 8000d58:	3714      	adds	r7, #20
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	08001ea4 	.word	0x08001ea4

08000d68 <LL_DMA_SetPeriphIncMode>:
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b085      	sub	sp, #20
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	3b01      	subs	r3, #1
 8000d78:	4a0c      	ldr	r2, [pc, #48]	; (8000dac <LL_DMA_SetPeriphIncMode+0x44>)
 8000d7a:	5cd3      	ldrb	r3, [r2, r3]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	4413      	add	r3, r2
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4907      	ldr	r1, [pc, #28]	; (8000dac <LL_DMA_SetPeriphIncMode+0x44>)
 8000d8e:	5ccb      	ldrb	r3, [r1, r3]
 8000d90:	4619      	mov	r1, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	440b      	add	r3, r1
 8000d96:	4619      	mov	r1, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	600b      	str	r3, [r1, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	08001ea4 	.word	0x08001ea4

08000db0 <LL_DMA_SetMemoryIncMode>:
{
 8000db0:	b480      	push	{r7}
 8000db2:	b085      	sub	sp, #20
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	4a0c      	ldr	r2, [pc, #48]	; (8000df4 <LL_DMA_SetMemoryIncMode+0x44>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	461a      	mov	r2, r3
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4413      	add	r3, r2
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	4907      	ldr	r1, [pc, #28]	; (8000df4 <LL_DMA_SetMemoryIncMode+0x44>)
 8000dd6:	5ccb      	ldrb	r3, [r1, r3]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	440b      	add	r3, r1
 8000dde:	4619      	mov	r1, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	08001ea4 	.word	0x08001ea4

08000df8 <LL_DMA_SetPeriphSize>:
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b085      	sub	sp, #20
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	60f8      	str	r0, [r7, #12]
 8000e00:	60b9      	str	r1, [r7, #8]
 8000e02:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <LL_DMA_SetPeriphSize+0x44>)
 8000e0a:	5cd3      	ldrb	r3, [r2, r3]
 8000e0c:	461a      	mov	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4413      	add	r3, r2
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	4907      	ldr	r1, [pc, #28]	; (8000e3c <LL_DMA_SetPeriphSize+0x44>)
 8000e1e:	5ccb      	ldrb	r3, [r1, r3]
 8000e20:	4619      	mov	r1, r3
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	440b      	add	r3, r1
 8000e26:	4619      	mov	r1, r3
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4313      	orrs	r3, r2
 8000e2c:	600b      	str	r3, [r1, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	3714      	adds	r7, #20
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	08001ea4 	.word	0x08001ea4

08000e40 <LL_DMA_SetMemorySize>:
{
 8000e40:	b480      	push	{r7}
 8000e42:	b085      	sub	sp, #20
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 8000e4c:	68bb      	ldr	r3, [r7, #8]
 8000e4e:	3b01      	subs	r3, #1
 8000e50:	4a0c      	ldr	r2, [pc, #48]	; (8000e84 <LL_DMA_SetMemorySize+0x44>)
 8000e52:	5cd3      	ldrb	r3, [r2, r3]
 8000e54:	461a      	mov	r2, r3
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4413      	add	r3, r2
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	3b01      	subs	r3, #1
 8000e64:	4907      	ldr	r1, [pc, #28]	; (8000e84 <LL_DMA_SetMemorySize+0x44>)
 8000e66:	5ccb      	ldrb	r3, [r1, r3]
 8000e68:	4619      	mov	r1, r3
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	440b      	add	r3, r1
 8000e6e:	4619      	mov	r1, r3
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	600b      	str	r3, [r1, #0]
}
 8000e76:	bf00      	nop
 8000e78:	3714      	adds	r7, #20
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	08001ea4 	.word	0x08001ea4

08000e88 <LL_DMA_SetChannelPriorityLevel>:
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b085      	sub	sp, #20
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	60f8      	str	r0, [r7, #12]
 8000e90:	60b9      	str	r1, [r7, #8]
 8000e92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	3b01      	subs	r3, #1
 8000e98:	4a0c      	ldr	r2, [pc, #48]	; (8000ecc <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000e9a:	5cd3      	ldrb	r3, [r2, r3]
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	4907      	ldr	r1, [pc, #28]	; (8000ecc <LL_DMA_SetChannelPriorityLevel+0x44>)
 8000eae:	5ccb      	ldrb	r3, [r1, r3]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	440b      	add	r3, r1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	08001ea4 	.word	0x08001ea4

08000ed0 <LL_DMA_SetDataLength>:
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	60f8      	str	r0, [r7, #12]
 8000ed8:	60b9      	str	r1, [r7, #8]
 8000eda:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	4a0c      	ldr	r2, [pc, #48]	; (8000f14 <LL_DMA_SetDataLength+0x44>)
 8000ee2:	5cd3      	ldrb	r3, [r2, r3]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	4413      	add	r3, r2
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	0c1b      	lsrs	r3, r3, #16
 8000eee:	041b      	lsls	r3, r3, #16
 8000ef0:	68ba      	ldr	r2, [r7, #8]
 8000ef2:	3a01      	subs	r2, #1
 8000ef4:	4907      	ldr	r1, [pc, #28]	; (8000f14 <LL_DMA_SetDataLength+0x44>)
 8000ef6:	5c8a      	ldrb	r2, [r1, r2]
 8000ef8:	4611      	mov	r1, r2
 8000efa:	68fa      	ldr	r2, [r7, #12]
 8000efc:	440a      	add	r2, r1
 8000efe:	4611      	mov	r1, r2
 8000f00:	687a      	ldr	r2, [r7, #4]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	604b      	str	r3, [r1, #4]
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	08001ea4 	.word	0x08001ea4

08000f18 <LL_DMA_GetDataLength>:
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	3b01      	subs	r3, #1
 8000f26:	4a06      	ldr	r2, [pc, #24]	; (8000f40 <LL_DMA_GetDataLength+0x28>)
 8000f28:	5cd3      	ldrb	r3, [r2, r3]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4413      	add	r3, r2
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	b29b      	uxth	r3, r3
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	08001ea4 	.word	0x08001ea4

08000f44 <LL_DMA_ConfigAddresses>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 8000f52:	69bb      	ldr	r3, [r7, #24]
 8000f54:	2b10      	cmp	r3, #16
 8000f56:	d114      	bne.n	8000f82 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	3b01      	subs	r3, #1
 8000f5c:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <LL_DMA_ConfigAddresses+0x74>)
 8000f5e:	5cd3      	ldrb	r3, [r2, r3]
 8000f60:	461a      	mov	r2, r3
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	4413      	add	r3, r2
 8000f66:	461a      	mov	r2, r3
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	3b01      	subs	r3, #1
 8000f70:	4a11      	ldr	r2, [pc, #68]	; (8000fb8 <LL_DMA_ConfigAddresses+0x74>)
 8000f72:	5cd3      	ldrb	r3, [r2, r3]
 8000f74:	461a      	mov	r2, r3
 8000f76:	68fb      	ldr	r3, [r7, #12]
 8000f78:	4413      	add	r3, r2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	6093      	str	r3, [r2, #8]
}
 8000f80:	e013      	b.n	8000faa <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8000f82:	68bb      	ldr	r3, [r7, #8]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	4a0c      	ldr	r2, [pc, #48]	; (8000fb8 <LL_DMA_ConfigAddresses+0x74>)
 8000f88:	5cd3      	ldrb	r3, [r2, r3]
 8000f8a:	461a      	mov	r2, r3
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	4413      	add	r3, r2
 8000f90:	461a      	mov	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8000f96:	68bb      	ldr	r3, [r7, #8]
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <LL_DMA_ConfigAddresses+0x74>)
 8000f9c:	5cd3      	ldrb	r3, [r2, r3]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	60d3      	str	r3, [r2, #12]
}
 8000faa:	bf00      	nop
 8000fac:	3714      	adds	r7, #20
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
 8000fb6:	bf00      	nop
 8000fb8:	08001ea4 	.word	0x08001ea4

08000fbc <LL_DMA_SetMemoryAddress>:
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	4a06      	ldr	r2, [pc, #24]	; (8000fe8 <LL_DMA_SetMemoryAddress+0x2c>)
 8000fce:	5cd3      	ldrb	r3, [r2, r3]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	4413      	add	r3, r2
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	60d3      	str	r3, [r2, #12]
}
 8000fdc:	bf00      	nop
 8000fde:	3714      	adds	r7, #20
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	08001ea4 	.word	0x08001ea4

08000fec <LL_DMA_SetPeriphAddress>:
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	3b01      	subs	r3, #1
 8000ffc:	4a06      	ldr	r2, [pc, #24]	; (8001018 <LL_DMA_SetPeriphAddress+0x2c>)
 8000ffe:	5cd3      	ldrb	r3, [r2, r3]
 8001000:	461a      	mov	r2, r3
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	4413      	add	r3, r2
 8001006:	461a      	mov	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6093      	str	r3, [r2, #8]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	08001ea4 	.word	0x08001ea4

0800101c <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	3b01      	subs	r3, #1
 800102a:	4a0b      	ldr	r2, [pc, #44]	; (8001058 <LL_DMA_EnableIT_TC+0x3c>)
 800102c:	5cd3      	ldrb	r3, [r2, r3]
 800102e:	461a      	mov	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4413      	add	r3, r2
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	3a01      	subs	r2, #1
 800103a:	4907      	ldr	r1, [pc, #28]	; (8001058 <LL_DMA_EnableIT_TC+0x3c>)
 800103c:	5c8a      	ldrb	r2, [r1, r2]
 800103e:	4611      	mov	r1, r2
 8001040:	687a      	ldr	r2, [r7, #4]
 8001042:	440a      	add	r2, r1
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6013      	str	r3, [r2, #0]
}
 800104a:	bf00      	nop
 800104c:	370c      	adds	r7, #12
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	08001ea4 	.word	0x08001ea4

0800105c <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	3b01      	subs	r3, #1
 800106a:	4a0b      	ldr	r2, [pc, #44]	; (8001098 <LL_DMA_EnableIT_HT+0x3c>)
 800106c:	5cd3      	ldrb	r3, [r2, r3]
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	683a      	ldr	r2, [r7, #0]
 8001078:	3a01      	subs	r2, #1
 800107a:	4907      	ldr	r1, [pc, #28]	; (8001098 <LL_DMA_EnableIT_HT+0x3c>)
 800107c:	5c8a      	ldrb	r2, [r1, r2]
 800107e:	4611      	mov	r1, r2
 8001080:	687a      	ldr	r2, [r7, #4]
 8001082:	440a      	add	r2, r1
 8001084:	f043 0304 	orr.w	r3, r3, #4
 8001088:	6013      	str	r3, [r2, #0]
}
 800108a:	bf00      	nop
 800108c:	370c      	adds	r7, #12
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	08001ea4 	.word	0x08001ea4

0800109c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
 80010a4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	3b01      	subs	r3, #1
 80010aa:	4a0b      	ldr	r2, [pc, #44]	; (80010d8 <LL_DMA_EnableIT_TE+0x3c>)
 80010ac:	5cd3      	ldrb	r3, [r2, r3]
 80010ae:	461a      	mov	r2, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4413      	add	r3, r2
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	3a01      	subs	r2, #1
 80010ba:	4907      	ldr	r1, [pc, #28]	; (80010d8 <LL_DMA_EnableIT_TE+0x3c>)
 80010bc:	5c8a      	ldrb	r2, [r1, r2]
 80010be:	4611      	mov	r1, r2
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	440a      	add	r2, r1
 80010c4:	f043 0308 	orr.w	r3, r3, #8
 80010c8:	6013      	str	r3, [r2, #0]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	08001ea4 	.word	0x08001ea4

080010dc <LL_AHB1_GRP1_EnableClock>:
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010e6:	695a      	ldr	r2, [r3, #20]
 80010e8:	4907      	ldr	r1, [pc, #28]	; (8001108 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80010f2:	695a      	ldr	r2, [r3, #20]
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4013      	ands	r3, r2
 80010f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010fa:	68fb      	ldr	r3, [r7, #12]
}
 80010fc:	bf00      	nop
 80010fe:	3714      	adds	r7, #20
 8001100:	46bd      	mov	sp, r7
 8001102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001106:	4770      	bx	lr
 8001108:	40021000 	.word	0x40021000

0800110c <LL_APB2_GRP1_EnableClock>:
{
 800110c:	b480      	push	{r7}
 800110e:	b085      	sub	sp, #20
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001114:	4b08      	ldr	r3, [pc, #32]	; (8001138 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001116:	699a      	ldr	r2, [r3, #24]
 8001118:	4907      	ldr	r1, [pc, #28]	; (8001138 <LL_APB2_GRP1_EnableClock+0x2c>)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4313      	orrs	r3, r2
 800111e:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001122:	699a      	ldr	r2, [r3, #24]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4013      	ands	r3, r2
 8001128:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800112a:	68fb      	ldr	r3, [r7, #12]
}
 800112c:	bf00      	nop
 800112e:	3714      	adds	r7, #20
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	40021000 	.word	0x40021000

0800113c <LL_USART_Enable>:
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f043 0201 	orr.w	r2, r3, #1
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	601a      	str	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <LL_USART_ConfigAsyncMode>:
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	609a      	str	r2, [r3, #8]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8001188:	b480      	push	{r7}
 800118a:	b089      	sub	sp, #36	; 0x24
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	e853 3f00 	ldrex	r3, [r3]
 800119a:	60bb      	str	r3, [r7, #8]
   return(result);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	f043 0310 	orr.w	r3, r3, #16
 80011a2:	61fb      	str	r3, [r7, #28]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	69fa      	ldr	r2, [r7, #28]
 80011a8:	61ba      	str	r2, [r7, #24]
 80011aa:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011ac:	6979      	ldr	r1, [r7, #20]
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	e841 2300 	strex	r3, r2, [r1]
 80011b4:	613b      	str	r3, [r7, #16]
   return(result);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1e9      	bne.n	8001190 <LL_USART_EnableIT_IDLE+0x8>
}
 80011bc:	bf00      	nop
 80011be:	bf00      	nop
 80011c0:	3724      	adds	r7, #36	; 0x24
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b089      	sub	sp, #36	; 0x24
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3308      	adds	r3, #8
 80011d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	e853 3f00 	ldrex	r3, [r3]
 80011de:	60bb      	str	r3, [r7, #8]
   return(result);
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80011e6:	61fb      	str	r3, [r7, #28]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3308      	adds	r3, #8
 80011ec:	69fa      	ldr	r2, [r7, #28]
 80011ee:	61ba      	str	r2, [r7, #24]
 80011f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011f2:	6979      	ldr	r1, [r7, #20]
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	e841 2300 	strex	r3, r2, [r1]
 80011fa:	613b      	str	r3, [r7, #16]
   return(result);
 80011fc:	693b      	ldr	r3, [r7, #16]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d1e7      	bne.n	80011d2 <LL_USART_DisableIT_CTS+0x8>
}
 8001202:	bf00      	nop
 8001204:	bf00      	nop
 8001206:	3724      	adds	r7, #36	; 0x24
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8001210:	b480      	push	{r7}
 8001212:	b089      	sub	sp, #36	; 0x24
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3308      	adds	r3, #8
 800121c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	e853 3f00 	ldrex	r3, [r3]
 8001224:	60bb      	str	r3, [r7, #8]
   return(result);
 8001226:	68bb      	ldr	r3, [r7, #8]
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	61fb      	str	r3, [r7, #28]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3308      	adds	r3, #8
 8001232:	69fa      	ldr	r2, [r7, #28]
 8001234:	61ba      	str	r2, [r7, #24]
 8001236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001238:	6979      	ldr	r1, [r7, #20]
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	e841 2300 	strex	r3, r2, [r1]
 8001240:	613b      	str	r3, [r7, #16]
   return(result);
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1e7      	bne.n	8001218 <LL_USART_EnableDMAReq_RX+0x8>
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3724      	adds	r7, #36	; 0x24
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8001256:	b480      	push	{r7}
 8001258:	b089      	sub	sp, #36	; 0x24
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	3308      	adds	r3, #8
 8001262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	e853 3f00 	ldrex	r3, [r3]
 800126a:	60bb      	str	r3, [r7, #8]
   return(result);
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001272:	61fb      	str	r3, [r7, #28]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	3308      	adds	r3, #8
 8001278:	69fa      	ldr	r2, [r7, #28]
 800127a:	61ba      	str	r2, [r7, #24]
 800127c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800127e:	6979      	ldr	r1, [r7, #20]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	e841 2300 	strex	r3, r2, [r1]
 8001286:	613b      	str	r3, [r7, #16]
   return(result);
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d1e7      	bne.n	800125e <LL_USART_EnableDMAReq_TX+0x8>
}
 800128e:	bf00      	nop
 8001290:	bf00      	nop
 8001292:	3724      	adds	r7, #36	; 0x24
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
 80012a4:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d103      	bne.n	80012b4 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3328      	adds	r3, #40	; 0x28
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e002      	b.n	80012ba <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	3324      	adds	r3, #36	; 0x24
 80012b8:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3714      	adds	r7, #20
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <USART1_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART1_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART1_RegisterCallback(void *callback)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d002      	beq.n	80012dc <USART1_RegisterCallback+0x14>
	{
		USART1_ProcessData = callback;
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a03      	ldr	r2, [pc, #12]	; (80012e8 <USART1_RegisterCallback+0x20>)
 80012da:	6013      	str	r3, [r2, #0]
	}
}
 80012dc:	bf00      	nop
 80012de:	370c      	adds	r7, #12
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	200000a0 	.word	0x200000a0

080012ec <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b090      	sub	sp, #64	; 0x40
 80012f0:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	2200      	movs	r2, #0
 80012f8:	601a      	str	r2, [r3, #0]
 80012fa:	605a      	str	r2, [r3, #4]
 80012fc:	609a      	str	r2, [r3, #8]
 80012fe:	60da      	str	r2, [r3, #12]
 8001300:	611a      	str	r2, [r3, #16]
 8001302:	615a      	str	r2, [r3, #20]
 8001304:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	1d3b      	adds	r3, r7, #4
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	60da      	str	r2, [r3, #12]
 8001312:	611a      	str	r2, [r3, #16]
 8001314:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8001316:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800131a:	f7ff fef7 	bl	800110c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 800131e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8001322:	f7ff fedb 	bl	80010dc <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA2   ------> USART1_TX
  PA15   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8001326:	2330      	movs	r3, #48	; 0x30
 8001328:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800132a:	2302      	movs	r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 800132e:	2303      	movs	r3, #3
 8001330:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001336:	2300      	movs	r3, #0
 8001338:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 800133a:	2307      	movs	r3, #7
 800133c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	4619      	mov	r1, r3
 8001342:	4857      	ldr	r0, [pc, #348]	; (80014a0 <MX_USART1_UART_Init+0x1b4>)
 8001344:	f000 fa44 	bl	80017d0 <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001348:	2200      	movs	r2, #0
 800134a:	2104      	movs	r1, #4
 800134c:	4855      	ldr	r0, [pc, #340]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 800134e:	f7ff fca9 	bl	8000ca4 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_MEDIUM);
 8001352:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001356:	2104      	movs	r1, #4
 8001358:	4852      	ldr	r0, [pc, #328]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 800135a:	f7ff fd95 	bl	8000e88 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 800135e:	2200      	movs	r2, #0
 8001360:	2104      	movs	r1, #4
 8001362:	4850      	ldr	r0, [pc, #320]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 8001364:	f7ff fcdc 	bl	8000d20 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8001368:	2200      	movs	r2, #0
 800136a:	2104      	movs	r1, #4
 800136c:	484d      	ldr	r0, [pc, #308]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 800136e:	f7ff fcfb 	bl	8000d68 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8001372:	2280      	movs	r2, #128	; 0x80
 8001374:	2104      	movs	r1, #4
 8001376:	484b      	ldr	r0, [pc, #300]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 8001378:	f7ff fd1a 	bl	8000db0 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 800137c:	2200      	movs	r2, #0
 800137e:	2104      	movs	r1, #4
 8001380:	4848      	ldr	r0, [pc, #288]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 8001382:	f7ff fd39 	bl	8000df8 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8001386:	2200      	movs	r2, #0
 8001388:	2104      	movs	r1, #4
 800138a:	4846      	ldr	r0, [pc, #280]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 800138c:	f7ff fd58 	bl	8000e40 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_4,
 8001390:	2101      	movs	r1, #1
 8001392:	4845      	ldr	r0, [pc, #276]	; (80014a8 <MX_USART1_UART_Init+0x1bc>)
 8001394:	f7ff ff82 	bl	800129c <LL_USART_DMA_GetRegAddr>
 8001398:	4604      	mov	r4, r0
 800139a:	4d44      	ldr	r5, [pc, #272]	; (80014ac <MX_USART1_UART_Init+0x1c0>)
 800139c:	2104      	movs	r1, #4
 800139e:	4841      	ldr	r0, [pc, #260]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 80013a0:	f7ff fca6 	bl	8000cf0 <LL_DMA_GetDataTransferDirection>
 80013a4:	4603      	mov	r3, r0
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	462b      	mov	r3, r5
 80013aa:	4622      	mov	r2, r4
 80013ac:	2104      	movs	r1, #4
 80013ae:	483d      	ldr	r0, [pc, #244]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 80013b0:	f7ff fdc8 	bl	8000f44 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART1dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, DMA_USART1_BUFFER_SIZE);
 80013b4:	2280      	movs	r2, #128	; 0x80
 80013b6:	2104      	movs	r1, #4
 80013b8:	483a      	ldr	r0, [pc, #232]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 80013ba:	f7ff fd89 	bl	8000ed0 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
 80013be:	2104      	movs	r1, #4
 80013c0:	4838      	ldr	r0, [pc, #224]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 80013c2:	f7ff fc2f 	bl	8000c24 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART1);
 80013c6:	4838      	ldr	r0, [pc, #224]	; (80014a8 <MX_USART1_UART_Init+0x1bc>)
 80013c8:	f7ff ff22 	bl	8001210 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_4);
 80013cc:	2104      	movs	r1, #4
 80013ce:	4835      	ldr	r0, [pc, #212]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 80013d0:	f7ff fe24 	bl	800101c <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_4);
 80013d4:	2104      	movs	r1, #4
 80013d6:	4833      	ldr	r0, [pc, #204]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 80013d8:	f7ff fe40 	bl	800105c <LL_DMA_EnableIT_HT>

  /* USART1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80013dc:	2210      	movs	r2, #16
 80013de:	2105      	movs	r1, #5
 80013e0:	4830      	ldr	r0, [pc, #192]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 80013e2:	f7ff fc5f 	bl	8000ca4 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_MEDIUM);
 80013e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013ea:	2105      	movs	r1, #5
 80013ec:	482d      	ldr	r0, [pc, #180]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 80013ee:	f7ff fd4b 	bl	8000e88 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 80013f2:	2200      	movs	r2, #0
 80013f4:	2105      	movs	r1, #5
 80013f6:	482b      	ldr	r0, [pc, #172]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 80013f8:	f7ff fc92 	bl	8000d20 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2105      	movs	r1, #5
 8001400:	4828      	ldr	r0, [pc, #160]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 8001402:	f7ff fcb1 	bl	8000d68 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	2105      	movs	r1, #5
 800140a:	4826      	ldr	r0, [pc, #152]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 800140c:	f7ff fcd0 	bl	8000db0 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 8001410:	2200      	movs	r2, #0
 8001412:	2105      	movs	r1, #5
 8001414:	4823      	ldr	r0, [pc, #140]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 8001416:	f7ff fcef 	bl	8000df8 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 800141a:	2200      	movs	r2, #0
 800141c:	2105      	movs	r1, #5
 800141e:	4821      	ldr	r0, [pc, #132]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 8001420:	f7ff fd0e 	bl	8000e40 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_5, LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT));
 8001424:	2100      	movs	r1, #0
 8001426:	4820      	ldr	r0, [pc, #128]	; (80014a8 <MX_USART1_UART_Init+0x1bc>)
 8001428:	f7ff ff38 	bl	800129c <LL_USART_DMA_GetRegAddr>
 800142c:	4603      	mov	r3, r0
 800142e:	461a      	mov	r2, r3
 8001430:	2105      	movs	r1, #5
 8001432:	481c      	ldr	r0, [pc, #112]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 8001434:	f7ff fdda 	bl	8000fec <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART1);
 8001438:	481b      	ldr	r0, [pc, #108]	; (80014a8 <MX_USART1_UART_Init+0x1bc>)
 800143a:	f7ff ff0c 	bl	8001256 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_5);
 800143e:	2105      	movs	r1, #5
 8001440:	4818      	ldr	r0, [pc, #96]	; (80014a4 <MX_USART1_UART_Init+0x1b8>)
 8001442:	f7ff fe2b 	bl	800109c <LL_DMA_EnableIT_TE>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8001446:	2100      	movs	r1, #0
 8001448:	2025      	movs	r0, #37	; 0x25
 800144a:	f7ff fbc1 	bl	8000bd0 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 800144e:	2025      	movs	r0, #37	; 0x25
 8001450:	f7ff fba0 	bl	8000b94 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8001454:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8001458:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001462:	2300      	movs	r3, #0
 8001464:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001466:	230c      	movs	r3, #12
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800146a:	2300      	movs	r3, #0
 800146c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800146e:	2300      	movs	r3, #0
 8001470:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8001472:	f107 031c 	add.w	r3, r7, #28
 8001476:	4619      	mov	r1, r3
 8001478:	480b      	ldr	r0, [pc, #44]	; (80014a8 <MX_USART1_UART_Init+0x1bc>)
 800147a:	f000 fc2f 	bl	8001cdc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 800147e:	480a      	ldr	r0, [pc, #40]	; (80014a8 <MX_USART1_UART_Init+0x1bc>)
 8001480:	f7ff fe6c 	bl	800115c <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART1);
 8001484:	4808      	ldr	r0, [pc, #32]	; (80014a8 <MX_USART1_UART_Init+0x1bc>)
 8001486:	f7ff fea0 	bl	80011ca <LL_USART_DisableIT_CTS>

  /* Enable USART1 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART1);
 800148a:	4807      	ldr	r0, [pc, #28]	; (80014a8 <MX_USART1_UART_Init+0x1bc>)
 800148c:	f7ff fe7c 	bl	8001188 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART1);
 8001490:	4805      	ldr	r0, [pc, #20]	; (80014a8 <MX_USART1_UART_Init+0x1bc>)
 8001492:	f7ff fe53 	bl	800113c <LL_USART_Enable>
  	  //type your code here:
}
 8001496:	bf00      	nop
 8001498:	3738      	adds	r7, #56	; 0x38
 800149a:	46bd      	mov	sp, r7
 800149c:	bdb0      	pop	{r4, r5, r7, pc}
 800149e:	bf00      	nop
 80014a0:	48000800 	.word	0x48000800
 80014a4:	40020000 	.word	0x40020000
 80014a8:	40013800 	.word	0x40013800
 80014ac:	20000020 	.word	0x20000020

080014b0 <USART1_CheckDmaReception>:

/* USER CODE BEGIN 1 */
uint16_t buf_read_pos = 0;

void USART1_CheckDmaReception(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART1_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_4);
 80014b6:	2104      	movs	r1, #4
 80014b8:	482a      	ldr	r0, [pc, #168]	; (8001564 <USART1_CheckDmaReception+0xb4>)
 80014ba:	f7ff fd2d 	bl	8000f18 <LL_DMA_GetDataLength>
 80014be:	4603      	mov	r3, r0
 80014c0:	b29b      	uxth	r3, r3
 80014c2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80014c6:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART1_BUFFER_SIZE)
 80014c8:	88fb      	ldrh	r3, [r7, #6]
 80014ca:	2b7f      	cmp	r3, #127	; 0x7f
 80014cc:	d941      	bls.n	8001552 <USART1_CheckDmaReception+0xa2>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
 80014ce:	2104      	movs	r1, #4
 80014d0:	4824      	ldr	r0, [pc, #144]	; (8001564 <USART1_CheckDmaReception+0xb4>)
 80014d2:	f7ff fbc7 	bl	8000c64 <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_4, (uint32_t)bufferUSART1dma);
 80014d6:	4b24      	ldr	r3, [pc, #144]	; (8001568 <USART1_CheckDmaReception+0xb8>)
 80014d8:	461a      	mov	r2, r3
 80014da:	2104      	movs	r1, #4
 80014dc:	4821      	ldr	r0, [pc, #132]	; (8001564 <USART1_CheckDmaReception+0xb4>)
 80014de:	f7ff fd6d 	bl	8000fbc <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_4, DMA_USART1_BUFFER_SIZE);
 80014e2:	2280      	movs	r2, #128	; 0x80
 80014e4:	2104      	movs	r1, #4
 80014e6:	481f      	ldr	r0, [pc, #124]	; (8001564 <USART1_CheckDmaReception+0xb4>)
 80014e8:	f7ff fcf2 	bl	8000ed0 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_4);
 80014ec:	2104      	movs	r1, #4
 80014ee:	481d      	ldr	r0, [pc, #116]	; (8001564 <USART1_CheckDmaReception+0xb4>)
 80014f0:	f7ff fb98 	bl	8000c24 <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART1_BUFFER_SIZE)
 80014f4:	e012      	b.n	800151c <USART1_CheckDmaReception+0x6c>
		{
			if(USART1_ProcessData != 0)
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <USART1_CheckDmaReception+0xbc>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d008      	beq.n	8001510 <USART1_CheckDmaReception+0x60>
			{
				USART1_ProcessData(bufferUSART1dma[buf_read_pos]);
 80014fe:	4b1b      	ldr	r3, [pc, #108]	; (800156c <USART1_CheckDmaReception+0xbc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a1b      	ldr	r2, [pc, #108]	; (8001570 <USART1_CheckDmaReception+0xc0>)
 8001504:	8812      	ldrh	r2, [r2, #0]
 8001506:	4611      	mov	r1, r2
 8001508:	4a17      	ldr	r2, [pc, #92]	; (8001568 <USART1_CheckDmaReception+0xb8>)
 800150a:	5c52      	ldrb	r2, [r2, r1]
 800150c:	4610      	mov	r0, r2
 800150e:	4798      	blx	r3
//				if(bufferUSART1dma[buf_read_pos] > 15)
//					handle_display(bufferUSART1dma[buf_read_pos]);
			}
			buf_read_pos++;
 8001510:	4b17      	ldr	r3, [pc, #92]	; (8001570 <USART1_CheckDmaReception+0xc0>)
 8001512:	881b      	ldrh	r3, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	b29a      	uxth	r2, r3
 8001518:	4b15      	ldr	r3, [pc, #84]	; (8001570 <USART1_CheckDmaReception+0xc0>)
 800151a:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART1_BUFFER_SIZE)
 800151c:	4b14      	ldr	r3, [pc, #80]	; (8001570 <USART1_CheckDmaReception+0xc0>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	2b7f      	cmp	r3, #127	; 0x7f
 8001522:	d9e8      	bls.n	80014f6 <USART1_CheckDmaReception+0x46>
		}

		buf_read_pos = 0;
 8001524:	4b12      	ldr	r3, [pc, #72]	; (8001570 <USART1_CheckDmaReception+0xc0>)
 8001526:	2200      	movs	r2, #0
 8001528:	801a      	strh	r2, [r3, #0]
//					handle_display(bufferUSART1dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 800152a:	e017      	b.n	800155c <USART1_CheckDmaReception+0xac>
			if(USART1_ProcessData != 0)
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <USART1_CheckDmaReception+0xbc>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d008      	beq.n	8001546 <USART1_CheckDmaReception+0x96>
				USART1_ProcessData(bufferUSART1dma[buf_read_pos]);
 8001534:	4b0d      	ldr	r3, [pc, #52]	; (800156c <USART1_CheckDmaReception+0xbc>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a0d      	ldr	r2, [pc, #52]	; (8001570 <USART1_CheckDmaReception+0xc0>)
 800153a:	8812      	ldrh	r2, [r2, #0]
 800153c:	4611      	mov	r1, r2
 800153e:	4a0a      	ldr	r2, [pc, #40]	; (8001568 <USART1_CheckDmaReception+0xb8>)
 8001540:	5c52      	ldrb	r2, [r2, r1]
 8001542:	4610      	mov	r0, r2
 8001544:	4798      	blx	r3
			buf_read_pos++;
 8001546:	4b0a      	ldr	r3, [pc, #40]	; (8001570 <USART1_CheckDmaReception+0xc0>)
 8001548:	881b      	ldrh	r3, [r3, #0]
 800154a:	3301      	adds	r3, #1
 800154c:	b29a      	uxth	r2, r3
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <USART1_CheckDmaReception+0xc0>)
 8001550:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 8001552:	4b07      	ldr	r3, [pc, #28]	; (8001570 <USART1_CheckDmaReception+0xc0>)
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	88fa      	ldrh	r2, [r7, #6]
 8001558:	429a      	cmp	r2, r3
 800155a:	d8e7      	bhi.n	800152c <USART1_CheckDmaReception+0x7c>
}
 800155c:	bf00      	nop
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40020000 	.word	0x40020000
 8001568:	20000020 	.word	0x20000020
 800156c:	200000a0 	.word	0x200000a0
 8001570:	200000a4 	.word	0x200000a4

08001574 <Reset_Handler>:
 8001574:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015ac <LoopForever+0x2>
 8001578:	f7ff fafa 	bl	8000b70 <SystemInit>
 800157c:	480c      	ldr	r0, [pc, #48]	; (80015b0 <LoopForever+0x6>)
 800157e:	490d      	ldr	r1, [pc, #52]	; (80015b4 <LoopForever+0xa>)
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <LoopForever+0xe>)
 8001582:	2300      	movs	r3, #0
 8001584:	e002      	b.n	800158c <LoopCopyDataInit>

08001586 <CopyDataInit>:
 8001586:	58d4      	ldr	r4, [r2, r3]
 8001588:	50c4      	str	r4, [r0, r3]
 800158a:	3304      	adds	r3, #4

0800158c <LoopCopyDataInit>:
 800158c:	18c4      	adds	r4, r0, r3
 800158e:	428c      	cmp	r4, r1
 8001590:	d3f9      	bcc.n	8001586 <CopyDataInit>
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <LoopForever+0x12>)
 8001594:	4c0a      	ldr	r4, [pc, #40]	; (80015c0 <LoopForever+0x16>)
 8001596:	2300      	movs	r3, #0
 8001598:	e001      	b.n	800159e <LoopFillZerobss>

0800159a <FillZerobss>:
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	3204      	adds	r2, #4

0800159e <LoopFillZerobss>:
 800159e:	42a2      	cmp	r2, r4
 80015a0:	d3fb      	bcc.n	800159a <FillZerobss>
 80015a2:	f000 fc3f 	bl	8001e24 <__libc_init_array>
 80015a6:	f7ff f943 	bl	8000830 <main>

080015aa <LoopForever>:
 80015aa:	e7fe      	b.n	80015aa <LoopForever>
 80015ac:	20004000 	.word	0x20004000
 80015b0:	20000000 	.word	0x20000000
 80015b4:	20000004 	.word	0x20000004
 80015b8:	08001eb4 	.word	0x08001eb4
 80015bc:	20000004 	.word	0x20000004
 80015c0:	200000a8 	.word	0x200000a8

080015c4 <ADC1_IRQHandler>:
 80015c4:	e7fe      	b.n	80015c4 <ADC1_IRQHandler>

080015c6 <LL_GPIO_SetPinMode>:
{
 80015c6:	b480      	push	{r7}
 80015c8:	b089      	sub	sp, #36	; 0x24
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	60f8      	str	r0, [r7, #12]
 80015ce:	60b9      	str	r1, [r7, #8]
 80015d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	68bb      	ldr	r3, [r7, #8]
 80015d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	fa93 f3a3 	rbit	r3, r3
 80015e0:	613b      	str	r3, [r7, #16]
  return result;
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	fab3 f383 	clz	r3, r3
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	2103      	movs	r1, #3
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43db      	mvns	r3, r3
 80015f4:	401a      	ands	r2, r3
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa93 f3a3 	rbit	r3, r3
 8001600:	61bb      	str	r3, [r7, #24]
  return result;
 8001602:	69bb      	ldr	r3, [r7, #24]
 8001604:	fab3 f383 	clz	r3, r3
 8001608:	b2db      	uxtb	r3, r3
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	fa01 f303 	lsl.w	r3, r1, r3
 8001612:	431a      	orrs	r2, r3
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	601a      	str	r2, [r3, #0]
}
 8001618:	bf00      	nop
 800161a:	3724      	adds	r7, #36	; 0x24
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <LL_GPIO_SetPinOutputType>:
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	685a      	ldr	r2, [r3, #4]
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	43db      	mvns	r3, r3
 8001638:	401a      	ands	r2, r3
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	fb01 f303 	mul.w	r3, r1, r3
 8001642:	431a      	orrs	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	605a      	str	r2, [r3, #4]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <LL_GPIO_SetPinSpeed>:
{
 8001654:	b480      	push	{r7}
 8001656:	b089      	sub	sp, #36	; 0x24
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	689a      	ldr	r2, [r3, #8]
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	fa93 f3a3 	rbit	r3, r3
 800166e:	613b      	str	r3, [r7, #16]
  return result;
 8001670:	693b      	ldr	r3, [r7, #16]
 8001672:	fab3 f383 	clz	r3, r3
 8001676:	b2db      	uxtb	r3, r3
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	2103      	movs	r1, #3
 800167c:	fa01 f303 	lsl.w	r3, r1, r3
 8001680:	43db      	mvns	r3, r3
 8001682:	401a      	ands	r2, r3
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	fa93 f3a3 	rbit	r3, r3
 800168e:	61bb      	str	r3, [r7, #24]
  return result;
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fab3 f383 	clz	r3, r3
 8001696:	b2db      	uxtb	r3, r3
 8001698:	005b      	lsls	r3, r3, #1
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	fa01 f303 	lsl.w	r3, r1, r3
 80016a0:	431a      	orrs	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	609a      	str	r2, [r3, #8]
}
 80016a6:	bf00      	nop
 80016a8:	3724      	adds	r7, #36	; 0x24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <LL_GPIO_SetPinPull>:
{
 80016b2:	b480      	push	{r7}
 80016b4:	b089      	sub	sp, #36	; 0x24
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	60f8      	str	r0, [r7, #12]
 80016ba:	60b9      	str	r1, [r7, #8]
 80016bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	613b      	str	r3, [r7, #16]
  return result;
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2103      	movs	r1, #3
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	401a      	ands	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	fa93 f3a3 	rbit	r3, r3
 80016ec:	61bb      	str	r3, [r7, #24]
  return result;
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	fab3 f383 	clz	r3, r3
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	fa01 f303 	lsl.w	r3, r1, r3
 80016fe:	431a      	orrs	r2, r3
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	60da      	str	r2, [r3, #12]
}
 8001704:	bf00      	nop
 8001706:	3724      	adds	r7, #36	; 0x24
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr

08001710 <LL_GPIO_SetAFPin_0_7>:
{
 8001710:	b480      	push	{r7}
 8001712:	b089      	sub	sp, #36	; 0x24
 8001714:	af00      	add	r7, sp, #0
 8001716:	60f8      	str	r0, [r7, #12]
 8001718:	60b9      	str	r1, [r7, #8]
 800171a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	6a1a      	ldr	r2, [r3, #32]
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	fa93 f3a3 	rbit	r3, r3
 800172a:	613b      	str	r3, [r7, #16]
  return result;
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	fab3 f383 	clz	r3, r3
 8001732:	b2db      	uxtb	r3, r3
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	210f      	movs	r1, #15
 8001738:	fa01 f303 	lsl.w	r3, r1, r3
 800173c:	43db      	mvns	r3, r3
 800173e:	401a      	ands	r2, r3
 8001740:	68bb      	ldr	r3, [r7, #8]
 8001742:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	fa93 f3a3 	rbit	r3, r3
 800174a:	61bb      	str	r3, [r7, #24]
  return result;
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fab3 f383 	clz	r3, r3
 8001752:	b2db      	uxtb	r3, r3
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	6879      	ldr	r1, [r7, #4]
 8001758:	fa01 f303 	lsl.w	r3, r1, r3
 800175c:	431a      	orrs	r2, r3
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	621a      	str	r2, [r3, #32]
}
 8001762:	bf00      	nop
 8001764:	3724      	adds	r7, #36	; 0x24
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr

0800176e <LL_GPIO_SetAFPin_8_15>:
{
 800176e:	b480      	push	{r7}
 8001770:	b089      	sub	sp, #36	; 0x24
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa93 f3a3 	rbit	r3, r3
 800178a:	613b      	str	r3, [r7, #16]
  return result;
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	fab3 f383 	clz	r3, r3
 8001792:	b2db      	uxtb	r3, r3
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	210f      	movs	r1, #15
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	401a      	ands	r2, r3
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	0a1b      	lsrs	r3, r3, #8
 80017a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa93 f3a3 	rbit	r3, r3
 80017ac:	61bb      	str	r3, [r7, #24]
  return result;
 80017ae:	69bb      	ldr	r3, [r7, #24]
 80017b0:	fab3 f383 	clz	r3, r3
 80017b4:	b2db      	uxtb	r3, r3
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	6879      	ldr	r1, [r7, #4]
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	431a      	orrs	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017c4:	bf00      	nop
 80017c6:	3724      	adds	r7, #36	; 0x24
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b088      	sub	sp, #32
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa93 f3a3 	rbit	r3, r3
 80017e6:	613b      	str	r3, [r7, #16]
  return result;
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	fab3 f383 	clz	r3, r3
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80017f2:	e051      	b.n	8001898 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	2101      	movs	r1, #1
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d043      	beq.n	8001892 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d003      	beq.n	800181a <LL_GPIO_Init+0x4a>
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	2b02      	cmp	r3, #2
 8001818:	d10e      	bne.n	8001838 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	461a      	mov	r2, r3
 8001820:	69b9      	ldr	r1, [r7, #24]
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f7ff ff16 	bl	8001654 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	6819      	ldr	r1, [r3, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	461a      	mov	r2, r3
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff fef6 	bl	8001624 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	691b      	ldr	r3, [r3, #16]
 800183c:	461a      	mov	r2, r3
 800183e:	69b9      	ldr	r1, [r7, #24]
 8001840:	6878      	ldr	r0, [r7, #4]
 8001842:	f7ff ff36 	bl	80016b2 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	2b02      	cmp	r3, #2
 800184c:	d11a      	bne.n	8001884 <LL_GPIO_Init+0xb4>
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	60bb      	str	r3, [r7, #8]
  return result;
 800185a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	2b07      	cmp	r3, #7
 8001864:	d807      	bhi.n	8001876 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	695b      	ldr	r3, [r3, #20]
 800186a:	461a      	mov	r2, r3
 800186c:	69b9      	ldr	r1, [r7, #24]
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f7ff ff4e 	bl	8001710 <LL_GPIO_SetAFPin_0_7>
 8001874:	e006      	b.n	8001884 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	461a      	mov	r2, r3
 800187c:	69b9      	ldr	r1, [r7, #24]
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff ff75 	bl	800176e <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	461a      	mov	r2, r3
 800188a:	69b9      	ldr	r1, [r7, #24]
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff fe9a 	bl	80015c6 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3301      	adds	r3, #1
 8001896:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	fa22 f303 	lsr.w	r3, r2, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1a6      	bne.n	80017f4 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <LL_RCC_HSI_IsReady>:
{
 80018b0:	b480      	push	{r7}
 80018b2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80018b4:	4b06      	ldr	r3, [pc, #24]	; (80018d0 <LL_RCC_HSI_IsReady+0x20>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f003 0302 	and.w	r3, r3, #2
 80018bc:	2b02      	cmp	r3, #2
 80018be:	bf0c      	ite	eq
 80018c0:	2301      	moveq	r3, #1
 80018c2:	2300      	movne	r3, #0
 80018c4:	b2db      	uxtb	r3, r3
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	40021000 	.word	0x40021000

080018d4 <LL_RCC_LSE_IsReady>:
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <LL_RCC_LSE_IsReady+0x20>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	bf0c      	ite	eq
 80018e4:	2301      	moveq	r3, #1
 80018e6:	2300      	movne	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	40021000 	.word	0x40021000

080018f8 <LL_RCC_GetSysClkSource>:
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018fc:	4b04      	ldr	r3, [pc, #16]	; (8001910 <LL_RCC_GetSysClkSource+0x18>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 030c 	and.w	r3, r3, #12
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40021000 	.word	0x40021000

08001914 <LL_RCC_GetAHBPrescaler>:
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <LL_RCC_GetAHBPrescaler+0x18>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40021000 	.word	0x40021000

08001930 <LL_RCC_GetAPB1Prescaler>:
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001934:	4b04      	ldr	r3, [pc, #16]	; (8001948 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800193c:	4618      	mov	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40021000 	.word	0x40021000

0800194c <LL_RCC_GetAPB2Prescaler>:
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40021000 	.word	0x40021000

08001968 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001970:	4b07      	ldr	r3, [pc, #28]	; (8001990 <LL_RCC_GetUSARTClockSource+0x28>)
 8001972:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001974:	2103      	movs	r1, #3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	fa01 f303 	lsl.w	r3, r1, r3
 800197c:	401a      	ands	r2, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	061b      	lsls	r3, r3, #24
 8001982:	4313      	orrs	r3, r2
}
 8001984:	4618      	mov	r0, r3
 8001986:	370c      	adds	r7, #12
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	40021000 	.word	0x40021000

08001994 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001998:	4b04      	ldr	r3, [pc, #16]	; (80019ac <LL_RCC_PLL_GetMainSource+0x18>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 80019a0:	4618      	mov	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	40021000 	.word	0x40021000

080019b0 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 80019b4:	4b04      	ldr	r3, [pc, #16]	; (80019c8 <LL_RCC_PLL_GetMultiplicator+0x18>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	40021000 	.word	0x40021000

080019cc <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80019d0:	4b04      	ldr	r3, [pc, #16]	; (80019e4 <LL_RCC_PLL_GetPrediv+0x18>)
 80019d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019d4:	f003 030f 	and.w	r3, r3, #15
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000

080019e8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80019f0:	f000 f862 	bl	8001ab8 <RCC_GetSystemClockFreq>
 80019f4:	4602      	mov	r2, r0
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f000 f880 	bl	8001b04 <RCC_GetHCLKClockFreq>
 8001a04:	4602      	mov	r2, r0
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f88e 	bl	8001b30 <RCC_GetPCLK1ClockFreq>
 8001a14:	4602      	mov	r2, r0
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f89a 	bl	8001b58 <RCC_GetPCLK2ClockFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	60da      	str	r2, [r3, #12]
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
	...

08001a34 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b084      	sub	sp, #16
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d130      	bne.n	8001aa8 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ff8e 	bl	8001968 <LL_RCC_GetUSARTClockSource>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b03      	cmp	r3, #3
 8001a50:	d00a      	beq.n	8001a68 <LL_RCC_GetUSARTClockFreq+0x34>
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d819      	bhi.n	8001a8a <LL_RCC_GetUSARTClockFreq+0x56>
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d002      	beq.n	8001a60 <LL_RCC_GetUSARTClockFreq+0x2c>
 8001a5a:	2b02      	cmp	r3, #2
 8001a5c:	d00c      	beq.n	8001a78 <LL_RCC_GetUSARTClockFreq+0x44>
 8001a5e:	e014      	b.n	8001a8a <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001a60:	f000 f82a 	bl	8001ab8 <RCC_GetSystemClockFreq>
 8001a64:	60f8      	str	r0, [r7, #12]
        break;
 8001a66:	e01f      	b.n	8001aa8 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001a68:	f7ff ff22 	bl	80018b0 <LL_RCC_HSI_IsReady>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d017      	beq.n	8001aa2 <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 8001a72:	4b10      	ldr	r3, [pc, #64]	; (8001ab4 <LL_RCC_GetUSARTClockFreq+0x80>)
 8001a74:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001a76:	e014      	b.n	8001aa2 <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001a78:	f7ff ff2c 	bl	80018d4 <LL_RCC_LSE_IsReady>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d011      	beq.n	8001aa6 <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 8001a82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a86:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001a88:	e00d      	b.n	8001aa6 <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001a8a:	f000 f815 	bl	8001ab8 <RCC_GetSystemClockFreq>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	4618      	mov	r0, r3
 8001a92:	f000 f837 	bl	8001b04 <RCC_GetHCLKClockFreq>
 8001a96:	4603      	mov	r3, r0
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f000 f849 	bl	8001b30 <RCC_GetPCLK1ClockFreq>
 8001a9e:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8001aa0:	e002      	b.n	8001aa8 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8001aa2:	bf00      	nop
 8001aa4:	e000      	b.n	8001aa8 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 8001aa6:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	007a1200 	.word	0x007a1200

08001ab8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001ac2:	f7ff ff19 	bl	80018f8 <LL_RCC_GetSysClkSource>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b08      	cmp	r3, #8
 8001aca:	d00c      	beq.n	8001ae6 <RCC_GetSystemClockFreq+0x2e>
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d80e      	bhi.n	8001aee <RCC_GetSystemClockFreq+0x36>
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d002      	beq.n	8001ada <RCC_GetSystemClockFreq+0x22>
 8001ad4:	2b04      	cmp	r3, #4
 8001ad6:	d003      	beq.n	8001ae0 <RCC_GetSystemClockFreq+0x28>
 8001ad8:	e009      	b.n	8001aee <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001ada:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <RCC_GetSystemClockFreq+0x48>)
 8001adc:	607b      	str	r3, [r7, #4]
      break;
 8001ade:	e009      	b.n	8001af4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001ae0:	4b07      	ldr	r3, [pc, #28]	; (8001b00 <RCC_GetSystemClockFreq+0x48>)
 8001ae2:	607b      	str	r3, [r7, #4]
      break;
 8001ae4:	e006      	b.n	8001af4 <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001ae6:	f000 f84b 	bl	8001b80 <RCC_PLL_GetFreqDomain_SYS>
 8001aea:	6078      	str	r0, [r7, #4]
      break;
 8001aec:	e002      	b.n	8001af4 <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <RCC_GetSystemClockFreq+0x48>)
 8001af0:	607b      	str	r3, [r7, #4]
      break;
 8001af2:	bf00      	nop
  }

  return frequency;
 8001af4:	687b      	ldr	r3, [r7, #4]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	007a1200 	.word	0x007a1200

08001b04 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001b0c:	f7ff ff02 	bl	8001914 <LL_RCC_GetAHBPrescaler>
 8001b10:	4603      	mov	r3, r0
 8001b12:	091b      	lsrs	r3, r3, #4
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <RCC_GetHCLKClockFreq+0x28>)
 8001b1a:	5cd3      	ldrb	r3, [r2, r3]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	40d3      	lsrs	r3, r2
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3708      	adds	r7, #8
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	08001e8c 	.word	0x08001e8c

08001b30 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001b38:	f7ff fefa 	bl	8001930 <LL_RCC_GetAPB1Prescaler>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	0a1b      	lsrs	r3, r3, #8
 8001b40:	4a04      	ldr	r2, [pc, #16]	; (8001b54 <RCC_GetPCLK1ClockFreq+0x24>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	461a      	mov	r2, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	40d3      	lsrs	r3, r2
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	08001e9c 	.word	0x08001e9c

08001b58 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001b60:	f7ff fef4 	bl	800194c <LL_RCC_GetAPB2Prescaler>
 8001b64:	4603      	mov	r3, r0
 8001b66:	0adb      	lsrs	r3, r3, #11
 8001b68:	4a04      	ldr	r2, [pc, #16]	; (8001b7c <RCC_GetPCLK2ClockFreq+0x24>)
 8001b6a:	5cd3      	ldrb	r3, [r2, r3]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	40d3      	lsrs	r3, r2
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3708      	adds	r7, #8
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	08001e9c 	.word	0x08001e9c

08001b80 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b085      	sub	sp, #20
 8001b84:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	60fb      	str	r3, [r7, #12]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001b8e:	f7ff ff01 	bl	8001994 <LL_RCC_PLL_GetMainSource>
 8001b92:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d004      	beq.n	8001ba4 <RCC_PLL_GetFreqDomain_SYS+0x24>
 8001b9a:	68bb      	ldr	r3, [r7, #8]
 8001b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba0:	d003      	beq.n	8001baa <RCC_PLL_GetFreqDomain_SYS+0x2a>
 8001ba2:	e005      	b.n	8001bb0 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001ba6:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001ba8:	e005      	b.n	8001bb6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001baa:	4b13      	ldr	r3, [pc, #76]	; (8001bf8 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8001bac:	60fb      	str	r3, [r7, #12]
      break;
 8001bae:	e002      	b.n	8001bb6 <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 8001bb2:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001bb4:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001bb6:	f7ff ff09 	bl	80019cc <LL_RCC_PLL_GetPrediv>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	fbb2 f4f3 	udiv	r4, r2, r3
 8001bc4:	f7ff fef4 	bl	80019b0 <LL_RCC_PLL_GetMultiplicator>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001bce:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001bd2:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	fa92 f2a2 	rbit	r2, r2
 8001bda:	603a      	str	r2, [r7, #0]
  return result;
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	fab2 f282 	clz	r2, r2
 8001be2:	b2d2      	uxtb	r2, r2
 8001be4:	40d3      	lsrs	r3, r2
 8001be6:	3302      	adds	r3, #2
 8001be8:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	3714      	adds	r7, #20
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	bd90      	pop	{r4, r7, pc}
 8001bf4:	003d0900 	.word	0x003d0900
 8001bf8:	007a1200 	.word	0x007a1200

08001bfc <LL_USART_IsEnabled>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d101      	bne.n	8001c14 <LL_USART_IsEnabled+0x18>
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <LL_USART_IsEnabled+0x1a>
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <LL_USART_SetStopBitsLength>:
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
 8001c2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	431a      	orrs	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	605a      	str	r2, [r3, #4]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr

08001c48 <LL_USART_SetHWFlowCtrl>:
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	431a      	orrs	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	609a      	str	r2, [r3, #8]
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <LL_USART_SetBaudRate>:
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b087      	sub	sp, #28
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c82:	d11a      	bne.n	8001cba <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	005a      	lsls	r2, r3, #1
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	441a      	add	r2, r3
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c94:	b29b      	uxth	r3, r3
 8001c96:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001ca2:	697b      	ldr	r3, [r7, #20]
 8001ca4:	085b      	lsrs	r3, r3, #1
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	f003 0307 	and.w	r3, r3, #7
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	693a      	ldr	r2, [r7, #16]
 8001cb6:	60da      	str	r2, [r3, #12]
}
 8001cb8:	e00a      	b.n	8001cd0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	085a      	lsrs	r2, r3, #1
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	441a      	add	r2, r3
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc8:	b29b      	uxth	r3, r3
 8001cca:	461a      	mov	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	60da      	str	r2, [r3, #12]
}
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b088      	sub	sp, #32
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff ff84 	bl	8001bfc <LL_USART_IsEnabled>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d14e      	bne.n	8001d98 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b29      	ldr	r3, [pc, #164]	; (8001da4 <LL_USART_Init+0xc8>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	6851      	ldr	r1, [r2, #4]
 8001d06:	683a      	ldr	r2, [r7, #0]
 8001d08:	68d2      	ldr	r2, [r2, #12]
 8001d0a:	4311      	orrs	r1, r2
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	6912      	ldr	r2, [r2, #16]
 8001d10:	4311      	orrs	r1, r2
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	6992      	ldr	r2, [r2, #24]
 8001d16:	430a      	orrs	r2, r1
 8001d18:	431a      	orrs	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	4619      	mov	r1, r3
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7ff ff7c 	bl	8001c22 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	695b      	ldr	r3, [r3, #20]
 8001d2e:	4619      	mov	r1, r3
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff89 	bl	8001c48 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a1b      	ldr	r2, [pc, #108]	; (8001da8 <LL_USART_Init+0xcc>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d104      	bne.n	8001d48 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8001d3e:	2000      	movs	r0, #0
 8001d40:	f7ff fe78 	bl	8001a34 <LL_RCC_GetUSARTClockFreq>
 8001d44:	61b8      	str	r0, [r7, #24]
 8001d46:	e016      	b.n	8001d76 <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	4a18      	ldr	r2, [pc, #96]	; (8001dac <LL_USART_Init+0xd0>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d107      	bne.n	8001d60 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fe47 	bl	80019e8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	61bb      	str	r3, [r7, #24]
 8001d5e:	e00a      	b.n	8001d76 <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a13      	ldr	r2, [pc, #76]	; (8001db0 <LL_USART_Init+0xd4>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d106      	bne.n	8001d76 <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001d68:	f107 0308 	add.w	r3, r7, #8
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff fe3b 	bl	80019e8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00d      	beq.n	8001d98 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d009      	beq.n	8001d98 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 8001d84:	2300      	movs	r3, #0
 8001d86:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8001d90:	69b9      	ldr	r1, [r7, #24]
 8001d92:	6878      	ldr	r0, [r7, #4]
 8001d94:	f7ff ff6b 	bl	8001c6e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001d98:	7ffb      	ldrb	r3, [r7, #31]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3720      	adds	r7, #32
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	efff69f3 	.word	0xefff69f3
 8001da8:	40013800 	.word	0x40013800
 8001dac:	40004400 	.word	0x40004400
 8001db0:	40004800 	.word	0x40004800

08001db4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dc6:	4a07      	ldr	r2, [pc, #28]	; (8001de4 <LL_InitTick+0x30>)
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8001dcc:	4b05      	ldr	r3, [pc, #20]	; (8001de4 <LL_InitTick+0x30>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd2:	4b04      	ldr	r3, [pc, #16]	; (8001de4 <LL_InitTick+0x30>)
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e010 	.word	0xe000e010

08001de8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8001df0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ffdd 	bl	8001db4 <LL_InitTick>
}
 8001dfa:	bf00      	nop
 8001dfc:	3708      	adds	r7, #8
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
	...

08001e04 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8001e0c:	4a04      	ldr	r2, [pc, #16]	; (8001e20 <LL_SetSystemCoreClock+0x1c>)
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6013      	str	r3, [r2, #0]
}
 8001e12:	bf00      	nop
 8001e14:	370c      	adds	r7, #12
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000000 	.word	0x20000000

08001e24 <__libc_init_array>:
 8001e24:	b570      	push	{r4, r5, r6, lr}
 8001e26:	4d0d      	ldr	r5, [pc, #52]	; (8001e5c <__libc_init_array+0x38>)
 8001e28:	4c0d      	ldr	r4, [pc, #52]	; (8001e60 <__libc_init_array+0x3c>)
 8001e2a:	1b64      	subs	r4, r4, r5
 8001e2c:	10a4      	asrs	r4, r4, #2
 8001e2e:	2600      	movs	r6, #0
 8001e30:	42a6      	cmp	r6, r4
 8001e32:	d109      	bne.n	8001e48 <__libc_init_array+0x24>
 8001e34:	4d0b      	ldr	r5, [pc, #44]	; (8001e64 <__libc_init_array+0x40>)
 8001e36:	4c0c      	ldr	r4, [pc, #48]	; (8001e68 <__libc_init_array+0x44>)
 8001e38:	f000 f818 	bl	8001e6c <_init>
 8001e3c:	1b64      	subs	r4, r4, r5
 8001e3e:	10a4      	asrs	r4, r4, #2
 8001e40:	2600      	movs	r6, #0
 8001e42:	42a6      	cmp	r6, r4
 8001e44:	d105      	bne.n	8001e52 <__libc_init_array+0x2e>
 8001e46:	bd70      	pop	{r4, r5, r6, pc}
 8001e48:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e4c:	4798      	blx	r3
 8001e4e:	3601      	adds	r6, #1
 8001e50:	e7ee      	b.n	8001e30 <__libc_init_array+0xc>
 8001e52:	f855 3b04 	ldr.w	r3, [r5], #4
 8001e56:	4798      	blx	r3
 8001e58:	3601      	adds	r6, #1
 8001e5a:	e7f2      	b.n	8001e42 <__libc_init_array+0x1e>
 8001e5c:	08001eac 	.word	0x08001eac
 8001e60:	08001eac 	.word	0x08001eac
 8001e64:	08001eac 	.word	0x08001eac
 8001e68:	08001eb0 	.word	0x08001eb0

08001e6c <_init>:
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6e:	bf00      	nop
 8001e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e72:	bc08      	pop	{r3}
 8001e74:	469e      	mov	lr, r3
 8001e76:	4770      	bx	lr

08001e78 <_fini>:
 8001e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7a:	bf00      	nop
 8001e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7e:	bc08      	pop	{r3}
 8001e80:	469e      	mov	lr, r3
 8001e82:	4770      	bx	lr
