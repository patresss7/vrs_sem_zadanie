
KilometerTracker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004efc  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000288  08005088  08005088  00015088  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005310  08005310  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08005310  08005310  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005310  08005310  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08005318  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000650  20000068  08005380  00020068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200006b8  08005380  000206b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00005b4e  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019e1  00000000  00000000  00025c29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000788  00000000  00000000  00027610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000571  00000000  00000000  00027d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017148  00000000  00000000  00028309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007ba0  00000000  00000000  0003f451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00075adf  00000000  00000000  00046ff1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000239c  00000000  00000000  000bcad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000bee6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000068 	.word	0x20000068
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800506c 	.word	0x0800506c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000006c 	.word	0x2000006c
 80001c4:	0800506c 	.word	0x0800506c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_d2f>:
 8000b30:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b34:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b38:	bf24      	itt	cs
 8000b3a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b42:	d90d      	bls.n	8000b60 <__aeabi_d2f+0x30>
 8000b44:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b48:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b4c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b50:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b54:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b58:	bf08      	it	eq
 8000b5a:	f020 0001 	biceq.w	r0, r0, #1
 8000b5e:	4770      	bx	lr
 8000b60:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b64:	d121      	bne.n	8000baa <__aeabi_d2f+0x7a>
 8000b66:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b6a:	bfbc      	itt	lt
 8000b6c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b70:	4770      	bxlt	lr
 8000b72:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b76:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b7a:	f1c2 0218 	rsb	r2, r2, #24
 8000b7e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b82:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b86:	fa20 f002 	lsr.w	r0, r0, r2
 8000b8a:	bf18      	it	ne
 8000b8c:	f040 0001 	orrne.w	r0, r0, #1
 8000b90:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b94:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b98:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b9c:	ea40 000c 	orr.w	r0, r0, ip
 8000ba0:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba8:	e7cc      	b.n	8000b44 <__aeabi_d2f+0x14>
 8000baa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bae:	d107      	bne.n	8000bc0 <__aeabi_d2f+0x90>
 8000bb0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb4:	bf1e      	ittt	ne
 8000bb6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bbe:	4770      	bxne	lr
 8000bc0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bcc:	4770      	bx	lr
 8000bce:	bf00      	nop

08000bd0 <toRadians>:
    decimalCoord.longitude = convertToDecimalDegrees(floor(coord.longitude / 100), fmod(coord.longitude, 100));
    return decimalCoord;
}

// Function to convert degrees to radians
double toRadians(double degree) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	ed87 0b00 	vstr	d0, [r7]
    return degree * (M_PI / 180.0);
 8000bda:	a309      	add	r3, pc, #36	; (adr r3, 8000c00 <toRadians+0x30>)
 8000bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000be0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000be4:	f7ff fcac 	bl	8000540 <__aeabi_dmul>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	ec43 2b17 	vmov	d7, r2, r3
}
 8000bf0:	eeb0 0a47 	vmov.f32	s0, s14
 8000bf4:	eef0 0a67 	vmov.f32	s1, s15
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	a2529d39 	.word	0xa2529d39
 8000c04:	3f91df46 	.word	0x3f91df46

08000c08 <haversineDistance>:

// Function to compute the Haversine distance between two coordinates
double haversineDistance(struct Coordinate coord1, struct Coordinate coord2) {
 8000c08:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c0c:	ed2d 8b02 	vpush	{d8}
 8000c10:	b09a      	sub	sp, #104	; 0x68
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	eeb0 4a40 	vmov.f32	s8, s0
 8000c18:	eef0 4a60 	vmov.f32	s9, s1
 8000c1c:	eeb0 5a41 	vmov.f32	s10, s2
 8000c20:	eef0 5a61 	vmov.f32	s11, s3
 8000c24:	eeb0 6a42 	vmov.f32	s12, s4
 8000c28:	eef0 6a62 	vmov.f32	s13, s5
 8000c2c:	eeb0 7a43 	vmov.f32	s14, s6
 8000c30:	eef0 7a63 	vmov.f32	s15, s7
 8000c34:	ed87 4b04 	vstr	d4, [r7, #16]
 8000c38:	ed87 5b06 	vstr	d5, [r7, #24]
 8000c3c:	ed87 6b00 	vstr	d6, [r7]
 8000c40:	ed87 7b02 	vstr	d7, [r7, #8]
    // Convert latitude and longitude from degrees to radians
    double lat1 = toRadians(coord1.latitude / 100.0);
 8000c44:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000c48:	f04f 0200 	mov.w	r2, #0
 8000c4c:	4b96      	ldr	r3, [pc, #600]	; (8000ea8 <haversineDistance+0x2a0>)
 8000c4e:	f7ff fda1 	bl	8000794 <__aeabi_ddiv>
 8000c52:	4602      	mov	r2, r0
 8000c54:	460b      	mov	r3, r1
 8000c56:	ec43 2b17 	vmov	d7, r2, r3
 8000c5a:	eeb0 0a47 	vmov.f32	s0, s14
 8000c5e:	eef0 0a67 	vmov.f32	s1, s15
 8000c62:	f7ff ffb5 	bl	8000bd0 <toRadians>
 8000c66:	ed87 0b18 	vstr	d0, [r7, #96]	; 0x60
    double lon1 = toRadians(coord1.longitude / 100.0);
 8000c6a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8000c6e:	f04f 0200 	mov.w	r2, #0
 8000c72:	4b8d      	ldr	r3, [pc, #564]	; (8000ea8 <haversineDistance+0x2a0>)
 8000c74:	f7ff fd8e 	bl	8000794 <__aeabi_ddiv>
 8000c78:	4602      	mov	r2, r0
 8000c7a:	460b      	mov	r3, r1
 8000c7c:	ec43 2b17 	vmov	d7, r2, r3
 8000c80:	eeb0 0a47 	vmov.f32	s0, s14
 8000c84:	eef0 0a67 	vmov.f32	s1, s15
 8000c88:	f7ff ffa2 	bl	8000bd0 <toRadians>
 8000c8c:	ed87 0b16 	vstr	d0, [r7, #88]	; 0x58
    double lat2 = toRadians(coord2.latitude / 100.0);
 8000c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000c94:	f04f 0200 	mov.w	r2, #0
 8000c98:	4b83      	ldr	r3, [pc, #524]	; (8000ea8 <haversineDistance+0x2a0>)
 8000c9a:	f7ff fd7b 	bl	8000794 <__aeabi_ddiv>
 8000c9e:	4602      	mov	r2, r0
 8000ca0:	460b      	mov	r3, r1
 8000ca2:	ec43 2b17 	vmov	d7, r2, r3
 8000ca6:	eeb0 0a47 	vmov.f32	s0, s14
 8000caa:	eef0 0a67 	vmov.f32	s1, s15
 8000cae:	f7ff ff8f 	bl	8000bd0 <toRadians>
 8000cb2:	ed87 0b14 	vstr	d0, [r7, #80]	; 0x50
    double lon2 = toRadians(coord2.longitude / 100.0);
 8000cb6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	4b7a      	ldr	r3, [pc, #488]	; (8000ea8 <haversineDistance+0x2a0>)
 8000cc0:	f7ff fd68 	bl	8000794 <__aeabi_ddiv>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1
 8000cc8:	ec43 2b17 	vmov	d7, r2, r3
 8000ccc:	eeb0 0a47 	vmov.f32	s0, s14
 8000cd0:	eef0 0a67 	vmov.f32	s1, s15
 8000cd4:	f7ff ff7c 	bl	8000bd0 <toRadians>
 8000cd8:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48

    // Compute differences in coordinates
    double dlat = lat2 - lat1;
 8000cdc:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8000ce0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8000ce4:	f7ff fa74 	bl	80001d0 <__aeabi_dsub>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    double dlon = lon2 - lon1;
 8000cf0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8000cf4:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8000cf8:	f7ff fa6a 	bl	80001d0 <__aeabi_dsub>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

    // Haversine formula
    double a = sin(dlat / 2) * sin(dlat / 2) + cos(lat1) * cos(lat2) * sin(dlon / 2) * sin(dlon / 2);
 8000d04:	f04f 0200 	mov.w	r2, #0
 8000d08:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d0c:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000d10:	f7ff fd40 	bl	8000794 <__aeabi_ddiv>
 8000d14:	4602      	mov	r2, r0
 8000d16:	460b      	mov	r3, r1
 8000d18:	ec43 2b17 	vmov	d7, r2, r3
 8000d1c:	eeb0 0a47 	vmov.f32	s0, s14
 8000d20:	eef0 0a67 	vmov.f32	s1, s15
 8000d24:	f002 fe1c 	bl	8003960 <sin>
 8000d28:	ec55 4b10 	vmov	r4, r5, d0
 8000d2c:	f04f 0200 	mov.w	r2, #0
 8000d30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d34:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8000d38:	f7ff fd2c 	bl	8000794 <__aeabi_ddiv>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	ec43 2b17 	vmov	d7, r2, r3
 8000d44:	eeb0 0a47 	vmov.f32	s0, s14
 8000d48:	eef0 0a67 	vmov.f32	s1, s15
 8000d4c:	f002 fe08 	bl	8003960 <sin>
 8000d50:	ec53 2b10 	vmov	r2, r3, d0
 8000d54:	4620      	mov	r0, r4
 8000d56:	4629      	mov	r1, r5
 8000d58:	f7ff fbf2 	bl	8000540 <__aeabi_dmul>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	460b      	mov	r3, r1
 8000d60:	4614      	mov	r4, r2
 8000d62:	461d      	mov	r5, r3
 8000d64:	ed97 0b18 	vldr	d0, [r7, #96]	; 0x60
 8000d68:	f002 fda6 	bl	80038b8 <cos>
 8000d6c:	ec59 8b10 	vmov	r8, r9, d0
 8000d70:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 8000d74:	f002 fda0 	bl	80038b8 <cos>
 8000d78:	ec53 2b10 	vmov	r2, r3, d0
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	4649      	mov	r1, r9
 8000d80:	f7ff fbde 	bl	8000540 <__aeabi_dmul>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4690      	mov	r8, r2
 8000d8a:	4699      	mov	r9, r3
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000d94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000d98:	f7ff fcfc 	bl	8000794 <__aeabi_ddiv>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	460b      	mov	r3, r1
 8000da0:	ec43 2b17 	vmov	d7, r2, r3
 8000da4:	eeb0 0a47 	vmov.f32	s0, s14
 8000da8:	eef0 0a67 	vmov.f32	s1, s15
 8000dac:	f002 fdd8 	bl	8003960 <sin>
 8000db0:	ec53 2b10 	vmov	r2, r3, d0
 8000db4:	4640      	mov	r0, r8
 8000db6:	4649      	mov	r1, r9
 8000db8:	f7ff fbc2 	bl	8000540 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4690      	mov	r8, r2
 8000dc2:	4699      	mov	r9, r3
 8000dc4:	f04f 0200 	mov.w	r2, #0
 8000dc8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000dcc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000dd0:	f7ff fce0 	bl	8000794 <__aeabi_ddiv>
 8000dd4:	4602      	mov	r2, r0
 8000dd6:	460b      	mov	r3, r1
 8000dd8:	ec43 2b17 	vmov	d7, r2, r3
 8000ddc:	eeb0 0a47 	vmov.f32	s0, s14
 8000de0:	eef0 0a67 	vmov.f32	s1, s15
 8000de4:	f002 fdbc 	bl	8003960 <sin>
 8000de8:	ec53 2b10 	vmov	r2, r3, d0
 8000dec:	4640      	mov	r0, r8
 8000dee:	4649      	mov	r1, r9
 8000df0:	f7ff fba6 	bl	8000540 <__aeabi_dmul>
 8000df4:	4602      	mov	r2, r0
 8000df6:	460b      	mov	r3, r1
 8000df8:	4620      	mov	r0, r4
 8000dfa:	4629      	mov	r1, r5
 8000dfc:	f7ff f9ea 	bl	80001d4 <__adddf3>
 8000e00:	4602      	mov	r2, r0
 8000e02:	460b      	mov	r3, r1
 8000e04:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    double c = 2 * atan2(sqrt(a), sqrt(1 - a));
 8000e08:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 8000e0c:	f002 fd28 	bl	8003860 <sqrt>
 8000e10:	eeb0 8a40 	vmov.f32	s16, s0
 8000e14:	eef0 8a60 	vmov.f32	s17, s1
 8000e18:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000e1c:	f04f 0000 	mov.w	r0, #0
 8000e20:	4922      	ldr	r1, [pc, #136]	; (8000eac <haversineDistance+0x2a4>)
 8000e22:	f7ff f9d5 	bl	80001d0 <__aeabi_dsub>
 8000e26:	4602      	mov	r2, r0
 8000e28:	460b      	mov	r3, r1
 8000e2a:	ec43 2b17 	vmov	d7, r2, r3
 8000e2e:	eeb0 0a47 	vmov.f32	s0, s14
 8000e32:	eef0 0a67 	vmov.f32	s1, s15
 8000e36:	f002 fd13 	bl	8003860 <sqrt>
 8000e3a:	eeb0 7a40 	vmov.f32	s14, s0
 8000e3e:	eef0 7a60 	vmov.f32	s15, s1
 8000e42:	eeb0 1a47 	vmov.f32	s2, s14
 8000e46:	eef0 1a67 	vmov.f32	s3, s15
 8000e4a:	eeb0 0a48 	vmov.f32	s0, s16
 8000e4e:	eef0 0a68 	vmov.f32	s1, s17
 8000e52:	f002 fd03 	bl	800385c <atan2>
 8000e56:	ec51 0b10 	vmov	r0, r1, d0
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	f7ff f9b9 	bl	80001d4 <__adddf3>
 8000e62:	4602      	mov	r2, r0
 8000e64:	460b      	mov	r3, r1
 8000e66:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    // Distance in meters
    double distance = EARTH_RADIUS * c;
 8000e6a:	a30d      	add	r3, pc, #52	; (adr r3, 8000ea0 <haversineDistance+0x298>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8000e74:	f7ff fb64 	bl	8000540 <__aeabi_dmul>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    return distance;
 8000e80:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8000e84:	ec43 2b17 	vmov	d7, r2, r3
}
 8000e88:	eeb0 0a47 	vmov.f32	s0, s14
 8000e8c:	eef0 0a67 	vmov.f32	s1, s15
 8000e90:	3768      	adds	r7, #104	; 0x68
 8000e92:	46bd      	mov	sp, r7
 8000e94:	ecbd 8b02 	vpop	{d8}
 8000e98:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8000e9c:	f3af 8000 	nop.w
 8000ea0:	00000000 	.word	0x00000000
 8000ea4:	41584dae 	.word	0x41584dae
 8000ea8:	40590000 	.word	0x40590000
 8000eac:	3ff00000 	.word	0x3ff00000

08000eb0 <get_device_position>:
uint8_t started = 0;
uint8_t write_index = 0;

uint16_t temp_parse_progress = 0;

struct position get_device_position(void) {
 8000eb0:	b5b0      	push	{r4, r5, r7, lr}
 8000eb2:	b084      	sub	sp, #16
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]

	for (int i = 0; i < 512 - 5; ++i) {  // Ensure buffer has at least 512 elements
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	e18b      	b.n	80011d6 <get_device_position+0x326>
		if (buffer[i] == START_GNGGA_MESSAGE_STRING[0] && buffer[i+1] == START_GNGGA_MESSAGE_STRING[1] &&
 8000ebe:	4ac2      	ldr	r2, [pc, #776]	; (80011c8 <get_device_position+0x318>)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2247      	movs	r2, #71	; 0x47
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	f040 8181 	bne.w	80011d0 <get_device_position+0x320>
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	4abd      	ldr	r2, [pc, #756]	; (80011c8 <get_device_position+0x318>)
 8000ed4:	5cd3      	ldrb	r3, [r2, r3]
 8000ed6:	224e      	movs	r2, #78	; 0x4e
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	f040 8179 	bne.w	80011d0 <get_device_position+0x320>
			buffer[i+2] == START_GNGGA_MESSAGE_STRING[2] && buffer[i+3] == START_GNGGA_MESSAGE_STRING[3] &&
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	4ab9      	ldr	r2, [pc, #740]	; (80011c8 <get_device_position+0x318>)
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	2247      	movs	r2, #71	; 0x47
		if (buffer[i] == START_GNGGA_MESSAGE_STRING[0] && buffer[i+1] == START_GNGGA_MESSAGE_STRING[1] &&
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	f040 8171 	bne.w	80011d0 <get_device_position+0x320>
			buffer[i+2] == START_GNGGA_MESSAGE_STRING[2] && buffer[i+3] == START_GNGGA_MESSAGE_STRING[3] &&
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	3303      	adds	r3, #3
 8000ef2:	4ab5      	ldr	r2, [pc, #724]	; (80011c8 <get_device_position+0x318>)
 8000ef4:	5cd3      	ldrb	r3, [r2, r3]
 8000ef6:	2247      	movs	r2, #71	; 0x47
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	f040 8169 	bne.w	80011d0 <get_device_position+0x320>
			buffer[i+4] == START_GNGGA_MESSAGE_STRING[4]) {
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	3304      	adds	r3, #4
 8000f02:	4ab1      	ldr	r2, [pc, #708]	; (80011c8 <get_device_position+0x318>)
 8000f04:	5cd3      	ldrb	r3, [r2, r3]
 8000f06:	2241      	movs	r2, #65	; 0x41
			buffer[i+2] == START_GNGGA_MESSAGE_STRING[2] && buffer[i+3] == START_GNGGA_MESSAGE_STRING[3] &&
 8000f08:	4293      	cmp	r3, r2
 8000f0a:	f040 8161 	bne.w	80011d0 <get_device_position+0x320>

			// Parse latitude from the buffer
			last_detected_position.LAT = (buffer[i+17] - '0') * 1000 +
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	3311      	adds	r3, #17
 8000f12:	4aad      	ldr	r2, [pc, #692]	; (80011c8 <get_device_position+0x318>)
 8000f14:	5cd3      	ldrb	r3, [r2, r3]
 8000f16:	3b30      	subs	r3, #48	; 0x30
 8000f18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f1c:	fb03 f202 	mul.w	r2, r3, r2
										 (buffer[i+18] - '0') * 100 +
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	3312      	adds	r3, #18
 8000f24:	49a8      	ldr	r1, [pc, #672]	; (80011c8 <get_device_position+0x318>)
 8000f26:	5ccb      	ldrb	r3, [r1, r3]
 8000f28:	3b30      	subs	r3, #48	; 0x30
 8000f2a:	2164      	movs	r1, #100	; 0x64
 8000f2c:	fb01 f303 	mul.w	r3, r1, r3
			last_detected_position.LAT = (buffer[i+17] - '0') * 1000 +
 8000f30:	18d1      	adds	r1, r2, r3
										 (buffer[i+19] - '0') * 10 +
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3313      	adds	r3, #19
 8000f36:	4aa4      	ldr	r2, [pc, #656]	; (80011c8 <get_device_position+0x318>)
 8000f38:	5cd3      	ldrb	r3, [r2, r3]
 8000f3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8000f3e:	4613      	mov	r3, r2
 8000f40:	009b      	lsls	r3, r3, #2
 8000f42:	4413      	add	r3, r2
 8000f44:	005b      	lsls	r3, r3, #1
										 (buffer[i+18] - '0') * 100 +
 8000f46:	18ca      	adds	r2, r1, r3
										 (buffer[i+20] - '0') +
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	3314      	adds	r3, #20
 8000f4c:	499e      	ldr	r1, [pc, #632]	; (80011c8 <get_device_position+0x318>)
 8000f4e:	5ccb      	ldrb	r3, [r1, r3]
 8000f50:	3b30      	subs	r3, #48	; 0x30
										 (buffer[i+19] - '0') * 10 +
 8000f52:	4413      	add	r3, r2
										 (buffer[i+20] - '0') +
 8000f54:	4618      	mov	r0, r3
 8000f56:	f7ff fa89 	bl	800046c <__aeabi_i2d>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	460d      	mov	r5, r1
										 (float)(buffer[i+22] - '0') * 0.1 +
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	3316      	adds	r3, #22
 8000f62:	4a99      	ldr	r2, [pc, #612]	; (80011c8 <get_device_position+0x318>)
 8000f64:	5cd3      	ldrb	r3, [r2, r3]
 8000f66:	3b30      	subs	r3, #48	; 0x30
 8000f68:	ee07 3a90 	vmov	s15, r3
 8000f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f70:	ee17 0a90 	vmov	r0, s15
 8000f74:	f7ff fa8c 	bl	8000490 <__aeabi_f2d>
 8000f78:	a38b      	add	r3, pc, #556	; (adr r3, 80011a8 <get_device_position+0x2f8>)
 8000f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7e:	f7ff fadf 	bl	8000540 <__aeabi_dmul>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
										 (buffer[i+20] - '0') +
 8000f86:	4620      	mov	r0, r4
 8000f88:	4629      	mov	r1, r5
 8000f8a:	f7ff f923 	bl	80001d4 <__adddf3>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	4614      	mov	r4, r2
 8000f94:	461d      	mov	r5, r3
										 (float)(buffer[i+23] - '0') * 0.01 +
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	3317      	adds	r3, #23
 8000f9a:	4a8b      	ldr	r2, [pc, #556]	; (80011c8 <get_device_position+0x318>)
 8000f9c:	5cd3      	ldrb	r3, [r2, r3]
 8000f9e:	3b30      	subs	r3, #48	; 0x30
 8000fa0:	ee07 3a90 	vmov	s15, r3
 8000fa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fa8:	ee17 0a90 	vmov	r0, s15
 8000fac:	f7ff fa70 	bl	8000490 <__aeabi_f2d>
 8000fb0:	a37f      	add	r3, pc, #508	; (adr r3, 80011b0 <get_device_position+0x300>)
 8000fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb6:	f7ff fac3 	bl	8000540 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
										 (float)(buffer[i+22] - '0') * 0.1 +
 8000fbe:	4620      	mov	r0, r4
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	f7ff f907 	bl	80001d4 <__adddf3>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4614      	mov	r4, r2
 8000fcc:	461d      	mov	r5, r3
										 (float)(buffer[i+24] - '0') * 0.001 +
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	3318      	adds	r3, #24
 8000fd2:	4a7d      	ldr	r2, [pc, #500]	; (80011c8 <get_device_position+0x318>)
 8000fd4:	5cd3      	ldrb	r3, [r2, r3]
 8000fd6:	3b30      	subs	r3, #48	; 0x30
 8000fd8:	ee07 3a90 	vmov	s15, r3
 8000fdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000fe0:	ee17 0a90 	vmov	r0, s15
 8000fe4:	f7ff fa54 	bl	8000490 <__aeabi_f2d>
 8000fe8:	a373      	add	r3, pc, #460	; (adr r3, 80011b8 <get_device_position+0x308>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff faa7 	bl	8000540 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
										 (float)(buffer[i+23] - '0') * 0.01 +
 8000ff6:	4620      	mov	r0, r4
 8000ff8:	4629      	mov	r1, r5
 8000ffa:	f7ff f8eb 	bl	80001d4 <__adddf3>
 8000ffe:	4602      	mov	r2, r0
 8001000:	460b      	mov	r3, r1
 8001002:	4614      	mov	r4, r2
 8001004:	461d      	mov	r5, r3
										 (float)(buffer[i+25] - '0') * 0.0001;
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	3319      	adds	r3, #25
 800100a:	4a6f      	ldr	r2, [pc, #444]	; (80011c8 <get_device_position+0x318>)
 800100c:	5cd3      	ldrb	r3, [r2, r3]
 800100e:	3b30      	subs	r3, #48	; 0x30
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001018:	ee17 0a90 	vmov	r0, s15
 800101c:	f7ff fa38 	bl	8000490 <__aeabi_f2d>
 8001020:	a367      	add	r3, pc, #412	; (adr r3, 80011c0 <get_device_position+0x310>)
 8001022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001026:	f7ff fa8b 	bl	8000540 <__aeabi_dmul>
 800102a:	4602      	mov	r2, r0
 800102c:	460b      	mov	r3, r1
										 (float)(buffer[i+24] - '0') * 0.001 +
 800102e:	4620      	mov	r0, r4
 8001030:	4629      	mov	r1, r5
 8001032:	f7ff f8cf 	bl	80001d4 <__adddf3>
 8001036:	4602      	mov	r2, r0
 8001038:	460b      	mov	r3, r1
 800103a:	4610      	mov	r0, r2
 800103c:	4619      	mov	r1, r3
 800103e:	f7ff fd77 	bl	8000b30 <__aeabi_d2f>
 8001042:	4603      	mov	r3, r0
			last_detected_position.LAT = (buffer[i+17] - '0') * 1000 +
 8001044:	4a61      	ldr	r2, [pc, #388]	; (80011cc <get_device_position+0x31c>)
 8001046:	6013      	str	r3, [r2, #0]

			// Parse longitude from the buffer
			last_detected_position.LON = (buffer[i+29] - '0') * 10000 +
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	331d      	adds	r3, #29
 800104c:	4a5e      	ldr	r2, [pc, #376]	; (80011c8 <get_device_position+0x318>)
 800104e:	5cd3      	ldrb	r3, [r2, r3]
 8001050:	3b30      	subs	r3, #48	; 0x30
 8001052:	f242 7210 	movw	r2, #10000	; 0x2710
 8001056:	fb03 f202 	mul.w	r2, r3, r2
										 (buffer[i+30] - '0') * 1000 +
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	331e      	adds	r3, #30
 800105e:	495a      	ldr	r1, [pc, #360]	; (80011c8 <get_device_position+0x318>)
 8001060:	5ccb      	ldrb	r3, [r1, r3]
 8001062:	3b30      	subs	r3, #48	; 0x30
 8001064:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001068:	fb01 f303 	mul.w	r3, r1, r3
			last_detected_position.LON = (buffer[i+29] - '0') * 10000 +
 800106c:	441a      	add	r2, r3
										 (buffer[i+31] - '0') * 100 +
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	331f      	adds	r3, #31
 8001072:	4955      	ldr	r1, [pc, #340]	; (80011c8 <get_device_position+0x318>)
 8001074:	5ccb      	ldrb	r3, [r1, r3]
 8001076:	3b30      	subs	r3, #48	; 0x30
 8001078:	2164      	movs	r1, #100	; 0x64
 800107a:	fb01 f303 	mul.w	r3, r1, r3
										 (buffer[i+30] - '0') * 1000 +
 800107e:	18d1      	adds	r1, r2, r3
										 (buffer[i+32] - '0') * 10 +
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	3320      	adds	r3, #32
 8001084:	4a50      	ldr	r2, [pc, #320]	; (80011c8 <get_device_position+0x318>)
 8001086:	5cd3      	ldrb	r3, [r2, r3]
 8001088:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800108c:	4613      	mov	r3, r2
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	4413      	add	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
										 (buffer[i+31] - '0') * 100 +
 8001094:	18ca      	adds	r2, r1, r3
										 (buffer[i+33] - '0') +
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	3321      	adds	r3, #33	; 0x21
 800109a:	494b      	ldr	r1, [pc, #300]	; (80011c8 <get_device_position+0x318>)
 800109c:	5ccb      	ldrb	r3, [r1, r3]
 800109e:	3b30      	subs	r3, #48	; 0x30
										 (buffer[i+32] - '0') * 10 +
 80010a0:	4413      	add	r3, r2
										 (buffer[i+33] - '0') +
 80010a2:	4618      	mov	r0, r3
 80010a4:	f7ff f9e2 	bl	800046c <__aeabi_i2d>
 80010a8:	4604      	mov	r4, r0
 80010aa:	460d      	mov	r5, r1
										 (float)(buffer[i+35] - '0') * 0.1 +
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3323      	adds	r3, #35	; 0x23
 80010b0:	4a45      	ldr	r2, [pc, #276]	; (80011c8 <get_device_position+0x318>)
 80010b2:	5cd3      	ldrb	r3, [r2, r3]
 80010b4:	3b30      	subs	r3, #48	; 0x30
 80010b6:	ee07 3a90 	vmov	s15, r3
 80010ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010be:	ee17 0a90 	vmov	r0, s15
 80010c2:	f7ff f9e5 	bl	8000490 <__aeabi_f2d>
 80010c6:	a338      	add	r3, pc, #224	; (adr r3, 80011a8 <get_device_position+0x2f8>)
 80010c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010cc:	f7ff fa38 	bl	8000540 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
										 (buffer[i+33] - '0') +
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff f87c 	bl	80001d4 <__adddf3>
 80010dc:	4602      	mov	r2, r0
 80010de:	460b      	mov	r3, r1
 80010e0:	4614      	mov	r4, r2
 80010e2:	461d      	mov	r5, r3
										 (float)(buffer[i+36] - '0') * 0.01 +
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	3324      	adds	r3, #36	; 0x24
 80010e8:	4a37      	ldr	r2, [pc, #220]	; (80011c8 <get_device_position+0x318>)
 80010ea:	5cd3      	ldrb	r3, [r2, r3]
 80010ec:	3b30      	subs	r3, #48	; 0x30
 80010ee:	ee07 3a90 	vmov	s15, r3
 80010f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f6:	ee17 0a90 	vmov	r0, s15
 80010fa:	f7ff f9c9 	bl	8000490 <__aeabi_f2d>
 80010fe:	a32c      	add	r3, pc, #176	; (adr r3, 80011b0 <get_device_position+0x300>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fa1c 	bl	8000540 <__aeabi_dmul>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
										 (float)(buffer[i+35] - '0') * 0.1 +
 800110c:	4620      	mov	r0, r4
 800110e:	4629      	mov	r1, r5
 8001110:	f7ff f860 	bl	80001d4 <__adddf3>
 8001114:	4602      	mov	r2, r0
 8001116:	460b      	mov	r3, r1
 8001118:	4614      	mov	r4, r2
 800111a:	461d      	mov	r5, r3
										 (float)(buffer[i+37] - '0') * 0.001 +
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	3325      	adds	r3, #37	; 0x25
 8001120:	4a29      	ldr	r2, [pc, #164]	; (80011c8 <get_device_position+0x318>)
 8001122:	5cd3      	ldrb	r3, [r2, r3]
 8001124:	3b30      	subs	r3, #48	; 0x30
 8001126:	ee07 3a90 	vmov	s15, r3
 800112a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112e:	ee17 0a90 	vmov	r0, s15
 8001132:	f7ff f9ad 	bl	8000490 <__aeabi_f2d>
 8001136:	a320      	add	r3, pc, #128	; (adr r3, 80011b8 <get_device_position+0x308>)
 8001138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113c:	f7ff fa00 	bl	8000540 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
										 (float)(buffer[i+36] - '0') * 0.01 +
 8001144:	4620      	mov	r0, r4
 8001146:	4629      	mov	r1, r5
 8001148:	f7ff f844 	bl	80001d4 <__adddf3>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4614      	mov	r4, r2
 8001152:	461d      	mov	r5, r3
										 (float)(buffer[i+38] - '0') * 0.0001;
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	3326      	adds	r3, #38	; 0x26
 8001158:	4a1b      	ldr	r2, [pc, #108]	; (80011c8 <get_device_position+0x318>)
 800115a:	5cd3      	ldrb	r3, [r2, r3]
 800115c:	3b30      	subs	r3, #48	; 0x30
 800115e:	ee07 3a90 	vmov	s15, r3
 8001162:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001166:	ee17 0a90 	vmov	r0, s15
 800116a:	f7ff f991 	bl	8000490 <__aeabi_f2d>
 800116e:	a314      	add	r3, pc, #80	; (adr r3, 80011c0 <get_device_position+0x310>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff f9e4 	bl	8000540 <__aeabi_dmul>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
										 (float)(buffer[i+37] - '0') * 0.001 +
 800117c:	4620      	mov	r0, r4
 800117e:	4629      	mov	r1, r5
 8001180:	f7ff f828 	bl	80001d4 <__adddf3>
 8001184:	4602      	mov	r2, r0
 8001186:	460b      	mov	r3, r1
 8001188:	4610      	mov	r0, r2
 800118a:	4619      	mov	r1, r3
 800118c:	f7ff fcd0 	bl	8000b30 <__aeabi_d2f>
 8001190:	4603      	mov	r3, r0
			last_detected_position.LON = (buffer[i+29] - '0') * 10000 +
 8001192:	4a0e      	ldr	r2, [pc, #56]	; (80011cc <get_device_position+0x31c>)
 8001194:	6093      	str	r3, [r2, #8]

			// Parse fix quality from the buffer
			last_detected_position.fix = buffer[i+42] - '0';
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	332a      	adds	r3, #42	; 0x2a
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <get_device_position+0x318>)
 800119c:	5cd3      	ldrb	r3, [r2, r3]
 800119e:	3b30      	subs	r3, #48	; 0x30
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <get_device_position+0x31c>)
 80011a4:	735a      	strb	r2, [r3, #13]

			// Assuming other position members need to be set as well

			// Break out of the loop after finding the GNGGA message
			break;
 80011a6:	e01b      	b.n	80011e0 <get_device_position+0x330>
 80011a8:	9999999a 	.word	0x9999999a
 80011ac:	3fb99999 	.word	0x3fb99999
 80011b0:	47ae147b 	.word	0x47ae147b
 80011b4:	3f847ae1 	.word	0x3f847ae1
 80011b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80011bc:	3f50624d 	.word	0x3f50624d
 80011c0:	eb1c432d 	.word	0xeb1c432d
 80011c4:	3f1a36e2 	.word	0x3f1a36e2
 80011c8:	20000094 	.word	0x20000094
 80011cc:	20000084 	.word	0x20000084
	for (int i = 0; i < 512 - 5; ++i) {  // Ensure buffer has at least 512 elements
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3301      	adds	r3, #1
 80011d4:	60fb      	str	r3, [r7, #12]
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f5b3 7ffd 	cmp.w	r3, #506	; 0x1fa
 80011dc:	f77f ae6f 	ble.w	8000ebe <get_device_position+0xe>
		}
	}


    return last_detected_position;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	4a05      	ldr	r2, [pc, #20]	; (80011f8 <get_device_position+0x348>)
 80011e4:	461c      	mov	r4, r3
 80011e6:	4613      	mov	r3, r2
 80011e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	3710      	adds	r7, #16
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bdb0      	pop	{r4, r5, r7, pc}
 80011f6:	bf00      	nop
 80011f8:	20000084 	.word	0x20000084

080011fc <parse_uart_character>:

void parse_uart_character(uint8_t character)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
	if(started == 0 && character == '$')
 8001206:	4b15      	ldr	r3, [pc, #84]	; (800125c <parse_uart_character+0x60>)
 8001208:	781b      	ldrb	r3, [r3, #0]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d106      	bne.n	800121c <parse_uart_character+0x20>
 800120e:	79fb      	ldrb	r3, [r7, #7]
 8001210:	2b24      	cmp	r3, #36	; 0x24
 8001212:	d103      	bne.n	800121c <parse_uart_character+0x20>
	{
		started = 1;
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <parse_uart_character+0x60>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	e018      	b.n	800124e <parse_uart_character+0x52>
	}
	else if(started == 1 && character == '$')
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <parse_uart_character+0x60>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d109      	bne.n	8001238 <parse_uart_character+0x3c>
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	2b24      	cmp	r3, #36	; 0x24
 8001228:	d106      	bne.n	8001238 <parse_uart_character+0x3c>
	{
		started = 0;
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <parse_uart_character+0x60>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
		write_index = 0;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <parse_uart_character+0x64>)
 8001232:	2200      	movs	r2, #0
 8001234:	701a      	strb	r2, [r3, #0]
 8001236:	e00a      	b.n	800124e <parse_uart_character+0x52>
	}
	else
	{
		buffer[write_index++] = character;
 8001238:	4b09      	ldr	r3, [pc, #36]	; (8001260 <parse_uart_character+0x64>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	b2d1      	uxtb	r1, r2
 8001240:	4a07      	ldr	r2, [pc, #28]	; (8001260 <parse_uart_character+0x64>)
 8001242:	7011      	strb	r1, [r2, #0]
 8001244:	4619      	mov	r1, r3
 8001246:	4a07      	ldr	r2, [pc, #28]	; (8001264 <parse_uart_character+0x68>)
 8001248:	79fb      	ldrb	r3, [r7, #7]
 800124a:	5453      	strb	r3, [r2, r1]
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop
 800125c:	20000294 	.word	0x20000294
 8001260:	20000295 	.word	0x20000295
 8001264:	20000094 	.word	0x20000094

08001268 <set_RGB_led>:
#include "RGB_led.h"

void set_RGB_led(uint8_t R, uint8_t G, uint8_t B)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
 8001272:	460b      	mov	r3, r1
 8001274:	71bb      	strb	r3, [r7, #6]
 8001276:	4613      	mov	r3, r2
 8001278:	717b      	strb	r3, [r7, #5]
	GPIO_set_pin_with_mask(RGB_R_PIN, R, 'a');
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2261      	movs	r2, #97	; 0x61
 800127e:	4619      	mov	r1, r3
 8001280:	2001      	movs	r0, #1
 8001282:	f000 fbe9 	bl	8001a58 <GPIO_set_pin_with_mask>
	GPIO_set_pin_with_mask(RGB_G_PIN, G, 'a');
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	2261      	movs	r2, #97	; 0x61
 800128a:	4619      	mov	r1, r3
 800128c:	2002      	movs	r0, #2
 800128e:	f000 fbe3 	bl	8001a58 <GPIO_set_pin_with_mask>
	GPIO_set_pin_with_mask(RGB_B_PIN, B, 'a');
 8001292:	797b      	ldrb	r3, [r7, #5]
 8001294:	2261      	movs	r2, #97	; 0x61
 8001296:	4619      	mov	r1, r3
 8001298:	2010      	movs	r0, #16
 800129a:	f000 fbdd 	bl	8001a58 <GPIO_set_pin_with_mask>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
	...

080012a8 <readButton>:
uint8_t result = BUTTON_STATE_INACTIVE;
uint8_t long_pressed = 0;
uint16_t active_samples = 0;

uint8_t readButton()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	result = BUTTON_STATE_INACTIVE;
 80012ac:	4b32      	ldr	r3, [pc, #200]	; (8001378 <readButton+0xd0>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	701a      	strb	r2, [r3, #0]
	pin_state = GPIO_is_pin_set(PIN_BUTTON, PIN_BUTTON_MASK);
 80012b2:	2162      	movs	r1, #98	; 0x62
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 fba1 	bl	80019fc <GPIO_is_pin_set>
 80012ba:	4603      	mov	r3, r0
 80012bc:	461a      	mov	r2, r3
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <readButton+0xd4>)
 80012c0:	701a      	strb	r2, [r3, #0]

	if(!long_pressed && !pin_state && !pin_state_prev && !pin_state_prev_prev)
 80012c2:	4b2f      	ldr	r3, [pc, #188]	; (8001380 <readButton+0xd8>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d111      	bne.n	80012ee <readButton+0x46>
 80012ca:	4b2c      	ldr	r3, [pc, #176]	; (800137c <readButton+0xd4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10d      	bne.n	80012ee <readButton+0x46>
 80012d2:	4b2c      	ldr	r3, [pc, #176]	; (8001384 <readButton+0xdc>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d109      	bne.n	80012ee <readButton+0x46>
 80012da:	4b2b      	ldr	r3, [pc, #172]	; (8001388 <readButton+0xe0>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d105      	bne.n	80012ee <readButton+0x46>
	{
		active_samples++;
 80012e2:	4b2a      	ldr	r3, [pc, #168]	; (800138c <readButton+0xe4>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	b29a      	uxth	r2, r3
 80012ea:	4b28      	ldr	r3, [pc, #160]	; (800138c <readButton+0xe4>)
 80012ec:	801a      	strh	r2, [r3, #0]
	}

	if(long_pressed && pin_state && pin_state_prev && pin_state_prev_prev)
 80012ee:	4b24      	ldr	r3, [pc, #144]	; (8001380 <readButton+0xd8>)
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d00e      	beq.n	8001314 <readButton+0x6c>
 80012f6:	4b21      	ldr	r3, [pc, #132]	; (800137c <readButton+0xd4>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d00a      	beq.n	8001314 <readButton+0x6c>
 80012fe:	4b21      	ldr	r3, [pc, #132]	; (8001384 <readButton+0xdc>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d006      	beq.n	8001314 <readButton+0x6c>
 8001306:	4b20      	ldr	r3, [pc, #128]	; (8001388 <readButton+0xe0>)
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d002      	beq.n	8001314 <readButton+0x6c>
	{
		long_pressed = 0;
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <readButton+0xd8>)
 8001310:	2200      	movs	r2, #0
 8001312:	701a      	strb	r2, [r3, #0]
	}

	if(active_samples > LONG_PRESS_SAMPLES)
 8001314:	4b1d      	ldr	r3, [pc, #116]	; (800138c <readButton+0xe4>)
 8001316:	881b      	ldrh	r3, [r3, #0]
 8001318:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800131c:	d909      	bls.n	8001332 <readButton+0x8a>
	{
		result = BUTTON_STATE_LONG_PRESS;
 800131e:	4b16      	ldr	r3, [pc, #88]	; (8001378 <readButton+0xd0>)
 8001320:	2202      	movs	r2, #2
 8001322:	701a      	strb	r2, [r3, #0]
		active_samples = 0;
 8001324:	4b19      	ldr	r3, [pc, #100]	; (800138c <readButton+0xe4>)
 8001326:	2200      	movs	r2, #0
 8001328:	801a      	strh	r2, [r3, #0]
		long_pressed = 1;
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <readButton+0xd8>)
 800132c:	2201      	movs	r2, #1
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e015      	b.n	800135e <readButton+0xb6>
	}
	else if(active_samples > SHORT_PRESS_SAMPLES)
 8001332:	4b16      	ldr	r3, [pc, #88]	; (800138c <readButton+0xe4>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	2b01      	cmp	r3, #1
 8001338:	d911      	bls.n	800135e <readButton+0xb6>
	{
		if(pin_state && pin_state_prev && pin_state_prev_prev)
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <readButton+0xd4>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d00d      	beq.n	800135e <readButton+0xb6>
 8001342:	4b10      	ldr	r3, [pc, #64]	; (8001384 <readButton+0xdc>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d009      	beq.n	800135e <readButton+0xb6>
 800134a:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <readButton+0xe0>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <readButton+0xb6>
		{
			result = BUTTON_STATE_PRESS;
 8001352:	4b09      	ldr	r3, [pc, #36]	; (8001378 <readButton+0xd0>)
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
			active_samples = 0;
 8001358:	4b0c      	ldr	r3, [pc, #48]	; (800138c <readButton+0xe4>)
 800135a:	2200      	movs	r2, #0
 800135c:	801a      	strh	r2, [r3, #0]
		}
	}

	pin_state_prev_prev = pin_state_prev;
 800135e:	4b09      	ldr	r3, [pc, #36]	; (8001384 <readButton+0xdc>)
 8001360:	781a      	ldrb	r2, [r3, #0]
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <readButton+0xe0>)
 8001364:	701a      	strb	r2, [r3, #0]
	pin_state_prev = pin_state;
 8001366:	4b05      	ldr	r3, [pc, #20]	; (800137c <readButton+0xd4>)
 8001368:	781a      	ldrb	r2, [r3, #0]
 800136a:	4b06      	ldr	r3, [pc, #24]	; (8001384 <readButton+0xdc>)
 800136c:	701a      	strb	r2, [r3, #0]
	return result;
 800136e:	4b02      	ldr	r3, [pc, #8]	; (8001378 <readButton+0xd0>)
 8001370:	781b      	ldrb	r3, [r3, #0]
 8001372:	4618      	mov	r0, r3
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	20000299 	.word	0x20000299
 800137c:	20000296 	.word	0x20000296
 8001380:	2000029a 	.word	0x2000029a
 8001384:	20000297 	.word	0x20000297
 8001388:	20000298 	.word	0x20000298
 800138c:	2000029c 	.word	0x2000029c

08001390 <extractDigits>:
#include "display_7seg.h"

uint8_t digit = 0;
uint8_t thousands, hundreds, tens, ones;

void extractDigits(uint16_t number) {
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
    ones = number % 10;
 800139a:	88fa      	ldrh	r2, [r7, #6]
 800139c:	4b25      	ldr	r3, [pc, #148]	; (8001434 <extractDigits+0xa4>)
 800139e:	fba3 1302 	umull	r1, r3, r3, r2
 80013a2:	08d9      	lsrs	r1, r3, #3
 80013a4:	460b      	mov	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	440b      	add	r3, r1
 80013aa:	005b      	lsls	r3, r3, #1
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	b29b      	uxth	r3, r3
 80013b0:	b2da      	uxtb	r2, r3
 80013b2:	4b21      	ldr	r3, [pc, #132]	; (8001438 <extractDigits+0xa8>)
 80013b4:	701a      	strb	r2, [r3, #0]
    tens = (number / 10) % 10;
 80013b6:	88fb      	ldrh	r3, [r7, #6]
 80013b8:	4a1e      	ldr	r2, [pc, #120]	; (8001434 <extractDigits+0xa4>)
 80013ba:	fba2 2303 	umull	r2, r3, r2, r3
 80013be:	08db      	lsrs	r3, r3, #3
 80013c0:	b29a      	uxth	r2, r3
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <extractDigits+0xa4>)
 80013c4:	fba3 1302 	umull	r1, r3, r3, r2
 80013c8:	08d9      	lsrs	r1, r3, #3
 80013ca:	460b      	mov	r3, r1
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	1ad3      	subs	r3, r2, r3
 80013d4:	b29b      	uxth	r3, r3
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <extractDigits+0xac>)
 80013da:	701a      	strb	r2, [r3, #0]
    hundreds = (number / 100) % 10;
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	4a18      	ldr	r2, [pc, #96]	; (8001440 <extractDigits+0xb0>)
 80013e0:	fba2 2303 	umull	r2, r3, r2, r3
 80013e4:	095b      	lsrs	r3, r3, #5
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <extractDigits+0xa4>)
 80013ea:	fba3 1302 	umull	r1, r3, r3, r2
 80013ee:	08d9      	lsrs	r1, r3, #3
 80013f0:	460b      	mov	r3, r1
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	440b      	add	r3, r1
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <extractDigits+0xb4>)
 8001400:	701a      	strb	r2, [r3, #0]
    thousands = (number / 1000) % 10;
 8001402:	88fb      	ldrh	r3, [r7, #6]
 8001404:	4a10      	ldr	r2, [pc, #64]	; (8001448 <extractDigits+0xb8>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	099b      	lsrs	r3, r3, #6
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b09      	ldr	r3, [pc, #36]	; (8001434 <extractDigits+0xa4>)
 8001410:	fba3 1302 	umull	r1, r3, r3, r2
 8001414:	08d9      	lsrs	r1, r3, #3
 8001416:	460b      	mov	r3, r1
 8001418:	009b      	lsls	r3, r3, #2
 800141a:	440b      	add	r3, r1
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	b29b      	uxth	r3, r3
 8001422:	b2da      	uxtb	r2, r3
 8001424:	4b09      	ldr	r3, [pc, #36]	; (800144c <extractDigits+0xbc>)
 8001426:	701a      	strb	r2, [r3, #0]
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr
 8001434:	cccccccd 	.word	0xcccccccd
 8001438:	200002a2 	.word	0x200002a2
 800143c:	200002a1 	.word	0x200002a1
 8001440:	51eb851f 	.word	0x51eb851f
 8001444:	200002a0 	.word	0x200002a0
 8001448:	10624dd3 	.word	0x10624dd3
 800144c:	2000029f 	.word	0x2000029f

08001450 <setDigit>:

void setDigit()
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	if(digit == 0)
 8001454:	4b38      	ldr	r3, [pc, #224]	; (8001538 <setDigit+0xe8>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d117      	bne.n	800148c <setDigit+0x3c>
	{
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1,1,PIN_ENABLE_DIGIT_1_MASK);
 800145c:	2262      	movs	r2, #98	; 0x62
 800145e:	2101      	movs	r1, #1
 8001460:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001464:	f000 faf8 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_10,0,PIN_ENABLE_DIGIT_10_MASK);
 8001468:	2262      	movs	r2, #98	; 0x62
 800146a:	2100      	movs	r1, #0
 800146c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001470:	f000 faf2 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_100,0,PIN_ENABLE_DIGIT_100_MASK);
 8001474:	2261      	movs	r2, #97	; 0x61
 8001476:	2100      	movs	r1, #0
 8001478:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800147c:	f000 faec 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1000,0,PIN_ENABLE_DIGIT_1000_MASK);
 8001480:	2262      	movs	r2, #98	; 0x62
 8001482:	2100      	movs	r1, #0
 8001484:	2008      	movs	r0, #8
 8001486:	f000 fae7 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1,0,PIN_ENABLE_DIGIT_1_MASK);
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_10,0,PIN_ENABLE_DIGIT_10_MASK);
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_100,0,PIN_ENABLE_DIGIT_100_MASK);
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1000,1,PIN_ENABLE_DIGIT_1000_MASK);
	}
}
 800148a:	e052      	b.n	8001532 <setDigit+0xe2>
	else if(digit == 1)
 800148c:	4b2a      	ldr	r3, [pc, #168]	; (8001538 <setDigit+0xe8>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b01      	cmp	r3, #1
 8001492:	d117      	bne.n	80014c4 <setDigit+0x74>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1,0,PIN_ENABLE_DIGIT_1_MASK);
 8001494:	2262      	movs	r2, #98	; 0x62
 8001496:	2100      	movs	r1, #0
 8001498:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800149c:	f000 fadc 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_10,1,PIN_ENABLE_DIGIT_10_MASK);
 80014a0:	2262      	movs	r2, #98	; 0x62
 80014a2:	2101      	movs	r1, #1
 80014a4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014a8:	f000 fad6 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_100,0,PIN_ENABLE_DIGIT_100_MASK);
 80014ac:	2261      	movs	r2, #97	; 0x61
 80014ae:	2100      	movs	r1, #0
 80014b0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014b4:	f000 fad0 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1000,0,PIN_ENABLE_DIGIT_1000_MASK);
 80014b8:	2262      	movs	r2, #98	; 0x62
 80014ba:	2100      	movs	r1, #0
 80014bc:	2008      	movs	r0, #8
 80014be:	f000 facb 	bl	8001a58 <GPIO_set_pin_with_mask>
}
 80014c2:	e036      	b.n	8001532 <setDigit+0xe2>
	else if(digit == 2)
 80014c4:	4b1c      	ldr	r3, [pc, #112]	; (8001538 <setDigit+0xe8>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d117      	bne.n	80014fc <setDigit+0xac>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1,0,PIN_ENABLE_DIGIT_1_MASK);
 80014cc:	2262      	movs	r2, #98	; 0x62
 80014ce:	2100      	movs	r1, #0
 80014d0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80014d4:	f000 fac0 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_10,0,PIN_ENABLE_DIGIT_10_MASK);
 80014d8:	2262      	movs	r2, #98	; 0x62
 80014da:	2100      	movs	r1, #0
 80014dc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80014e0:	f000 faba 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_100,1,PIN_ENABLE_DIGIT_100_MASK);
 80014e4:	2261      	movs	r2, #97	; 0x61
 80014e6:	2101      	movs	r1, #1
 80014e8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80014ec:	f000 fab4 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1000,0,PIN_ENABLE_DIGIT_1000_MASK);
 80014f0:	2262      	movs	r2, #98	; 0x62
 80014f2:	2100      	movs	r1, #0
 80014f4:	2008      	movs	r0, #8
 80014f6:	f000 faaf 	bl	8001a58 <GPIO_set_pin_with_mask>
}
 80014fa:	e01a      	b.n	8001532 <setDigit+0xe2>
	else if(digit == 3)
 80014fc:	4b0e      	ldr	r3, [pc, #56]	; (8001538 <setDigit+0xe8>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	2b03      	cmp	r3, #3
 8001502:	d116      	bne.n	8001532 <setDigit+0xe2>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1,0,PIN_ENABLE_DIGIT_1_MASK);
 8001504:	2262      	movs	r2, #98	; 0x62
 8001506:	2100      	movs	r1, #0
 8001508:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800150c:	f000 faa4 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_10,0,PIN_ENABLE_DIGIT_10_MASK);
 8001510:	2262      	movs	r2, #98	; 0x62
 8001512:	2100      	movs	r1, #0
 8001514:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001518:	f000 fa9e 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_100,0,PIN_ENABLE_DIGIT_100_MASK);
 800151c:	2261      	movs	r2, #97	; 0x61
 800151e:	2100      	movs	r1, #0
 8001520:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001524:	f000 fa98 	bl	8001a58 <GPIO_set_pin_with_mask>
		GPIO_set_pin_with_mask(PIN_ENABLE_DIGIT_1000,1,PIN_ENABLE_DIGIT_1000_MASK);
 8001528:	2262      	movs	r2, #98	; 0x62
 800152a:	2101      	movs	r1, #1
 800152c:	2008      	movs	r0, #8
 800152e:	f000 fa93 	bl	8001a58 <GPIO_set_pin_with_mask>
}
 8001532:	bf00      	nop
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	2000029e 	.word	0x2000029e

0800153c <writeNumber>:

void writeNumber(uint8_t digitValue)
{
 800153c:	b5b0      	push	{r4, r5, r7, lr}
 800153e:	b088      	sub	sp, #32
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	71fb      	strb	r3, [r7, #7]
	// Define segment patterns for each digit with active-low logic
	const uint16_t segmentPatterns[] = {
 8001546:	4b42      	ldr	r3, [pc, #264]	; (8001650 <writeNumber+0x114>)
 8001548:	f107 0408 	add.w	r4, r7, #8
 800154c:	461d      	mov	r5, r3
 800154e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001550:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001552:	682b      	ldr	r3, [r5, #0]
 8001554:	6023      	str	r3, [r4, #0]
		0x0007, // 7
		0x007F, // 8
		0x006F  // 9
	};

	uint16_t pattern = 0; // Default pattern for unsupported digits
 8001556:	2300      	movs	r3, #0
 8001558:	83fb      	strh	r3, [r7, #30]

	// Check if digitValue is within the valid range (0 to 9)
	if (digitValue >= 0 && digitValue <= 9)
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b09      	cmp	r3, #9
 800155e:	d806      	bhi.n	800156e <writeNumber+0x32>
	{
		pattern = segmentPatterns[digitValue];
 8001560:	79fb      	ldrb	r3, [r7, #7]
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	3320      	adds	r3, #32
 8001566:	443b      	add	r3, r7
 8001568:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800156c:	83fb      	strh	r3, [r7, #30]
	}

	// Set segment pins based on the inverted pattern
	GPIO_set_pin_with_mask(PIN_SEGMENT_A, !(pattern & (1 << 0)), PIN_SEGMENT_A_MASK);
 800156e:	8bfb      	ldrh	r3, [r7, #30]
 8001570:	f003 0301 	and.w	r3, r3, #1
 8001574:	2b00      	cmp	r3, #0
 8001576:	bf0c      	ite	eq
 8001578:	2301      	moveq	r3, #1
 800157a:	2300      	movne	r3, #0
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2262      	movs	r2, #98	; 0x62
 8001580:	4619      	mov	r1, r3
 8001582:	2020      	movs	r0, #32
 8001584:	f000 fa68 	bl	8001a58 <GPIO_set_pin_with_mask>
	GPIO_set_pin_with_mask(PIN_SEGMENT_B, !(pattern & (1 << 1)), PIN_SEGMENT_B_MASK);
 8001588:	8bfb      	ldrh	r3, [r7, #30]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	bf0c      	ite	eq
 8001592:	2301      	moveq	r3, #1
 8001594:	2300      	movne	r3, #0
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2262      	movs	r2, #98	; 0x62
 800159a:	4619      	mov	r1, r3
 800159c:	2010      	movs	r0, #16
 800159e:	f000 fa5b 	bl	8001a58 <GPIO_set_pin_with_mask>
	GPIO_set_pin_with_mask(PIN_SEGMENT_C, !(pattern & (1 << 2)), PIN_SEGMENT_C_MASK);
 80015a2:	8bfb      	ldrh	r3, [r7, #30]
 80015a4:	f003 0304 	and.w	r3, r3, #4
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	bf0c      	ite	eq
 80015ac:	2301      	moveq	r3, #1
 80015ae:	2300      	movne	r3, #0
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	2262      	movs	r2, #98	; 0x62
 80015b4:	4619      	mov	r1, r3
 80015b6:	2040      	movs	r0, #64	; 0x40
 80015b8:	f000 fa4e 	bl	8001a58 <GPIO_set_pin_with_mask>
	GPIO_set_pin_with_mask(PIN_SEGMENT_D, !(pattern & (1 << 3)), PIN_SEGMENT_D_MASK);
 80015bc:	8bfb      	ldrh	r3, [r7, #30]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	bf0c      	ite	eq
 80015c6:	2301      	moveq	r3, #1
 80015c8:	2300      	movne	r3, #0
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	2261      	movs	r2, #97	; 0x61
 80015ce:	4619      	mov	r1, r3
 80015d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80015d4:	f000 fa40 	bl	8001a58 <GPIO_set_pin_with_mask>
	GPIO_set_pin_with_mask(PIN_SEGMENT_E, !(pattern & (1 << 4)), PIN_SEGMENT_E_MASK);
 80015d8:	8bfb      	ldrh	r3, [r7, #30]
 80015da:	f003 0310 	and.w	r3, r3, #16
 80015de:	2b00      	cmp	r3, #0
 80015e0:	bf0c      	ite	eq
 80015e2:	2301      	moveq	r3, #1
 80015e4:	2300      	movne	r3, #0
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2261      	movs	r2, #97	; 0x61
 80015ea:	4619      	mov	r1, r3
 80015ec:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015f0:	f000 fa32 	bl	8001a58 <GPIO_set_pin_with_mask>
	GPIO_set_pin_with_mask(PIN_SEGMENT_F, !(pattern & (1 << 5)), PIN_SEGMENT_F_MASK);
 80015f4:	8bfb      	ldrh	r3, [r7, #30]
 80015f6:	f003 0320 	and.w	r3, r3, #32
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bf0c      	ite	eq
 80015fe:	2301      	moveq	r3, #1
 8001600:	2300      	movne	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	2263      	movs	r2, #99	; 0x63
 8001606:	4619      	mov	r1, r3
 8001608:	2080      	movs	r0, #128	; 0x80
 800160a:	f000 fa25 	bl	8001a58 <GPIO_set_pin_with_mask>
	GPIO_set_pin_with_mask(PIN_SEGMENT_G, !(pattern & (1 << 6)), PIN_SEGMENT_G_MASK);
 800160e:	8bfb      	ldrh	r3, [r7, #30]
 8001610:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001614:	2b00      	cmp	r3, #0
 8001616:	bf0c      	ite	eq
 8001618:	2301      	moveq	r3, #1
 800161a:	2300      	movne	r3, #0
 800161c:	b2db      	uxtb	r3, r3
 800161e:	2262      	movs	r2, #98	; 0x62
 8001620:	4619      	mov	r1, r3
 8001622:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001626:	f000 fa17 	bl	8001a58 <GPIO_set_pin_with_mask>
	GPIO_set_pin_with_mask(PIN_SEGMENT_DOT, !(pattern & (1 << 7)), PIN_SEGMENT_DOT_MASK);
 800162a:	8bfb      	ldrh	r3, [r7, #30]
 800162c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001630:	2b00      	cmp	r3, #0
 8001632:	bf0c      	ite	eq
 8001634:	2301      	moveq	r3, #1
 8001636:	2300      	movne	r3, #0
 8001638:	b2db      	uxtb	r3, r3
 800163a:	2262      	movs	r2, #98	; 0x62
 800163c:	4619      	mov	r1, r3
 800163e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001642:	f000 fa09 	bl	8001a58 <GPIO_set_pin_with_mask>

}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bdb0      	pop	{r4, r5, r7, pc}
 800164e:	bf00      	nop
 8001650:	08005088 	.word	0x08005088

08001654 <writeDigit>:



void writeDigit()
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	if(digit == 0)
 8001658:	4b14      	ldr	r3, [pc, #80]	; (80016ac <writeDigit+0x58>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d105      	bne.n	800166c <writeDigit+0x18>
	{
		writeNumber(hundreds);
 8001660:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <writeDigit+0x5c>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	4618      	mov	r0, r3
 8001666:	f7ff ff69 	bl	800153c <writeNumber>
	}
	else if(digit == 3)
	{
		writeNumber(thousands);
	}
}
 800166a:	e01c      	b.n	80016a6 <writeDigit+0x52>
	else if(digit == 1)
 800166c:	4b0f      	ldr	r3, [pc, #60]	; (80016ac <writeDigit+0x58>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	2b01      	cmp	r3, #1
 8001672:	d105      	bne.n	8001680 <writeDigit+0x2c>
		writeNumber(ones);
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <writeDigit+0x60>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <writeNumber>
}
 800167e:	e012      	b.n	80016a6 <writeDigit+0x52>
	else if(digit == 2)
 8001680:	4b0a      	ldr	r3, [pc, #40]	; (80016ac <writeDigit+0x58>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b02      	cmp	r3, #2
 8001686:	d105      	bne.n	8001694 <writeDigit+0x40>
		writeNumber(tens);
 8001688:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <writeDigit+0x64>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff55 	bl	800153c <writeNumber>
}
 8001692:	e008      	b.n	80016a6 <writeDigit+0x52>
	else if(digit == 3)
 8001694:	4b05      	ldr	r3, [pc, #20]	; (80016ac <writeDigit+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	2b03      	cmp	r3, #3
 800169a:	d104      	bne.n	80016a6 <writeDigit+0x52>
		writeNumber(thousands);
 800169c:	4b07      	ldr	r3, [pc, #28]	; (80016bc <writeDigit+0x68>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff ff4b 	bl	800153c <writeNumber>
}
 80016a6:	bf00      	nop
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	2000029e 	.word	0x2000029e
 80016b0:	200002a0 	.word	0x200002a0
 80016b4:	200002a2 	.word	0x200002a2
 80016b8:	200002a1 	.word	0x200002a1
 80016bc:	2000029f 	.word	0x2000029f

080016c0 <handle_display>:

void handle_display(uint16_t number)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	80fb      	strh	r3, [r7, #6]
	setDigit();
 80016ca:	f7ff fec1 	bl	8001450 <setDigit>

	extractDigits(number);
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7ff fe5d 	bl	8001390 <extractDigits>

	writeDigit();
 80016d6:	f7ff ffbd 	bl	8001654 <writeDigit>

	digit++;
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <handle_display+0x3c>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	3301      	adds	r3, #1
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b06      	ldr	r3, [pc, #24]	; (80016fc <handle_display+0x3c>)
 80016e4:	701a      	strb	r2, [r3, #0]
	if(digit > 3)
 80016e6:	4b05      	ldr	r3, [pc, #20]	; (80016fc <handle_display+0x3c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b03      	cmp	r3, #3
 80016ec:	d902      	bls.n	80016f4 <handle_display+0x34>
		digit = 0;
 80016ee:	4b03      	ldr	r3, [pc, #12]	; (80016fc <handle_display+0x3c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	701a      	strb	r2, [r3, #0]
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	2000029e 	.word	0x2000029e

08001700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001700:	b480      	push	{r7}
 8001702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001704:	4b04      	ldr	r3, [pc, #16]	; (8001718 <__NVIC_GetPriorityGrouping+0x18>)
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	0a1b      	lsrs	r3, r3, #8
 800170a:	f003 0307 	and.w	r3, r3, #7
}
 800170e:	4618      	mov	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	4603      	mov	r3, r0
 8001724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	2b00      	cmp	r3, #0
 800172c:	db0b      	blt.n	8001746 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	f003 021f 	and.w	r2, r3, #31
 8001734:	4907      	ldr	r1, [pc, #28]	; (8001754 <__NVIC_EnableIRQ+0x38>)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	095b      	lsrs	r3, r3, #5
 800173c:	2001      	movs	r0, #1
 800173e:	fa00 f202 	lsl.w	r2, r0, r2
 8001742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001746:	bf00      	nop
 8001748:	370c      	adds	r7, #12
 800174a:	46bd      	mov	sp, r7
 800174c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001750:	4770      	bx	lr
 8001752:	bf00      	nop
 8001754:	e000e100 	.word	0xe000e100

08001758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	6039      	str	r1, [r7, #0]
 8001762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001768:	2b00      	cmp	r3, #0
 800176a:	db0a      	blt.n	8001782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	b2da      	uxtb	r2, r3
 8001770:	490c      	ldr	r1, [pc, #48]	; (80017a4 <__NVIC_SetPriority+0x4c>)
 8001772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001776:	0112      	lsls	r2, r2, #4
 8001778:	b2d2      	uxtb	r2, r2
 800177a:	440b      	add	r3, r1
 800177c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001780:	e00a      	b.n	8001798 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	b2da      	uxtb	r2, r3
 8001786:	4908      	ldr	r1, [pc, #32]	; (80017a8 <__NVIC_SetPriority+0x50>)
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	f003 030f 	and.w	r3, r3, #15
 800178e:	3b04      	subs	r3, #4
 8001790:	0112      	lsls	r2, r2, #4
 8001792:	b2d2      	uxtb	r2, r2
 8001794:	440b      	add	r3, r1
 8001796:	761a      	strb	r2, [r3, #24]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000e100 	.word	0xe000e100
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b089      	sub	sp, #36	; 0x24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	60f8      	str	r0, [r7, #12]
 80017b4:	60b9      	str	r1, [r7, #8]
 80017b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f003 0307 	and.w	r3, r3, #7
 80017be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f1c3 0307 	rsb	r3, r3, #7
 80017c6:	2b04      	cmp	r3, #4
 80017c8:	bf28      	it	cs
 80017ca:	2304      	movcs	r3, #4
 80017cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	3304      	adds	r3, #4
 80017d2:	2b06      	cmp	r3, #6
 80017d4:	d902      	bls.n	80017dc <NVIC_EncodePriority+0x30>
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	3b03      	subs	r3, #3
 80017da:	e000      	b.n	80017de <NVIC_EncodePriority+0x32>
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017e0:	f04f 32ff 	mov.w	r2, #4294967295
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43da      	mvns	r2, r3
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	401a      	ands	r2, r3
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017f4:	f04f 31ff 	mov.w	r1, #4294967295
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa01 f303 	lsl.w	r3, r1, r3
 80017fe:	43d9      	mvns	r1, r3
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001804:	4313      	orrs	r3, r2
         );
}
 8001806:	4618      	mov	r0, r3
 8001808:	3724      	adds	r7, #36	; 0x24
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001814:	b480      	push	{r7}
 8001816:	b085      	sub	sp, #20
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 800181c:	4b08      	ldr	r3, [pc, #32]	; (8001840 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800181e:	695a      	ldr	r2, [r3, #20]
 8001820:	4907      	ldr	r1, [pc, #28]	; (8001840 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4313      	orrs	r3, r2
 8001826:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800182a:	695a      	ldr	r2, [r3, #20]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	4013      	ands	r3, r2
 8001830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001832:	68fb      	ldr	r3, [r7, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	40021000 	.word	0x40021000

08001844 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001848:	2001      	movs	r0, #1
 800184a:	f7ff ffe3 	bl	8001814 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800184e:	f7ff ff57 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001852:	4603      	mov	r3, r0
 8001854:	2200      	movs	r2, #0
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f7ff ffa7 	bl	80017ac <NVIC_EncodePriority>
 800185e:	4603      	mov	r3, r0
 8001860:	4619      	mov	r1, r3
 8001862:	200e      	movs	r0, #14
 8001864:	f7ff ff78 	bl	8001758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001868:	200e      	movs	r0, #14
 800186a:	f7ff ff57 	bl	800171c <__NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel5_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800186e:	f7ff ff47 	bl	8001700 <__NVIC_GetPriorityGrouping>
 8001872:	4603      	mov	r3, r0
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff ff97 	bl	80017ac <NVIC_EncodePriority>
 800187e:	4603      	mov	r3, r0
 8001880:	4619      	mov	r1, r3
 8001882:	200f      	movs	r0, #15
 8001884:	f7ff ff68 	bl	8001758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001888:	200f      	movs	r0, #15
 800188a:	f7ff ff47 	bl	800171c <__NVIC_EnableIRQ>

}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <LL_AHB1_GRP1_EnableClock>:
{
 8001894:	b480      	push	{r7}
 8001896:	b085      	sub	sp, #20
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800189e:	695a      	ldr	r2, [r3, #20]
 80018a0:	4907      	ldr	r1, [pc, #28]	; (80018c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4313      	orrs	r3, r2
 80018a6:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018aa:	695a      	ldr	r2, [r3, #20]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	4013      	ands	r3, r2
 80018b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018b2:	68fb      	ldr	r3, [r7, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40021000 	.word	0x40021000

080018c4 <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  return (READ_BIT(GPIOx->IDR, PinMask) == (PinMask));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	691a      	ldr	r2, [r3, #16]
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	4013      	ands	r3, r2
 80018d6:	683a      	ldr	r2, [r7, #0]
 80018d8:	429a      	cmp	r2, r3
 80018da:	bf0c      	ite	eq
 80018dc:	2301      	moveq	r3, #1
 80018de:	2300      	movne	r3, #0
 80018e0:	b2db      	uxtb	r3, r3
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	370c      	adds	r7, #12
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr

080018ee <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80018ee:	b480      	push	{r7}
 80018f0:	b083      	sub	sp, #12
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
 80018f6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	619a      	str	r2, [r3, #24]
}
 80018fe:	bf00      	nop
 8001900:	370c      	adds	r7, #12
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr

0800190a <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800190a:	b480      	push	{r7}
 800190c:	b083      	sub	sp, #12
 800190e:	af00      	add	r7, sp, #0
 8001910:	6078      	str	r0, [r7, #4]
 8001912:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800192e:	463b      	mov	r3, r7
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	605a      	str	r2, [r3, #4]
 8001936:	609a      	str	r2, [r3, #8]
 8001938:	60da      	str	r2, [r3, #12]
 800193a:	611a      	str	r2, [r3, #16]
 800193c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 800193e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001942:	f7ff ffa7 	bl	8001894 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8001946:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800194a:	f7ff ffa3 	bl	8001894 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 800194e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8001952:	f7ff ff9f 	bl	8001894 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_8
 8001956:	f240 7113 	movw	r1, #1811	; 0x713
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195e:	f7ff ffd4 	bl	800190a <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_10);

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_10|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 8001962:	f24e 4178 	movw	r1, #58488	; 0xe478
 8001966:	4823      	ldr	r0, [pc, #140]	; (80019f4 <MX_GPIO_Init+0xcc>)
 8001968:	f7ff ffcf 	bl	800190a <LL_GPIO_ResetOutputPin>
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6);

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_7);
 800196c:	2180      	movs	r1, #128	; 0x80
 800196e:	4822      	ldr	r0, [pc, #136]	; (80019f8 <MX_GPIO_Init+0xd0>)
 8001970:	f7ff ffcb 	bl	800190a <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1|LL_GPIO_PIN_4|LL_GPIO_PIN_8
 8001974:	f240 7313 	movw	r3, #1811	; 0x713
 8001978:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_9|LL_GPIO_PIN_10;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800197a:	2301      	movs	r3, #1
 800197c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800197e:	2300      	movs	r3, #0
 8001980:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001986:	2300      	movs	r3, #0
 8001988:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	463b      	mov	r3, r7
 800198c:	4619      	mov	r1, r3
 800198e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001992:	f001 fbe9 	bl	8003168 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001996:	2301      	movs	r3, #1
 8001998:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800199e:	2300      	movs	r3, #0
 80019a0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019a2:	463b      	mov	r3, r7
 80019a4:	4619      	mov	r1, r3
 80019a6:	4813      	ldr	r0, [pc, #76]	; (80019f4 <MX_GPIO_Init+0xcc>)
 80019a8:	f001 fbde 	bl	8003168 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_13|LL_GPIO_PIN_14|LL_GPIO_PIN_15
 80019ac:	f24e 4378 	movw	r3, #58488	; 0xe478
 80019b0:	603b      	str	r3, [r7, #0]
                          |LL_GPIO_PIN_3|LL_GPIO_PIN_4|LL_GPIO_PIN_5|LL_GPIO_PIN_6;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019b2:	2301      	movs	r3, #1
 80019b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019be:	2300      	movs	r3, #0
 80019c0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	463b      	mov	r3, r7
 80019c4:	4619      	mov	r1, r3
 80019c6:	480b      	ldr	r0, [pc, #44]	; (80019f4 <MX_GPIO_Init+0xcc>)
 80019c8:	f001 fbce 	bl	8003168 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_7;
 80019cc:	2380      	movs	r3, #128	; 0x80
 80019ce:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019d0:	2301      	movs	r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019dc:	2300      	movs	r3, #0
 80019de:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019e0:	463b      	mov	r3, r7
 80019e2:	4619      	mov	r1, r3
 80019e4:	4804      	ldr	r0, [pc, #16]	; (80019f8 <MX_GPIO_Init+0xd0>)
 80019e6:	f001 fbbf 	bl	8003168 <LL_GPIO_Init>

}
 80019ea:	bf00      	nop
 80019ec:	3718      	adds	r7, #24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bd80      	pop	{r7, pc}
 80019f2:	bf00      	nop
 80019f4:	48000400 	.word	0x48000400
 80019f8:	48000800 	.word	0x48000800

080019fc <GPIO_is_pin_set>:

/* USER CODE BEGIN 2 */

uint8_t GPIO_is_pin_set(uint32_t PIN, char mask)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b082      	sub	sp, #8
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
 8001a04:	460b      	mov	r3, r1
 8001a06:	70fb      	strb	r3, [r7, #3]
	if(mask == 'a')
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	2b61      	cmp	r3, #97	; 0x61
 8001a0c:	d107      	bne.n	8001a1e <GPIO_is_pin_set+0x22>
		return LL_GPIO_IsInputPinSet(GPIOA, PIN);
 8001a0e:	6879      	ldr	r1, [r7, #4]
 8001a10:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a14:	f7ff ff56 	bl	80018c4 <LL_GPIO_IsInputPinSet>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	b2db      	uxtb	r3, r3
 8001a1c:	e013      	b.n	8001a46 <GPIO_is_pin_set+0x4a>
	else if(mask == 'b')
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	2b62      	cmp	r3, #98	; 0x62
 8001a22:	d106      	bne.n	8001a32 <GPIO_is_pin_set+0x36>
		return LL_GPIO_IsInputPinSet(GPIOB, PIN);
 8001a24:	6879      	ldr	r1, [r7, #4]
 8001a26:	480a      	ldr	r0, [pc, #40]	; (8001a50 <GPIO_is_pin_set+0x54>)
 8001a28:	f7ff ff4c 	bl	80018c4 <LL_GPIO_IsInputPinSet>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	e009      	b.n	8001a46 <GPIO_is_pin_set+0x4a>
	else if(mask == 'c')
 8001a32:	78fb      	ldrb	r3, [r7, #3]
 8001a34:	2b63      	cmp	r3, #99	; 0x63
 8001a36:	d106      	bne.n	8001a46 <GPIO_is_pin_set+0x4a>
		return LL_GPIO_IsInputPinSet(GPIOC, PIN);
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	4806      	ldr	r0, [pc, #24]	; (8001a54 <GPIO_is_pin_set+0x58>)
 8001a3c:	f7ff ff42 	bl	80018c4 <LL_GPIO_IsInputPinSet>
 8001a40:	4603      	mov	r3, r0
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	e7ff      	b.n	8001a46 <GPIO_is_pin_set+0x4a>
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	48000400 	.word	0x48000400
 8001a54:	48000800 	.word	0x48000800

08001a58 <GPIO_set_pin_with_mask>:


void GPIO_set_pin_with_mask(uint32_t PIN, uint8_t state, char mask)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	460b      	mov	r3, r1
 8001a62:	70fb      	strb	r3, [r7, #3]
 8001a64:	4613      	mov	r3, r2
 8001a66:	70bb      	strb	r3, [r7, #2]
	if(state == 0)
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d118      	bne.n	8001aa0 <GPIO_set_pin_with_mask+0x48>
	{
		if(mask == 'a')
 8001a6e:	78bb      	ldrb	r3, [r7, #2]
 8001a70:	2b61      	cmp	r3, #97	; 0x61
 8001a72:	d105      	bne.n	8001a80 <GPIO_set_pin_with_mask+0x28>
			LL_GPIO_ResetOutputPin(GPIOA, PIN);
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a7a:	f7ff ff46 	bl	800190a <LL_GPIO_ResetOutputPin>
		else if(mask == 'b')
			LL_GPIO_SetOutputPin(GPIOB, PIN);
		else if(mask == 'c')
			LL_GPIO_SetOutputPin(GPIOC, PIN);
	}
}
 8001a7e:	e02a      	b.n	8001ad6 <GPIO_set_pin_with_mask+0x7e>
		else if(mask == 'b')
 8001a80:	78bb      	ldrb	r3, [r7, #2]
 8001a82:	2b62      	cmp	r3, #98	; 0x62
 8001a84:	d104      	bne.n	8001a90 <GPIO_set_pin_with_mask+0x38>
			LL_GPIO_ResetOutputPin(GPIOB, PIN);
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4815      	ldr	r0, [pc, #84]	; (8001ae0 <GPIO_set_pin_with_mask+0x88>)
 8001a8a:	f7ff ff3e 	bl	800190a <LL_GPIO_ResetOutputPin>
}
 8001a8e:	e022      	b.n	8001ad6 <GPIO_set_pin_with_mask+0x7e>
		else if(mask == 'c')
 8001a90:	78bb      	ldrb	r3, [r7, #2]
 8001a92:	2b63      	cmp	r3, #99	; 0x63
 8001a94:	d11f      	bne.n	8001ad6 <GPIO_set_pin_with_mask+0x7e>
			LL_GPIO_ResetOutputPin(GPIOC, PIN);
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	4812      	ldr	r0, [pc, #72]	; (8001ae4 <GPIO_set_pin_with_mask+0x8c>)
 8001a9a:	f7ff ff36 	bl	800190a <LL_GPIO_ResetOutputPin>
}
 8001a9e:	e01a      	b.n	8001ad6 <GPIO_set_pin_with_mask+0x7e>
	else if(state == 1)
 8001aa0:	78fb      	ldrb	r3, [r7, #3]
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d117      	bne.n	8001ad6 <GPIO_set_pin_with_mask+0x7e>
		if(mask == 'a')
 8001aa6:	78bb      	ldrb	r3, [r7, #2]
 8001aa8:	2b61      	cmp	r3, #97	; 0x61
 8001aaa:	d105      	bne.n	8001ab8 <GPIO_set_pin_with_mask+0x60>
			LL_GPIO_SetOutputPin(GPIOA, PIN);
 8001aac:	6879      	ldr	r1, [r7, #4]
 8001aae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ab2:	f7ff ff1c 	bl	80018ee <LL_GPIO_SetOutputPin>
}
 8001ab6:	e00e      	b.n	8001ad6 <GPIO_set_pin_with_mask+0x7e>
		else if(mask == 'b')
 8001ab8:	78bb      	ldrb	r3, [r7, #2]
 8001aba:	2b62      	cmp	r3, #98	; 0x62
 8001abc:	d104      	bne.n	8001ac8 <GPIO_set_pin_with_mask+0x70>
			LL_GPIO_SetOutputPin(GPIOB, PIN);
 8001abe:	6879      	ldr	r1, [r7, #4]
 8001ac0:	4807      	ldr	r0, [pc, #28]	; (8001ae0 <GPIO_set_pin_with_mask+0x88>)
 8001ac2:	f7ff ff14 	bl	80018ee <LL_GPIO_SetOutputPin>
}
 8001ac6:	e006      	b.n	8001ad6 <GPIO_set_pin_with_mask+0x7e>
		else if(mask == 'c')
 8001ac8:	78bb      	ldrb	r3, [r7, #2]
 8001aca:	2b63      	cmp	r3, #99	; 0x63
 8001acc:	d103      	bne.n	8001ad6 <GPIO_set_pin_with_mask+0x7e>
			LL_GPIO_SetOutputPin(GPIOC, PIN);
 8001ace:	6879      	ldr	r1, [r7, #4]
 8001ad0:	4804      	ldr	r0, [pc, #16]	; (8001ae4 <GPIO_set_pin_with_mask+0x8c>)
 8001ad2:	f7ff ff0c 	bl	80018ee <LL_GPIO_SetOutputPin>
}
 8001ad6:	bf00      	nop
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	48000400 	.word	0x48000400
 8001ae4:	48000800 	.word	0x48000800

08001ae8 <__NVIC_SetPriorityGrouping>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b085      	sub	sp, #20
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af8:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001afe:	68ba      	ldr	r2, [r7, #8]
 8001b00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b04:	4013      	ands	r3, r2
 8001b06:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b1a:	4a04      	ldr	r2, [pc, #16]	; (8001b2c <__NVIC_SetPriorityGrouping+0x44>)
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	60d3      	str	r3, [r2, #12]
}
 8001b20:	bf00      	nop
 8001b22:	3714      	adds	r7, #20
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	e000ed00 	.word	0xe000ed00

08001b30 <__NVIC_GetPriorityGrouping>:
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b34:	4b04      	ldr	r3, [pc, #16]	; (8001b48 <__NVIC_GetPriorityGrouping+0x18>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	0a1b      	lsrs	r3, r3, #8
 8001b3a:	f003 0307 	and.w	r3, r3, #7
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	e000ed00 	.word	0xe000ed00

08001b4c <__NVIC_SetPriority>:
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	4603      	mov	r3, r0
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	db0a      	blt.n	8001b76 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	b2da      	uxtb	r2, r3
 8001b64:	490c      	ldr	r1, [pc, #48]	; (8001b98 <__NVIC_SetPriority+0x4c>)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	0112      	lsls	r2, r2, #4
 8001b6c:	b2d2      	uxtb	r2, r2
 8001b6e:	440b      	add	r3, r1
 8001b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b74:	e00a      	b.n	8001b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	b2da      	uxtb	r2, r3
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <__NVIC_SetPriority+0x50>)
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	f003 030f 	and.w	r3, r3, #15
 8001b82:	3b04      	subs	r3, #4
 8001b84:	0112      	lsls	r2, r2, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	440b      	add	r3, r1
 8001b8a:	761a      	strb	r2, [r3, #24]
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr
 8001b98:	e000e100 	.word	0xe000e100
 8001b9c:	e000ed00 	.word	0xe000ed00

08001ba0 <NVIC_EncodePriority>:
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b089      	sub	sp, #36	; 0x24
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	60b9      	str	r1, [r7, #8]
 8001baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0307 	and.w	r3, r3, #7
 8001bb2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	f1c3 0307 	rsb	r3, r3, #7
 8001bba:	2b04      	cmp	r3, #4
 8001bbc:	bf28      	it	cs
 8001bbe:	2304      	movcs	r3, #4
 8001bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	3304      	adds	r3, #4
 8001bc6:	2b06      	cmp	r3, #6
 8001bc8:	d902      	bls.n	8001bd0 <NVIC_EncodePriority+0x30>
 8001bca:	69fb      	ldr	r3, [r7, #28]
 8001bcc:	3b03      	subs	r3, #3
 8001bce:	e000      	b.n	8001bd2 <NVIC_EncodePriority+0x32>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43da      	mvns	r2, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	401a      	ands	r2, r3
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001be8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf2:	43d9      	mvns	r1, r3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf8:	4313      	orrs	r3, r2
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3724      	adds	r7, #36	; 0x24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
	...

08001c08 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <LL_RCC_HSI_Enable+0x1c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a04      	ldr	r2, [pc, #16]	; (8001c24 <LL_RCC_HSI_Enable+0x1c>)
 8001c12:	f043 0301 	orr.w	r3, r3, #1
 8001c16:	6013      	str	r3, [r2, #0]
}
 8001c18:	bf00      	nop
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40021000 	.word	0x40021000

08001c28 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001c2c:	4b06      	ldr	r3, [pc, #24]	; (8001c48 <LL_RCC_HSI_IsReady+0x20>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	bf0c      	ite	eq
 8001c38:	2301      	moveq	r3, #1
 8001c3a:	2300      	movne	r3, #0
 8001c3c:	b2db      	uxtb	r3, r3
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	40021000 	.word	0x40021000

08001c4c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8001c54:	4b07      	ldr	r3, [pc, #28]	; (8001c74 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	4904      	ldr	r1, [pc, #16]	; (8001c74 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	600b      	str	r3, [r1, #0]
}
 8001c66:	bf00      	nop
 8001c68:	370c      	adds	r7, #12
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	40021000 	.word	0x40021000

08001c78 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001c80:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <LL_RCC_SetSysClkSource+0x24>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f023 0203 	bic.w	r2, r3, #3
 8001c88:	4904      	ldr	r1, [pc, #16]	; (8001c9c <LL_RCC_SetSysClkSource+0x24>)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	604b      	str	r3, [r1, #4]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <LL_RCC_GetSysClkSource+0x18>)
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000

08001cbc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <LL_RCC_SetAHBPrescaler+0x24>)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	604b      	str	r3, [r1, #4]
}
 8001cd4:	bf00      	nop
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr
 8001ce0:	40021000 	.word	0x40021000

08001ce4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cf4:	4904      	ldr	r1, [pc, #16]	; (8001d08 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	604b      	str	r3, [r1, #4]
}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr
 8001d08:	40021000 	.word	0x40021000

08001d0c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001d14:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d1c:	4904      	ldr	r1, [pc, #16]	; (8001d30 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
}
 8001d24:	bf00      	nop
 8001d26:	370c      	adds	r7, #12
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	40021000 	.word	0x40021000

08001d34 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <LL_RCC_SetUSARTClockSource+0x34>)
 8001d3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	0e1b      	lsrs	r3, r3, #24
 8001d44:	2103      	movs	r1, #3
 8001d46:	fa01 f303 	lsl.w	r3, r1, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	401a      	ands	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8001d54:	4904      	ldr	r1, [pc, #16]	; (8001d68 <LL_RCC_SetUSARTClockSource+0x34>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001d5a:	bf00      	nop
 8001d5c:	370c      	adds	r7, #12
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	40021000 	.word	0x40021000

08001d6c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8001d74:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d76:	69da      	ldr	r2, [r3, #28]
 8001d78:	4907      	ldr	r1, [pc, #28]	; (8001d98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001d82:	69da      	ldr	r2, [r3, #28]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4013      	ands	r3, r2
 8001d88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d8a:	68fb      	ldr	r3, [r7, #12]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40021000 	.word	0x40021000

08001d9c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001da6:	699a      	ldr	r2, [r3, #24]
 8001da8:	4907      	ldr	r1, [pc, #28]	; (8001dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001db0:	4b05      	ldr	r3, [pc, #20]	; (8001dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001db2:	699a      	ldr	r2, [r3, #24]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4013      	ands	r3, r2
 8001db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	bf00      	nop
 8001dbe:	3714      	adds	r7, #20
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	40021000 	.word	0x40021000

08001dcc <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b083      	sub	sp, #12
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001dd4:	4b06      	ldr	r3, [pc, #24]	; (8001df0 <LL_FLASH_SetLatency+0x24>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f023 0207 	bic.w	r2, r3, #7
 8001ddc:	4904      	ldr	r1, [pc, #16]	; (8001df0 <LL_FLASH_SetLatency+0x24>)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
}
 8001de4:	bf00      	nop
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr
 8001df0:	40022000 	.word	0x40022000

08001df4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001df8:	4b04      	ldr	r3, [pc, #16]	; (8001e0c <LL_FLASH_GetLatency+0x18>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
 8001e0a:	bf00      	nop
 8001e0c:	40022000 	.word	0x40022000

08001e10 <next_user>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void next_user()
{
 8001e10:	b4b0      	push	{r4, r5, r7}
 8001e12:	af00      	add	r7, sp, #0
    if(current_user.ID == user_A.ID)
 8001e14:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <next_user+0x70>)
 8001e16:	781a      	ldrb	r2, [r3, #0]
 8001e18:	4b1a      	ldr	r3, [pc, #104]	; (8001e84 <next_user+0x74>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d10a      	bne.n	8001e36 <next_user+0x26>
		current_user = user_B;
 8001e20:	4a17      	ldr	r2, [pc, #92]	; (8001e80 <next_user+0x70>)
 8001e22:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <next_user+0x78>)
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	else if(current_user.ID == user_B.ID)
		current_user = user_C;
	else if(current_user.ID == user_C.ID)
		current_user = user_A;
}
 8001e34:	e020      	b.n	8001e78 <next_user+0x68>
	else if(current_user.ID == user_B.ID)
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <next_user+0x70>)
 8001e38:	781a      	ldrb	r2, [r3, #0]
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <next_user+0x78>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d10a      	bne.n	8001e58 <next_user+0x48>
		current_user = user_C;
 8001e42:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <next_user+0x70>)
 8001e44:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <next_user+0x7c>)
 8001e46:	4614      	mov	r4, r2
 8001e48:	461d      	mov	r5, r3
 8001e4a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e4c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e4e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001e56:	e00f      	b.n	8001e78 <next_user+0x68>
	else if(current_user.ID == user_C.ID)
 8001e58:	4b09      	ldr	r3, [pc, #36]	; (8001e80 <next_user+0x70>)
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <next_user+0x7c>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d109      	bne.n	8001e78 <next_user+0x68>
		current_user = user_A;
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <next_user+0x70>)
 8001e66:	4b07      	ldr	r3, [pc, #28]	; (8001e84 <next_user+0x74>)
 8001e68:	4614      	mov	r4, r2
 8001e6a:	461d      	mov	r5, r3
 8001e6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e70:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001e74:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001e78:	bf00      	nop
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bcb0      	pop	{r4, r5, r7}
 8001e7e:	4770      	bx	lr
 8001e80:	200002a8 	.word	0x200002a8
 8001e84:	200002c8 	.word	0x200002c8
 8001e88:	200002e8 	.word	0x200002e8
 8001e8c:	20000308 	.word	0x20000308

08001e90 <save_user>:

void save_user()
{
 8001e90:	b4b0      	push	{r4, r5, r7}
 8001e92:	af00      	add	r7, sp, #0
	if(current_user.ID == user_A.ID)
 8001e94:	4b1a      	ldr	r3, [pc, #104]	; (8001f00 <save_user+0x70>)
 8001e96:	781a      	ldrb	r2, [r3, #0]
 8001e98:	4b1a      	ldr	r3, [pc, #104]	; (8001f04 <save_user+0x74>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d10a      	bne.n	8001eb6 <save_user+0x26>
		user_A = current_user;
 8001ea0:	4a18      	ldr	r2, [pc, #96]	; (8001f04 <save_user+0x74>)
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <save_user+0x70>)
 8001ea4:	4614      	mov	r4, r2
 8001ea6:	461d      	mov	r5, r3
 8001ea8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001eac:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001eb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	else if(current_user.ID == user_B.ID)
		user_B = current_user;
	else if(current_user.ID == user_C.ID)
		user_C = current_user;
}
 8001eb4:	e020      	b.n	8001ef8 <save_user+0x68>
	else if(current_user.ID == user_B.ID)
 8001eb6:	4b12      	ldr	r3, [pc, #72]	; (8001f00 <save_user+0x70>)
 8001eb8:	781a      	ldrb	r2, [r3, #0]
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <save_user+0x78>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d10a      	bne.n	8001ed8 <save_user+0x48>
		user_B = current_user;
 8001ec2:	4a11      	ldr	r2, [pc, #68]	; (8001f08 <save_user+0x78>)
 8001ec4:	4b0e      	ldr	r3, [pc, #56]	; (8001f00 <save_user+0x70>)
 8001ec6:	4614      	mov	r4, r2
 8001ec8:	461d      	mov	r5, r3
 8001eca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ecc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ece:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ed2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001ed6:	e00f      	b.n	8001ef8 <save_user+0x68>
	else if(current_user.ID == user_C.ID)
 8001ed8:	4b09      	ldr	r3, [pc, #36]	; (8001f00 <save_user+0x70>)
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <save_user+0x7c>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	429a      	cmp	r2, r3
 8001ee2:	d109      	bne.n	8001ef8 <save_user+0x68>
		user_C = current_user;
 8001ee4:	4a09      	ldr	r2, [pc, #36]	; (8001f0c <save_user+0x7c>)
 8001ee6:	4b06      	ldr	r3, [pc, #24]	; (8001f00 <save_user+0x70>)
 8001ee8:	4614      	mov	r4, r2
 8001eea:	461d      	mov	r5, r3
 8001eec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001eee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ef0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001ef4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001ef8:	bf00      	nop
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bcb0      	pop	{r4, r5, r7}
 8001efe:	4770      	bx	lr
 8001f00:	200002a8 	.word	0x200002a8
 8001f04:	200002c8 	.word	0x200002c8
 8001f08:	200002e8 	.word	0x200002e8
 8001f0c:	20000308 	.word	0x20000308

08001f10 <setup_users>:

void setup_users()
{
 8001f10:	b5b0      	push	{r4, r5, r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	user_A.ID = 0;
 8001f14:	4b3a      	ldr	r3, [pc, #232]	; (8002000 <setup_users+0xf0>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
	user_A.distance = 1234000.0;
 8001f1a:	4939      	ldr	r1, [pc, #228]	; (8002000 <setup_users+0xf0>)
 8001f1c:	a332      	add	r3, pc, #200	; (adr r3, 8001fe8 <setup_users+0xd8>)
 8001f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f22:	e9c1 2302 	strd	r2, r3, [r1, #8]
	user_A.distance_km = user_A.distance * 0.001;
 8001f26:	4b36      	ldr	r3, [pc, #216]	; (8002000 <setup_users+0xf0>)
 8001f28:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f2c:	a330      	add	r3, pc, #192	; (adr r3, 8001ff0 <setup_users+0xe0>)
 8001f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f32:	f7fe fb05 	bl	8000540 <__aeabi_dmul>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4931      	ldr	r1, [pc, #196]	; (8002000 <setup_users+0xf0>)
 8001f3c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	user_A.red = 0;
 8001f40:	4b2f      	ldr	r3, [pc, #188]	; (8002000 <setup_users+0xf0>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	761a      	strb	r2, [r3, #24]
	user_A.green = 1;
 8001f46:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <setup_users+0xf0>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	765a      	strb	r2, [r3, #25]
	user_A.blue = 1;
 8001f4c:	4b2c      	ldr	r3, [pc, #176]	; (8002000 <setup_users+0xf0>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	769a      	strb	r2, [r3, #26]

	user_B.ID = 1;
 8001f52:	4b2c      	ldr	r3, [pc, #176]	; (8002004 <setup_users+0xf4>)
 8001f54:	2201      	movs	r2, #1
 8001f56:	701a      	strb	r2, [r3, #0]
	user_B.distance = 0.0;
 8001f58:	492a      	ldr	r1, [pc, #168]	; (8002004 <setup_users+0xf4>)
 8001f5a:	f04f 0200 	mov.w	r2, #0
 8001f5e:	f04f 0300 	mov.w	r3, #0
 8001f62:	e9c1 2302 	strd	r2, r3, [r1, #8]
	user_B.distance_km = user_B.distance * 0.001;
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <setup_users+0xf4>)
 8001f68:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001f6c:	a320      	add	r3, pc, #128	; (adr r3, 8001ff0 <setup_users+0xe0>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fae5 	bl	8000540 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4922      	ldr	r1, [pc, #136]	; (8002004 <setup_users+0xf4>)
 8001f7c:	e9c1 2304 	strd	r2, r3, [r1, #16]
	user_B.red = 1;
 8001f80:	4b20      	ldr	r3, [pc, #128]	; (8002004 <setup_users+0xf4>)
 8001f82:	2201      	movs	r2, #1
 8001f84:	761a      	strb	r2, [r3, #24]
	user_B.green = 0;
 8001f86:	4b1f      	ldr	r3, [pc, #124]	; (8002004 <setup_users+0xf4>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	765a      	strb	r2, [r3, #25]
	user_B.blue = 1;
 8001f8c:	4b1d      	ldr	r3, [pc, #116]	; (8002004 <setup_users+0xf4>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	769a      	strb	r2, [r3, #26]

	user_C.ID = 2;
 8001f92:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <setup_users+0xf8>)
 8001f94:	2202      	movs	r2, #2
 8001f96:	701a      	strb	r2, [r3, #0]
	user_C.distance = 6969000.0;
 8001f98:	491b      	ldr	r1, [pc, #108]	; (8002008 <setup_users+0xf8>)
 8001f9a:	a317      	add	r3, pc, #92	; (adr r3, 8001ff8 <setup_users+0xe8>)
 8001f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	user_C.distance_km = user_C.distance * 0.001;
 8001fa4:	4b18      	ldr	r3, [pc, #96]	; (8002008 <setup_users+0xf8>)
 8001fa6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001faa:	a311      	add	r3, pc, #68	; (adr r3, 8001ff0 <setup_users+0xe0>)
 8001fac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fb0:	f7fe fac6 	bl	8000540 <__aeabi_dmul>
 8001fb4:	4602      	mov	r2, r0
 8001fb6:	460b      	mov	r3, r1
 8001fb8:	4913      	ldr	r1, [pc, #76]	; (8002008 <setup_users+0xf8>)
 8001fba:	e9c1 2304 	strd	r2, r3, [r1, #16]
	user_C.red = 1;
 8001fbe:	4b12      	ldr	r3, [pc, #72]	; (8002008 <setup_users+0xf8>)
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	761a      	strb	r2, [r3, #24]
	user_C.green = 1;
 8001fc4:	4b10      	ldr	r3, [pc, #64]	; (8002008 <setup_users+0xf8>)
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	765a      	strb	r2, [r3, #25]
	user_C.blue = 0;
 8001fca:	4b0f      	ldr	r3, [pc, #60]	; (8002008 <setup_users+0xf8>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	769a      	strb	r2, [r3, #26]

	current_user = user_A;
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	; (800200c <setup_users+0xfc>)
 8001fd2:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <setup_users+0xf0>)
 8001fd4:	4614      	mov	r4, r2
 8001fd6:	461d      	mov	r5, r3
 8001fd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001fdc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001fe0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001fe4:	bf00      	nop
 8001fe6:	bdb0      	pop	{r4, r5, r7, pc}
 8001fe8:	00000000 	.word	0x00000000
 8001fec:	4132d450 	.word	0x4132d450
 8001ff0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001ff4:	3f50624d 	.word	0x3f50624d
 8001ff8:	00000000 	.word	0x00000000
 8001ffc:	415a95aa 	.word	0x415a95aa
 8002000:	200002c8 	.word	0x200002c8
 8002004:	200002e8 	.word	0x200002e8
 8002008:	20000308 	.word	0x20000308
 800200c:	200002a8 	.word	0x200002a8

08002010 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002010:	b590      	push	{r4, r7, lr}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002016:	2001      	movs	r0, #1
 8002018:	f7ff fec0 	bl	8001d9c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800201c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002020:	f7ff fea4 	bl	8001d6c <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002024:	2003      	movs	r0, #3
 8002026:	f7ff fd5f 	bl	8001ae8 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 800202a:	f7ff fd81 	bl	8001b30 <__NVIC_GetPriorityGrouping>
 800202e:	4603      	mov	r3, r0
 8002030:	2200      	movs	r2, #0
 8002032:	210f      	movs	r1, #15
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fdb3 	bl	8001ba0 <NVIC_EncodePriority>
 800203a:	4603      	mov	r3, r0
 800203c:	4619      	mov	r1, r3
 800203e:	f04f 30ff 	mov.w	r0, #4294967295
 8002042:	f7ff fd83 	bl	8001b4c <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002046:	f000 f8e7 	bl	8002218 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800204a:	f7ff fc6d 	bl	8001928 <MX_GPIO_Init>
  MX_DMA_Init();
 800204e:	f7ff fbf9 	bl	8001844 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8002052:	f000 fe13 	bl	8002c7c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  USART1_RegisterCallback(proccesDmaData);
 8002056:	4868      	ldr	r0, [pc, #416]	; (80021f8 <main+0x1e8>)
 8002058:	f000 fdfe 	bl	8002c58 <USART1_RegisterCallback>
  setup_users();
 800205c:	f7ff ff58 	bl	8001f10 <setup_users>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    set_RGB_led(current_user.red,current_user.green,current_user.blue);
 8002060:	4b66      	ldr	r3, [pc, #408]	; (80021fc <main+0x1ec>)
 8002062:	7e1b      	ldrb	r3, [r3, #24]
 8002064:	4a65      	ldr	r2, [pc, #404]	; (80021fc <main+0x1ec>)
 8002066:	7e51      	ldrb	r1, [r2, #25]
 8002068:	4a64      	ldr	r2, [pc, #400]	; (80021fc <main+0x1ec>)
 800206a:	7e92      	ldrb	r2, [r2, #26]
 800206c:	4618      	mov	r0, r3
 800206e:	f7ff f8fb 	bl	8001268 <set_RGB_led>
    button_state = readButton();
 8002072:	f7ff f919 	bl	80012a8 <readButton>
 8002076:	4603      	mov	r3, r0
 8002078:	461a      	mov	r2, r3
 800207a:	4b61      	ldr	r3, [pc, #388]	; (8002200 <main+0x1f0>)
 800207c:	701a      	strb	r2, [r3, #0]
    if(button_state == BUTTON_STATE_PRESS)
 800207e:	4b60      	ldr	r3, [pc, #384]	; (8002200 <main+0x1f0>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d102      	bne.n	800208c <main+0x7c>
    {
      next_user();
 8002086:	f7ff fec3 	bl	8001e10 <next_user>
 800208a:	e013      	b.n	80020b4 <main+0xa4>
    }
    else if(button_state == BUTTON_STATE_LONG_PRESS)
 800208c:	4b5c      	ldr	r3, [pc, #368]	; (8002200 <main+0x1f0>)
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	2b02      	cmp	r3, #2
 8002092:	d10f      	bne.n	80020b4 <main+0xa4>
    {
      current_user.distance = 0.0;
 8002094:	4959      	ldr	r1, [pc, #356]	; (80021fc <main+0x1ec>)
 8002096:	f04f 0200 	mov.w	r2, #0
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	e9c1 2302 	strd	r2, r3, [r1, #8]
      current_user.distance_km = 0.0;
 80020a2:	4956      	ldr	r1, [pc, #344]	; (80021fc <main+0x1ec>)
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	f04f 0300 	mov.w	r3, #0
 80020ac:	e9c1 2304 	strd	r2, r3, [r1, #16]
      save_user();
 80020b0:	f7ff feee 	bl	8001e90 <save_user>
    }    
    current_position = get_device_position();
 80020b4:	4c53      	ldr	r4, [pc, #332]	; (8002204 <main+0x1f4>)
 80020b6:	463b      	mov	r3, r7
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7fe fef9 	bl	8000eb0 <get_device_position>
 80020be:	463b      	mov	r3, r7
 80020c0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	current_coordinate.latitude = current_position.LAT;
 80020c6:	4b4f      	ldr	r3, [pc, #316]	; (8002204 <main+0x1f4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4618      	mov	r0, r3
 80020cc:	f7fe f9e0 	bl	8000490 <__aeabi_f2d>
 80020d0:	4602      	mov	r2, r0
 80020d2:	460b      	mov	r3, r1
 80020d4:	494c      	ldr	r1, [pc, #304]	; (8002208 <main+0x1f8>)
 80020d6:	e9c1 2300 	strd	r2, r3, [r1]
	current_coordinate.longitude = current_position.LON;
 80020da:	4b4a      	ldr	r3, [pc, #296]	; (8002204 <main+0x1f4>)
 80020dc:	689b      	ldr	r3, [r3, #8]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe f9d6 	bl	8000490 <__aeabi_f2d>
 80020e4:	4602      	mov	r2, r0
 80020e6:	460b      	mov	r3, r1
 80020e8:	4947      	ldr	r1, [pc, #284]	; (8002208 <main+0x1f8>)
 80020ea:	e9c1 2302 	strd	r2, r3, [r1, #8]

	last_coordinate.latitude = last_position.LAT;
 80020ee:	4b47      	ldr	r3, [pc, #284]	; (800220c <main+0x1fc>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f7fe f9cc 	bl	8000490 <__aeabi_f2d>
 80020f8:	4602      	mov	r2, r0
 80020fa:	460b      	mov	r3, r1
 80020fc:	4944      	ldr	r1, [pc, #272]	; (8002210 <main+0x200>)
 80020fe:	e9c1 2300 	strd	r2, r3, [r1]
	last_coordinate.longitude = last_position.LON;
 8002102:	4b42      	ldr	r3, [pc, #264]	; (800220c <main+0x1fc>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe f9c2 	bl	8000490 <__aeabi_f2d>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	493f      	ldr	r1, [pc, #252]	; (8002210 <main+0x200>)
 8002112:	e9c1 2302 	strd	r2, r3, [r1, #8]

	traveled_distance = haversineDistance(last_coordinate,current_coordinate);
 8002116:	4b3c      	ldr	r3, [pc, #240]	; (8002208 <main+0x1f8>)
 8002118:	ed93 4b00 	vldr	d4, [r3]
 800211c:	ed93 5b02 	vldr	d5, [r3, #8]
 8002120:	4b3b      	ldr	r3, [pc, #236]	; (8002210 <main+0x200>)
 8002122:	ed93 6b00 	vldr	d6, [r3]
 8002126:	ed93 7b02 	vldr	d7, [r3, #8]
 800212a:	eeb0 2a44 	vmov.f32	s4, s8
 800212e:	eef0 2a64 	vmov.f32	s5, s9
 8002132:	eeb0 3a45 	vmov.f32	s6, s10
 8002136:	eef0 3a65 	vmov.f32	s7, s11
 800213a:	eeb0 0a46 	vmov.f32	s0, s12
 800213e:	eef0 0a66 	vmov.f32	s1, s13
 8002142:	eeb0 1a47 	vmov.f32	s2, s14
 8002146:	eef0 1a67 	vmov.f32	s3, s15
 800214a:	f7fe fd5d 	bl	8000c08 <haversineDistance>
 800214e:	eeb0 7a40 	vmov.f32	s14, s0
 8002152:	eef0 7a60 	vmov.f32	s15, s1
 8002156:	4b2f      	ldr	r3, [pc, #188]	; (8002214 <main+0x204>)
 8002158:	ed83 7b00 	vstr	d7, [r3]

	if(traveled_distance < ERROR_TRAVELED_DISTANCE_THRESHOLD_METERS &&
 800215c:	4b2d      	ldr	r3, [pc, #180]	; (8002214 <main+0x204>)
 800215e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002162:	a321      	add	r3, pc, #132	; (adr r3, 80021e8 <main+0x1d8>)
 8002164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002168:	f7fe fc5c 	bl	8000a24 <__aeabi_dcmplt>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d023      	beq.n	80021ba <main+0x1aa>
			current_position.fix != GPS_NO_FIX &&
 8002172:	4b24      	ldr	r3, [pc, #144]	; (8002204 <main+0x1f4>)
 8002174:	7b5b      	ldrb	r3, [r3, #13]
	if(traveled_distance < ERROR_TRAVELED_DISTANCE_THRESHOLD_METERS &&
 8002176:	2b00      	cmp	r3, #0
 8002178:	d01f      	beq.n	80021ba <main+0x1aa>
			last_position.fix != GPS_NO_FIX)
 800217a:	4b24      	ldr	r3, [pc, #144]	; (800220c <main+0x1fc>)
 800217c:	7b5b      	ldrb	r3, [r3, #13]
			current_position.fix != GPS_NO_FIX &&
 800217e:	2b00      	cmp	r3, #0
 8002180:	d01b      	beq.n	80021ba <main+0x1aa>
	{
		current_user.distance += traveled_distance;
 8002182:	4b1e      	ldr	r3, [pc, #120]	; (80021fc <main+0x1ec>)
 8002184:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002188:	4b22      	ldr	r3, [pc, #136]	; (8002214 <main+0x204>)
 800218a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218e:	f7fe f821 	bl	80001d4 <__adddf3>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4919      	ldr	r1, [pc, #100]	; (80021fc <main+0x1ec>)
 8002198:	e9c1 2302 	strd	r2, r3, [r1, #8]
		current_user.distance_km = current_user.distance * 0.001;
 800219c:	4b17      	ldr	r3, [pc, #92]	; (80021fc <main+0x1ec>)
 800219e:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80021a2:	a313      	add	r3, pc, #76	; (adr r3, 80021f0 <main+0x1e0>)
 80021a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021a8:	f7fe f9ca 	bl	8000540 <__aeabi_dmul>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4912      	ldr	r1, [pc, #72]	; (80021fc <main+0x1ec>)
 80021b2:	e9c1 2304 	strd	r2, r3, [r1, #16]
		save_user();
 80021b6:	f7ff fe6b 	bl	8001e90 <save_user>
	}

	handle_display((uint16_t)current_user.distance_km);
 80021ba:	4b10      	ldr	r3, [pc, #64]	; (80021fc <main+0x1ec>)
 80021bc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80021c0:	4610      	mov	r0, r2
 80021c2:	4619      	mov	r1, r3
 80021c4:	f7fe fc94 	bl	8000af0 <__aeabi_d2uiz>
 80021c8:	4603      	mov	r3, r0
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fa77 	bl	80016c0 <handle_display>
	last_position = current_position;
 80021d2:	4a0e      	ldr	r2, [pc, #56]	; (800220c <main+0x1fc>)
 80021d4:	4b0b      	ldr	r3, [pc, #44]	; (8002204 <main+0x1f4>)
 80021d6:	4614      	mov	r4, r2
 80021d8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	LL_mDelay(2);
 80021de:	2002      	movs	r0, #2
 80021e0:	f001 fadc 	bl	800379c <LL_mDelay>
    set_RGB_led(current_user.red,current_user.green,current_user.blue);
 80021e4:	e73c      	b.n	8002060 <main+0x50>
 80021e6:	bf00      	nop
 80021e8:	00000000 	.word	0x00000000
 80021ec:	40b38800 	.word	0x40b38800
 80021f0:	d2f1a9fc 	.word	0xd2f1a9fc
 80021f4:	3f50624d 	.word	0x3f50624d
 80021f8:	08002285 	.word	0x08002285
 80021fc:	200002a8 	.word	0x200002a8
 8002200:	20000328 	.word	0x20000328
 8002204:	2000032c 	.word	0x2000032c
 8002208:	20000350 	.word	0x20000350
 800220c:	2000033c 	.word	0x2000033c
 8002210:	20000360 	.word	0x20000360
 8002214:	20000370 	.word	0x20000370

08002218 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800221c:	2000      	movs	r0, #0
 800221e:	f7ff fdd5 	bl	8001dcc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8002222:	bf00      	nop
 8002224:	f7ff fde6 	bl	8001df4 <LL_FLASH_GetLatency>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d1fa      	bne.n	8002224 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800222e:	f7ff fceb 	bl	8001c08 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8002232:	bf00      	nop
 8002234:	f7ff fcf8 	bl	8001c28 <LL_RCC_HSI_IsReady>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	d1fa      	bne.n	8002234 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800223e:	2010      	movs	r0, #16
 8002240:	f7ff fd04 	bl	8001c4c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002244:	2000      	movs	r0, #0
 8002246:	f7ff fd39 	bl	8001cbc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800224a:	2000      	movs	r0, #0
 800224c:	f7ff fd4a 	bl	8001ce4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002250:	2000      	movs	r0, #0
 8002252:	f7ff fd5b 	bl	8001d0c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8002256:	2000      	movs	r0, #0
 8002258:	f7ff fd0e 	bl	8001c78 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800225c:	bf00      	nop
 800225e:	f7ff fd1f 	bl	8001ca0 <LL_RCC_GetSysClkSource>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1fa      	bne.n	800225e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8002268:	4805      	ldr	r0, [pc, #20]	; (8002280 <SystemClock_Config+0x68>)
 800226a:	f001 fa89 	bl	8003780 <LL_Init1msTick>
  LL_SetSystemCoreClock(8000000);
 800226e:	4804      	ldr	r0, [pc, #16]	; (8002280 <SystemClock_Config+0x68>)
 8002270:	f001 faba 	bl	80037e8 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 8002274:	2000      	movs	r0, #0
 8002276:	f7ff fd5d 	bl	8001d34 <LL_RCC_SetUSARTClockSource>
}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	007a1200 	.word	0x007a1200

08002284 <proccesDmaData>:

/* USER CODE BEGIN 4 */
void proccesDmaData(uint8_t sign)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b082      	sub	sp, #8
 8002288:	af00      	add	r7, sp, #0
 800228a:	4603      	mov	r3, r0
 800228c:	71fb      	strb	r3, [r7, #7]
	parse_uart_character(sign);
 800228e:	79fb      	ldrb	r3, [r7, #7]
 8002290:	4618      	mov	r0, r3
 8002292:	f7fe ffb3 	bl	80011fc <parse_uart_character>
}
 8002296:	bf00      	nop
 8002298:	3708      	adds	r7, #8
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <LL_DMA_DisableChannel>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableChannel(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
 80022a8:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	3b01      	subs	r3, #1
 80022ae:	4a0b      	ldr	r2, [pc, #44]	; (80022dc <LL_DMA_DisableChannel+0x3c>)
 80022b0:	5cd3      	ldrb	r3, [r2, r3]
 80022b2:	461a      	mov	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	4413      	add	r3, r2
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	683a      	ldr	r2, [r7, #0]
 80022bc:	3a01      	subs	r2, #1
 80022be:	4907      	ldr	r1, [pc, #28]	; (80022dc <LL_DMA_DisableChannel+0x3c>)
 80022c0:	5c8a      	ldrb	r2, [r1, r2]
 80022c2:	4611      	mov	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	440a      	add	r2, r1
 80022c8:	f023 0301 	bic.w	r3, r3, #1
 80022cc:	6013      	str	r3, [r2, #0]
}
 80022ce:	bf00      	nop
 80022d0:	370c      	adds	r7, #12
 80022d2:	46bd      	mov	sp, r7
 80022d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d8:	4770      	bx	lr
 80022da:	bf00      	nop
 80022dc:	0800509c 	.word	0x0800509c

080022e0 <LL_DMA_IsActiveFlag_TC4>:
  * @rmtoll ISR          TCIF4         LL_DMA_IsActiveFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC4(DMA_TypeDef *DMAx)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF4) == (DMA_ISR_TCIF4));
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022f4:	bf0c      	ite	eq
 80022f6:	2301      	moveq	r3, #1
 80022f8:	2300      	movne	r3, #0
 80022fa:	b2db      	uxtb	r3, r3
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <LL_DMA_IsActiveFlag_TC5>:
  * @rmtoll ISR          TCIF5         LL_DMA_IsActiveFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC5(DMA_TypeDef *DMAx)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_TCIF5) == (DMA_ISR_TCIF5));
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800231c:	bf0c      	ite	eq
 800231e:	2301      	moveq	r3, #1
 8002320:	2300      	movne	r3, #0
 8002322:	b2db      	uxtb	r3, r3
}
 8002324:	4618      	mov	r0, r3
 8002326:	370c      	adds	r7, #12
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <LL_DMA_IsActiveFlag_HT5>:
  * @rmtoll ISR          HTIF5         LL_DMA_IsActiveFlag_HT5
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_HT5(DMA_TypeDef *DMAx)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
  return (READ_BIT(DMAx->ISR, DMA_ISR_HTIF5) == (DMA_ISR_HTIF5));
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002340:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002344:	bf0c      	ite	eq
 8002346:	2301      	moveq	r3, #1
 8002348:	2300      	movne	r3, #0
 800234a:	b2db      	uxtb	r3, r3
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <LL_DMA_ClearFlag_TC4>:
  * @rmtoll IFCR         CTCIF4        LL_DMA_ClearFlag_TC4
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC4(DMA_TypeDef *DMAx)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF4);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002366:	605a      	str	r2, [r3, #4]
}
 8002368:	bf00      	nop
 800236a:	370c      	adds	r7, #12
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_DMA_ClearFlag_TC5>:
  * @rmtoll IFCR         CTCIF5        LL_DMA_ClearFlag_TC5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC5(DMA_TypeDef *DMAx)
{
 8002374:	b480      	push	{r7}
 8002376:	b083      	sub	sp, #12
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF5);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002382:	605a      	str	r2, [r3, #4]
}
 8002384:	bf00      	nop
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <LL_DMA_ClearFlag_HT5>:
  * @rmtoll IFCR         CHTIF5        LL_DMA_ClearFlag_HT5
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_HT5(DMA_TypeDef *DMAx)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CHTIF5);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800239e:	605a      	str	r2, [r3, #4]
}
 80023a0:	bf00      	nop
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <LL_USART_IsActiveFlag_IDLE>:
  * @rmtoll ISR          IDLE          LL_USART_IsActiveFlag_IDLE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_IDLE(const USART_TypeDef *USARTx)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_IDLE) == (USART_ISR_IDLE)) ? 1UL : 0UL);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	f003 0310 	and.w	r3, r3, #16
 80023bc:	2b10      	cmp	r3, #16
 80023be:	d101      	bne.n	80023c4 <LL_USART_IsActiveFlag_IDLE+0x18>
 80023c0:	2301      	movs	r3, #1
 80023c2:	e000      	b.n	80023c6 <LL_USART_IsActiveFlag_IDLE+0x1a>
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr

080023d2 <LL_USART_IsActiveFlag_TC>:
  * @rmtoll ISR          TC            LL_USART_IsActiveFlag_TC
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(const USART_TypeDef *USARTx)
{
 80023d2:	b480      	push	{r7}
 80023d4:	b083      	sub	sp, #12
 80023d6:	af00      	add	r7, sp, #0
 80023d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TC) == (USART_ISR_TC)) ? 1UL : 0UL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b40      	cmp	r3, #64	; 0x40
 80023e4:	d101      	bne.n	80023ea <LL_USART_IsActiveFlag_TC+0x18>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <LL_USART_IsActiveFlag_TC+0x1a>
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <LL_USART_ClearFlag_IDLE>:
  * @rmtoll ICR          IDLECF        LL_USART_ClearFlag_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ClearFlag_IDLE(USART_TypeDef *USARTx)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(USARTx->ICR, USART_ICR_IDLECF);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2210      	movs	r2, #16
 8002404:	621a      	str	r2, [r3, #32]
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr

08002412 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002412:	b480      	push	{r7}
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002416:	e7fe      	b.n	8002416 <NMI_Handler+0x4>

08002418 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002418:	b480      	push	{r7}
 800241a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800241c:	e7fe      	b.n	800241c <HardFault_Handler+0x4>

0800241e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800241e:	b480      	push	{r7}
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002422:	e7fe      	b.n	8002422 <MemManage_Handler+0x4>

08002424 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002428:	e7fe      	b.n	8002428 <BusFault_Handler+0x4>

0800242a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800242e:	e7fe      	b.n	800242e <UsageFault_Handler+0x4>

08002430 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr

0800243e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC4(DMA1) == SET)
 800246c:	480a      	ldr	r0, [pc, #40]	; (8002498 <DMA1_Channel4_IRQHandler+0x30>)
 800246e:	f7ff ff37 	bl	80022e0 <LL_DMA_IsActiveFlag_TC4>
 8002472:	4603      	mov	r3, r0
 8002474:	2b01      	cmp	r3, #1
 8002476:	d10d      	bne.n	8002494 <DMA1_Channel4_IRQHandler+0x2c>
	{
		LL_DMA_ClearFlag_TC4(DMA1);
 8002478:	4807      	ldr	r0, [pc, #28]	; (8002498 <DMA1_Channel4_IRQHandler+0x30>)
 800247a:	f7ff ff6d 	bl	8002358 <LL_DMA_ClearFlag_TC4>

		while(LL_USART_IsActiveFlag_TC(USART1) == RESET);
 800247e:	bf00      	nop
 8002480:	4806      	ldr	r0, [pc, #24]	; (800249c <DMA1_Channel4_IRQHandler+0x34>)
 8002482:	f7ff ffa6 	bl	80023d2 <LL_USART_IsActiveFlag_TC>
 8002486:	4603      	mov	r3, r0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0f9      	beq.n	8002480 <DMA1_Channel4_IRQHandler+0x18>
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_4);
 800248c:	2104      	movs	r1, #4
 800248e:	4802      	ldr	r0, [pc, #8]	; (8002498 <DMA1_Channel4_IRQHandler+0x30>)
 8002490:	f7ff ff06 	bl	80022a0 <LL_DMA_DisableChannel>
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8002494:	bf00      	nop
 8002496:	bd80      	pop	{r7, pc}
 8002498:	40020000 	.word	0x40020000
 800249c:	40013800 	.word	0x40013800

080024a0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */
	if(LL_DMA_IsActiveFlag_TC5(DMA1) == SET)
 80024a4:	480c      	ldr	r0, [pc, #48]	; (80024d8 <DMA1_Channel5_IRQHandler+0x38>)
 80024a6:	f7ff ff2f 	bl	8002308 <LL_DMA_IsActiveFlag_TC5>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d105      	bne.n	80024bc <DMA1_Channel5_IRQHandler+0x1c>
	{
		USART1_CheckDmaReception();
 80024b0:	f000 fcc6 	bl	8002e40 <USART1_CheckDmaReception>
		LL_DMA_ClearFlag_TC5(DMA1);
 80024b4:	4808      	ldr	r0, [pc, #32]	; (80024d8 <DMA1_Channel5_IRQHandler+0x38>)
 80024b6:	f7ff ff5d 	bl	8002374 <LL_DMA_ClearFlag_TC5>
  /* USER CODE END DMA1_Channel5_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80024ba:	e00a      	b.n	80024d2 <DMA1_Channel5_IRQHandler+0x32>
	else if(LL_DMA_IsActiveFlag_HT5(DMA1) == SET)
 80024bc:	4806      	ldr	r0, [pc, #24]	; (80024d8 <DMA1_Channel5_IRQHandler+0x38>)
 80024be:	f7ff ff37 	bl	8002330 <LL_DMA_IsActiveFlag_HT5>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d104      	bne.n	80024d2 <DMA1_Channel5_IRQHandler+0x32>
		USART1_CheckDmaReception();
 80024c8:	f000 fcba 	bl	8002e40 <USART1_CheckDmaReception>
		LL_DMA_ClearFlag_HT5(DMA1);
 80024cc:	4802      	ldr	r0, [pc, #8]	; (80024d8 <DMA1_Channel5_IRQHandler+0x38>)
 80024ce:	f7ff ff5f 	bl	8002390 <LL_DMA_ClearFlag_HT5>
}
 80024d2:	bf00      	nop
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	40020000 	.word	0x40020000

080024dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_IDLE(USART1))
 80024e0:	4806      	ldr	r0, [pc, #24]	; (80024fc <USART1_IRQHandler+0x20>)
 80024e2:	f7ff ff63 	bl	80023ac <LL_USART_IsActiveFlag_IDLE>
 80024e6:	4603      	mov	r3, r0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d004      	beq.n	80024f6 <USART1_IRQHandler+0x1a>
	{
		USART1_CheckDmaReception();
 80024ec:	f000 fca8 	bl	8002e40 <USART1_CheckDmaReception>
		LL_USART_ClearFlag_IDLE(USART1);
 80024f0:	4802      	ldr	r0, [pc, #8]	; (80024fc <USART1_IRQHandler+0x20>)
 80024f2:	f7ff ff81 	bl	80023f8 <LL_USART_ClearFlag_IDLE>
	}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40013800 	.word	0x40013800

08002500 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002500:	b480      	push	{r7}
 8002502:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <SystemInit+0x20>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	4a05      	ldr	r2, [pc, #20]	; (8002520 <SystemInit+0x20>)
 800250c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002514:	bf00      	nop
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <__NVIC_EnableIRQ>:
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	2b00      	cmp	r3, #0
 8002534:	db0b      	blt.n	800254e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002536:	79fb      	ldrb	r3, [r7, #7]
 8002538:	f003 021f 	and.w	r2, r3, #31
 800253c:	4907      	ldr	r1, [pc, #28]	; (800255c <__NVIC_EnableIRQ+0x38>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	095b      	lsrs	r3, r3, #5
 8002544:	2001      	movs	r0, #1
 8002546:	fa00 f202 	lsl.w	r2, r0, r2
 800254a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800254e:	bf00      	nop
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000e100 	.word	0xe000e100

08002560 <__NVIC_SetPriority>:
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	6039      	str	r1, [r7, #0]
 800256a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002570:	2b00      	cmp	r3, #0
 8002572:	db0a      	blt.n	800258a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	b2da      	uxtb	r2, r3
 8002578:	490c      	ldr	r1, [pc, #48]	; (80025ac <__NVIC_SetPriority+0x4c>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	0112      	lsls	r2, r2, #4
 8002580:	b2d2      	uxtb	r2, r2
 8002582:	440b      	add	r3, r1
 8002584:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002588:	e00a      	b.n	80025a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	b2da      	uxtb	r2, r3
 800258e:	4908      	ldr	r1, [pc, #32]	; (80025b0 <__NVIC_SetPriority+0x50>)
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	f003 030f 	and.w	r3, r3, #15
 8002596:	3b04      	subs	r3, #4
 8002598:	0112      	lsls	r2, r2, #4
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	440b      	add	r3, r1
 800259e:	761a      	strb	r2, [r3, #24]
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100
 80025b0:	e000ed00 	.word	0xe000ed00

080025b4 <LL_DMA_EnableChannel>:
{
 80025b4:	b480      	push	{r7}
 80025b6:	b083      	sub	sp, #12
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
 80025bc:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	3b01      	subs	r3, #1
 80025c2:	4a0b      	ldr	r2, [pc, #44]	; (80025f0 <LL_DMA_EnableChannel+0x3c>)
 80025c4:	5cd3      	ldrb	r3, [r2, r3]
 80025c6:	461a      	mov	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4413      	add	r3, r2
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	683a      	ldr	r2, [r7, #0]
 80025d0:	3a01      	subs	r2, #1
 80025d2:	4907      	ldr	r1, [pc, #28]	; (80025f0 <LL_DMA_EnableChannel+0x3c>)
 80025d4:	5c8a      	ldrb	r2, [r1, r2]
 80025d6:	4611      	mov	r1, r2
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	440a      	add	r2, r1
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6013      	str	r3, [r2, #0]
}
 80025e2:	bf00      	nop
 80025e4:	370c      	adds	r7, #12
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	080050bc 	.word	0x080050bc

080025f4 <LL_DMA_DisableChannel>:
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
 80025fc:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_EN);
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	3b01      	subs	r3, #1
 8002602:	4a0b      	ldr	r2, [pc, #44]	; (8002630 <LL_DMA_DisableChannel+0x3c>)
 8002604:	5cd3      	ldrb	r3, [r2, r3]
 8002606:	461a      	mov	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4413      	add	r3, r2
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	3a01      	subs	r2, #1
 8002612:	4907      	ldr	r1, [pc, #28]	; (8002630 <LL_DMA_DisableChannel+0x3c>)
 8002614:	5c8a      	ldrb	r2, [r1, r2]
 8002616:	4611      	mov	r1, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	440a      	add	r2, r1
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6013      	str	r3, [r2, #0]
}
 8002622:	bf00      	nop
 8002624:	370c      	adds	r7, #12
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	080050bc 	.word	0x080050bc

08002634 <LL_DMA_SetDataTransferDirection>:
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	3b01      	subs	r3, #1
 8002644:	4a0d      	ldr	r2, [pc, #52]	; (800267c <LL_DMA_SetDataTransferDirection+0x48>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	461a      	mov	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4413      	add	r3, r2
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002654:	f023 0310 	bic.w	r3, r3, #16
 8002658:	68ba      	ldr	r2, [r7, #8]
 800265a:	3a01      	subs	r2, #1
 800265c:	4907      	ldr	r1, [pc, #28]	; (800267c <LL_DMA_SetDataTransferDirection+0x48>)
 800265e:	5c8a      	ldrb	r2, [r1, r2]
 8002660:	4611      	mov	r1, r2
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	440a      	add	r2, r1
 8002666:	4611      	mov	r1, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	4313      	orrs	r3, r2
 800266c:	600b      	str	r3, [r1, #0]
}
 800266e:	bf00      	nop
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop
 800267c:	080050bc 	.word	0x080050bc

08002680 <LL_DMA_GetDataTransferDirection>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR,
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	3b01      	subs	r3, #1
 800268e:	4a07      	ldr	r2, [pc, #28]	; (80026ac <LL_DMA_GetDataTransferDirection+0x2c>)
 8002690:	5cd3      	ldrb	r3, [r2, r3]
 8002692:	461a      	mov	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4413      	add	r3, r2
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	f244 0310 	movw	r3, #16400	; 0x4010
 800269e:	4013      	ands	r3, r2
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	080050bc 	.word	0x080050bc

080026b0 <LL_DMA_SetMode>:
{
 80026b0:	b480      	push	{r7}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_CIRC,
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	3b01      	subs	r3, #1
 80026c0:	4a0c      	ldr	r2, [pc, #48]	; (80026f4 <LL_DMA_SetMode+0x44>)
 80026c2:	5cd3      	ldrb	r3, [r2, r3]
 80026c4:	461a      	mov	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	4413      	add	r3, r2
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f023 0220 	bic.w	r2, r3, #32
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	3b01      	subs	r3, #1
 80026d4:	4907      	ldr	r1, [pc, #28]	; (80026f4 <LL_DMA_SetMode+0x44>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	4619      	mov	r1, r3
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	440b      	add	r3, r1
 80026de:	4619      	mov	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]
}
 80026e6:	bf00      	nop
 80026e8:	3714      	adds	r7, #20
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr
 80026f2:	bf00      	nop
 80026f4:	080050bc 	.word	0x080050bc

080026f8 <LL_DMA_SetPeriphIncMode>:
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PINC,
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	3b01      	subs	r3, #1
 8002708:	4a0c      	ldr	r2, [pc, #48]	; (800273c <LL_DMA_SetPeriphIncMode+0x44>)
 800270a:	5cd3      	ldrb	r3, [r2, r3]
 800270c:	461a      	mov	r2, r3
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	4413      	add	r3, r2
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	3b01      	subs	r3, #1
 800271c:	4907      	ldr	r1, [pc, #28]	; (800273c <LL_DMA_SetPeriphIncMode+0x44>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	4619      	mov	r1, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	440b      	add	r3, r1
 8002726:	4619      	mov	r1, r3
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
}
 800272e:	bf00      	nop
 8002730:	3714      	adds	r7, #20
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	080050bc 	.word	0x080050bc

08002740 <LL_DMA_SetMemoryIncMode>:
{
 8002740:	b480      	push	{r7}
 8002742:	b085      	sub	sp, #20
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MINC,
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	3b01      	subs	r3, #1
 8002750:	4a0c      	ldr	r2, [pc, #48]	; (8002784 <LL_DMA_SetMemoryIncMode+0x44>)
 8002752:	5cd3      	ldrb	r3, [r2, r3]
 8002754:	461a      	mov	r2, r3
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4413      	add	r3, r2
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	3b01      	subs	r3, #1
 8002764:	4907      	ldr	r1, [pc, #28]	; (8002784 <LL_DMA_SetMemoryIncMode+0x44>)
 8002766:	5ccb      	ldrb	r3, [r1, r3]
 8002768:	4619      	mov	r1, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	440b      	add	r3, r1
 800276e:	4619      	mov	r1, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4313      	orrs	r3, r2
 8002774:	600b      	str	r3, [r1, #0]
}
 8002776:	bf00      	nop
 8002778:	3714      	adds	r7, #20
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	080050bc 	.word	0x080050bc

08002788 <LL_DMA_SetPeriphSize>:
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	60f8      	str	r0, [r7, #12]
 8002790:	60b9      	str	r1, [r7, #8]
 8002792:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PSIZE,
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	3b01      	subs	r3, #1
 8002798:	4a0c      	ldr	r2, [pc, #48]	; (80027cc <LL_DMA_SetPeriphSize+0x44>)
 800279a:	5cd3      	ldrb	r3, [r2, r3]
 800279c:	461a      	mov	r2, r3
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4413      	add	r3, r2
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	4907      	ldr	r1, [pc, #28]	; (80027cc <LL_DMA_SetPeriphSize+0x44>)
 80027ae:	5ccb      	ldrb	r3, [r1, r3]
 80027b0:	4619      	mov	r1, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	440b      	add	r3, r1
 80027b6:	4619      	mov	r1, r3
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	600b      	str	r3, [r1, #0]
}
 80027be:	bf00      	nop
 80027c0:	3714      	adds	r7, #20
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	080050bc 	.word	0x080050bc

080027d0 <LL_DMA_SetMemorySize>:
{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	60b9      	str	r1, [r7, #8]
 80027da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_MSIZE,
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	3b01      	subs	r3, #1
 80027e0:	4a0c      	ldr	r2, [pc, #48]	; (8002814 <LL_DMA_SetMemorySize+0x44>)
 80027e2:	5cd3      	ldrb	r3, [r2, r3]
 80027e4:	461a      	mov	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	4413      	add	r3, r2
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	3b01      	subs	r3, #1
 80027f4:	4907      	ldr	r1, [pc, #28]	; (8002814 <LL_DMA_SetMemorySize+0x44>)
 80027f6:	5ccb      	ldrb	r3, [r1, r3]
 80027f8:	4619      	mov	r1, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	440b      	add	r3, r1
 80027fe:	4619      	mov	r1, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]
}
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	080050bc 	.word	0x080050bc

08002818 <LL_DMA_SetChannelPriorityLevel>:
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_PL,
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	3b01      	subs	r3, #1
 8002828:	4a0c      	ldr	r2, [pc, #48]	; (800285c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	461a      	mov	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	4413      	add	r3, r2
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	3b01      	subs	r3, #1
 800283c:	4907      	ldr	r1, [pc, #28]	; (800285c <LL_DMA_SetChannelPriorityLevel+0x44>)
 800283e:	5ccb      	ldrb	r3, [r1, r3]
 8002840:	4619      	mov	r1, r3
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	440b      	add	r3, r1
 8002846:	4619      	mov	r1, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	4313      	orrs	r3, r2
 800284c:	600b      	str	r3, [r1, #0]
}
 800284e:	bf00      	nop
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	080050bc 	.word	0x080050bc

08002860 <LL_DMA_SetDataLength>:
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	3b01      	subs	r3, #1
 8002870:	4a0c      	ldr	r2, [pc, #48]	; (80028a4 <LL_DMA_SetDataLength+0x44>)
 8002872:	5cd3      	ldrb	r3, [r2, r3]
 8002874:	461a      	mov	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4413      	add	r3, r2
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	0c1b      	lsrs	r3, r3, #16
 800287e:	041b      	lsls	r3, r3, #16
 8002880:	68ba      	ldr	r2, [r7, #8]
 8002882:	3a01      	subs	r2, #1
 8002884:	4907      	ldr	r1, [pc, #28]	; (80028a4 <LL_DMA_SetDataLength+0x44>)
 8002886:	5c8a      	ldrb	r2, [r1, r2]
 8002888:	4611      	mov	r1, r2
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	440a      	add	r2, r1
 800288e:	4611      	mov	r1, r2
 8002890:	687a      	ldr	r2, [r7, #4]
 8002892:	4313      	orrs	r3, r2
 8002894:	604b      	str	r3, [r1, #4]
}
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
 80028a2:	bf00      	nop
 80028a4:	080050bc 	.word	0x080050bc

080028a8 <LL_DMA_GetDataLength>:
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	6039      	str	r1, [r7, #0]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CNDTR,
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	3b01      	subs	r3, #1
 80028b6:	4a06      	ldr	r2, [pc, #24]	; (80028d0 <LL_DMA_GetDataLength+0x28>)
 80028b8:	5cd3      	ldrb	r3, [r2, r3]
 80028ba:	461a      	mov	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4413      	add	r3, r2
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	b29b      	uxth	r3, r3
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	370c      	adds	r7, #12
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	080050bc 	.word	0x080050bc

080028d4 <LL_DMA_ConfigAddresses>:
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	603b      	str	r3, [r7, #0]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80028e2:	69bb      	ldr	r3, [r7, #24]
 80028e4:	2b10      	cmp	r3, #16
 80028e6:	d114      	bne.n	8002912 <LL_DMA_ConfigAddresses+0x3e>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, SrcAddress);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	4a16      	ldr	r2, [pc, #88]	; (8002948 <LL_DMA_ConfigAddresses+0x74>)
 80028ee:	5cd3      	ldrb	r3, [r2, r3]
 80028f0:	461a      	mov	r2, r3
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	4413      	add	r3, r2
 80028f6:	461a      	mov	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, DstAddress);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	3b01      	subs	r3, #1
 8002900:	4a11      	ldr	r2, [pc, #68]	; (8002948 <LL_DMA_ConfigAddresses+0x74>)
 8002902:	5cd3      	ldrb	r3, [r2, r3]
 8002904:	461a      	mov	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	461a      	mov	r2, r3
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	6093      	str	r3, [r2, #8]
}
 8002910:	e013      	b.n	800293a <LL_DMA_ConfigAddresses+0x66>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, SrcAddress);
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3b01      	subs	r3, #1
 8002916:	4a0c      	ldr	r2, [pc, #48]	; (8002948 <LL_DMA_ConfigAddresses+0x74>)
 8002918:	5cd3      	ldrb	r3, [r2, r3]
 800291a:	461a      	mov	r2, r3
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	4413      	add	r3, r2
 8002920:	461a      	mov	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, DstAddress);
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	3b01      	subs	r3, #1
 800292a:	4a07      	ldr	r2, [pc, #28]	; (8002948 <LL_DMA_ConfigAddresses+0x74>)
 800292c:	5cd3      	ldrb	r3, [r2, r3]
 800292e:	461a      	mov	r2, r3
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4413      	add	r3, r2
 8002934:	461a      	mov	r2, r3
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	60d3      	str	r3, [r2, #12]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	080050bc 	.word	0x080050bc

0800294c <LL_DMA_SetMemoryAddress>:
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CMAR, MemoryAddress);
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	3b01      	subs	r3, #1
 800295c:	4a06      	ldr	r2, [pc, #24]	; (8002978 <LL_DMA_SetMemoryAddress+0x2c>)
 800295e:	5cd3      	ldrb	r3, [r2, r3]
 8002960:	461a      	mov	r2, r3
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	461a      	mov	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	60d3      	str	r3, [r2, #12]
}
 800296c:	bf00      	nop
 800296e:	3714      	adds	r7, #20
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	080050bc 	.word	0x080050bc

0800297c <LL_DMA_SetPeriphAddress>:
{
 800297c:	b480      	push	{r7}
 800297e:	b085      	sub	sp, #20
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CPAR, PeriphAddress);
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	3b01      	subs	r3, #1
 800298c:	4a06      	ldr	r2, [pc, #24]	; (80029a8 <LL_DMA_SetPeriphAddress+0x2c>)
 800298e:	5cd3      	ldrb	r3, [r2, r3]
 8002990:	461a      	mov	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4413      	add	r3, r2
 8002996:	461a      	mov	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6093      	str	r3, [r2, #8]
}
 800299c:	bf00      	nop
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	080050bc 	.word	0x080050bc

080029ac <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TCIE);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	4a0b      	ldr	r2, [pc, #44]	; (80029e8 <LL_DMA_EnableIT_TC+0x3c>)
 80029bc:	5cd3      	ldrb	r3, [r2, r3]
 80029be:	461a      	mov	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4413      	add	r3, r2
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	683a      	ldr	r2, [r7, #0]
 80029c8:	3a01      	subs	r2, #1
 80029ca:	4907      	ldr	r1, [pc, #28]	; (80029e8 <LL_DMA_EnableIT_TC+0x3c>)
 80029cc:	5c8a      	ldrb	r2, [r1, r2]
 80029ce:	4611      	mov	r1, r2
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	440a      	add	r2, r1
 80029d4:	f043 0302 	orr.w	r3, r3, #2
 80029d8:	6013      	str	r3, [r2, #0]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
 80029e6:	bf00      	nop
 80029e8:	080050bc 	.word	0x080050bc

080029ec <LL_DMA_EnableIT_HT>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_HT(DMA_TypeDef *DMAx, uint32_t Channel)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
 80029f4:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_HTIE);
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	3b01      	subs	r3, #1
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <LL_DMA_EnableIT_HT+0x3c>)
 80029fc:	5cd3      	ldrb	r3, [r2, r3]
 80029fe:	461a      	mov	r2, r3
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4413      	add	r3, r2
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	3a01      	subs	r2, #1
 8002a0a:	4907      	ldr	r1, [pc, #28]	; (8002a28 <LL_DMA_EnableIT_HT+0x3c>)
 8002a0c:	5c8a      	ldrb	r2, [r1, r2]
 8002a0e:	4611      	mov	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	440a      	add	r2, r1
 8002a14:	f043 0304 	orr.w	r3, r3, #4
 8002a18:	6013      	str	r3, [r2, #0]
}
 8002a1a:	bf00      	nop
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	080050bc 	.word	0x080050bc

08002a2c <LL_DMA_EnableIT_TE>:
  *         @arg @ref LL_DMA_CHANNEL_6
  *         @arg @ref LL_DMA_CHANNEL_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TE(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b083      	sub	sp, #12
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
 8002a34:	6039      	str	r1, [r7, #0]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)((uint32_t)DMAx + CHANNEL_OFFSET_TAB[Channel - 1U])))->CCR, DMA_CCR_TEIE);
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	4a0b      	ldr	r2, [pc, #44]	; (8002a68 <LL_DMA_EnableIT_TE+0x3c>)
 8002a3c:	5cd3      	ldrb	r3, [r2, r3]
 8002a3e:	461a      	mov	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4413      	add	r3, r2
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	683a      	ldr	r2, [r7, #0]
 8002a48:	3a01      	subs	r2, #1
 8002a4a:	4907      	ldr	r1, [pc, #28]	; (8002a68 <LL_DMA_EnableIT_TE+0x3c>)
 8002a4c:	5c8a      	ldrb	r2, [r1, r2]
 8002a4e:	4611      	mov	r1, r2
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	440a      	add	r2, r1
 8002a54:	f043 0308 	orr.w	r3, r3, #8
 8002a58:	6013      	str	r3, [r2, #0]
}
 8002a5a:	bf00      	nop
 8002a5c:	370c      	adds	r7, #12
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a64:	4770      	bx	lr
 8002a66:	bf00      	nop
 8002a68:	080050bc 	.word	0x080050bc

08002a6c <LL_AHB1_GRP1_EnableClock>:
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8002a74:	4b08      	ldr	r3, [pc, #32]	; (8002a98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	4907      	ldr	r1, [pc, #28]	; (8002a98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002a82:	695a      	ldr	r2, [r3, #20]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4013      	ands	r3, r2
 8002a88:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
}
 8002a8c:	bf00      	nop
 8002a8e:	3714      	adds	r7, #20
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	40021000 	.word	0x40021000

08002a9c <LL_APB2_GRP1_EnableClock>:
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b085      	sub	sp, #20
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002aa4:	4b08      	ldr	r3, [pc, #32]	; (8002ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002aa6:	699a      	ldr	r2, [r3, #24]
 8002aa8:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	618b      	str	r3, [r1, #24]
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002ab0:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002ab2:	699a      	ldr	r2, [r3, #24]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002aba:	68fb      	ldr	r3, [r7, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr
 8002ac8:	40021000 	.word	0x40021000

08002acc <LL_USART_Enable>:
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f043 0201 	orr.w	r2, r3, #1
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	601a      	str	r2, [r3, #0]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <LL_USART_ConfigAsyncMode>:
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	609a      	str	r2, [r3, #8]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_USART_EnableIT_IDLE>:
  * @rmtoll CR1          IDLEIE        LL_USART_EnableIT_IDLE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_IDLE(USART_TypeDef *USARTx)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b089      	sub	sp, #36	; 0x24
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	e853 3f00 	ldrex	r3, [r3]
 8002b2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	f043 0310 	orr.w	r3, r3, #16
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	69fa      	ldr	r2, [r7, #28]
 8002b38:	61ba      	str	r2, [r7, #24]
 8002b3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b3c:	6979      	ldr	r1, [r7, #20]
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	e841 2300 	strex	r3, r2, [r1]
 8002b44:	613b      	str	r3, [r7, #16]
   return(result);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d1e9      	bne.n	8002b20 <LL_USART_EnableIT_IDLE+0x8>
}
 8002b4c:	bf00      	nop
 8002b4e:	bf00      	nop
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <LL_USART_DisableIT_CTS>:
  * @rmtoll CR3          CTSIE         LL_USART_DisableIT_CTS
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableIT_CTS(USART_TypeDef *USARTx)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b089      	sub	sp, #36	; 0x24
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	3308      	adds	r3, #8
 8002b66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	e853 3f00 	ldrex	r3, [r3]
 8002b6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3308      	adds	r3, #8
 8002b7c:	69fa      	ldr	r2, [r7, #28]
 8002b7e:	61ba      	str	r2, [r7, #24]
 8002b80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	6979      	ldr	r1, [r7, #20]
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	e841 2300 	strex	r3, r2, [r1]
 8002b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d1e7      	bne.n	8002b62 <LL_USART_DisableIT_CTS+0x8>
}
 8002b92:	bf00      	nop
 8002b94:	bf00      	nop
 8002b96:	3724      	adds	r7, #36	; 0x24
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr

08002ba0 <LL_USART_EnableDMAReq_RX>:
  * @rmtoll CR3          DMAR          LL_USART_EnableDMAReq_RX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_RX(USART_TypeDef *USARTx)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	3308      	adds	r3, #8
 8002bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bb6:	68bb      	ldr	r3, [r7, #8]
 8002bb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002bbc:	61fb      	str	r3, [r7, #28]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3308      	adds	r3, #8
 8002bc2:	69fa      	ldr	r2, [r7, #28]
 8002bc4:	61ba      	str	r2, [r7, #24]
 8002bc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc8:	6979      	ldr	r1, [r7, #20]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	e841 2300 	strex	r3, r2, [r1]
 8002bd0:	613b      	str	r3, [r7, #16]
   return(result);
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d1e7      	bne.n	8002ba8 <LL_USART_EnableDMAReq_RX+0x8>
}
 8002bd8:	bf00      	nop
 8002bda:	bf00      	nop
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <LL_USART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_USART_EnableDMAReq_TX
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableDMAReq_TX(USART_TypeDef *USARTx)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b089      	sub	sp, #36	; 0x24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	e853 3f00 	ldrex	r3, [r3]
 8002bfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c02:	61fb      	str	r3, [r7, #28]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3308      	adds	r3, #8
 8002c08:	69fa      	ldr	r2, [r7, #28]
 8002c0a:	61ba      	str	r2, [r7, #24]
 8002c0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0e:	6979      	ldr	r1, [r7, #20]
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	e841 2300 	strex	r3, r2, [r1]
 8002c16:	613b      	str	r3, [r7, #16]
   return(result);
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1e7      	bne.n	8002bee <LL_USART_EnableDMAReq_TX+0x8>
}
 8002c1e:	bf00      	nop
 8002c20:	bf00      	nop
 8002c22:	3724      	adds	r7, #36	; 0x24
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <LL_USART_DMA_GetRegAddr>:
  *         @arg @ref LL_USART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_USART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_USART_DMA_GetRegAddr(const USART_TypeDef *USARTx, uint32_t Direction)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_USART_DMA_REG_DATA_TRANSMIT)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d103      	bne.n	8002c44 <LL_USART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(USARTx->TDR);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	3328      	adds	r3, #40	; 0x28
 8002c40:	60fb      	str	r3, [r7, #12]
 8002c42:	e002      	b.n	8002c4a <LL_USART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(USARTx->RDR);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	3324      	adds	r3, #36	; 0x24
 8002c48:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <USART1_RegisterCallback>:
/* Declaration and initialization of callback function */
static void (* USART1_ProcessData)(uint8_t data) = 0;

/* Register callback */
void USART1_RegisterCallback(void *callback)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b083      	sub	sp, #12
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	if(callback != 0)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d002      	beq.n	8002c6c <USART1_RegisterCallback+0x14>
	{
		USART1_ProcessData = callback;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a03      	ldr	r2, [pc, #12]	; (8002c78 <USART1_RegisterCallback+0x20>)
 8002c6a:	6013      	str	r3, [r2, #0]
	}
}
 8002c6c:	bf00      	nop
 8002c6e:	370c      	adds	r7, #12
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	20000578 	.word	0x20000578

08002c7c <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c7c:	b5b0      	push	{r4, r5, r7, lr}
 8002c7e:	b090      	sub	sp, #64	; 0x40
 8002c80:	af02      	add	r7, sp, #8
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002c82:	f107 031c 	add.w	r3, r7, #28
 8002c86:	2200      	movs	r2, #0
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	605a      	str	r2, [r3, #4]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	60da      	str	r2, [r3, #12]
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	615a      	str	r2, [r3, #20]
 8002c94:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c96:	1d3b      	adds	r3, r7, #4
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	605a      	str	r2, [r3, #4]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	60da      	str	r2, [r3, #12]
 8002ca2:	611a      	str	r2, [r3, #16]
 8002ca4:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8002ca6:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002caa:	f7ff fef7 	bl	8002a9c <LL_APB2_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8002cae:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002cb2:	f7ff fedb 	bl	8002a6c <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration
  PA2   ------> USART1_TX
  PA15   ------> USART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8002cb6:	2330      	movs	r3, #48	; 0x30
 8002cb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002cba:	2302      	movs	r3, #2
 8002cbc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002cca:	2307      	movs	r3, #7
 8002ccc:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002cce:	1d3b      	adds	r3, r7, #4
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4857      	ldr	r0, [pc, #348]	; (8002e30 <MX_USART1_UART_Init+0x1b4>)
 8002cd4:	f000 fa48 	bl	8003168 <LL_GPIO_Init>
   * Rx memory buffer will be handled in normal mode, not circular!
   * You can use configuration from example program and modify it.
   * For more information about DMA registers, refer to reference manual.
   */

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8002cd8:	2200      	movs	r2, #0
 8002cda:	2105      	movs	r1, #5
 8002cdc:	4855      	ldr	r0, [pc, #340]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002cde:	f7ff fca9 	bl	8002634 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PRIORITY_MEDIUM);
 8002ce2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ce6:	2105      	movs	r1, #5
 8002ce8:	4852      	ldr	r0, [pc, #328]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002cea:	f7ff fd95 	bl	8002818 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MODE_NORMAL);
 8002cee:	2200      	movs	r2, #0
 8002cf0:	2105      	movs	r1, #5
 8002cf2:	4850      	ldr	r0, [pc, #320]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002cf4:	f7ff fcdc 	bl	80026b0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PERIPH_NOINCREMENT);
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2105      	movs	r1, #5
 8002cfc:	484d      	ldr	r0, [pc, #308]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002cfe:	f7ff fcfb 	bl	80026f8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MEMORY_INCREMENT);
 8002d02:	2280      	movs	r2, #128	; 0x80
 8002d04:	2105      	movs	r1, #5
 8002d06:	484b      	ldr	r0, [pc, #300]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d08:	f7ff fd1a 	bl	8002740 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_PDATAALIGN_BYTE);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2105      	movs	r1, #5
 8002d10:	4848      	ldr	r0, [pc, #288]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d12:	f7ff fd39 	bl	8002788 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_5, LL_DMA_MDATAALIGN_BYTE);
 8002d16:	2200      	movs	r2, #0
 8002d18:	2105      	movs	r1, #5
 8002d1a:	4846      	ldr	r0, [pc, #280]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d1c:	f7ff fd58 	bl	80027d0 <LL_DMA_SetMemorySize>

  LL_DMA_ConfigAddresses(	DMA1, LL_DMA_CHANNEL_5,
 8002d20:	2101      	movs	r1, #1
 8002d22:	4845      	ldr	r0, [pc, #276]	; (8002e38 <MX_USART1_UART_Init+0x1bc>)
 8002d24:	f7ff ff82 	bl	8002c2c <LL_USART_DMA_GetRegAddr>
 8002d28:	4604      	mov	r4, r0
 8002d2a:	4d44      	ldr	r5, [pc, #272]	; (8002e3c <MX_USART1_UART_Init+0x1c0>)
 8002d2c:	2105      	movs	r1, #5
 8002d2e:	4841      	ldr	r0, [pc, #260]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d30:	f7ff fca6 	bl	8002680 <LL_DMA_GetDataTransferDirection>
 8002d34:	4603      	mov	r3, r0
 8002d36:	9300      	str	r3, [sp, #0]
 8002d38:	462b      	mov	r3, r5
 8002d3a:	4622      	mov	r2, r4
 8002d3c:	2105      	movs	r1, #5
 8002d3e:	483d      	ldr	r0, [pc, #244]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d40:	f7ff fdc8 	bl	80028d4 <LL_DMA_ConfigAddresses>
						 	LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_RECEIVE),
							(uint32_t)bufferUSART1dma,
							LL_DMA_GetDataTransferDirection(DMA1, LL_DMA_CHANNEL_5));

  LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, DMA_USART1_BUFFER_SIZE);
 8002d44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d48:	2105      	movs	r1, #5
 8002d4a:	483a      	ldr	r0, [pc, #232]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d4c:	f7ff fd88 	bl	8002860 <LL_DMA_SetDataLength>
  LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8002d50:	2105      	movs	r1, #5
 8002d52:	4838      	ldr	r0, [pc, #224]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d54:	f7ff fc2e 	bl	80025b4 <LL_DMA_EnableChannel>
  LL_USART_EnableDMAReq_RX(USART1);
 8002d58:	4837      	ldr	r0, [pc, #220]	; (8002e38 <MX_USART1_UART_Init+0x1bc>)
 8002d5a:	f7ff ff21 	bl	8002ba0 <LL_USART_EnableDMAReq_RX>

  LL_DMA_EnableIT_TC(DMA1, LL_DMA_CHANNEL_5);
 8002d5e:	2105      	movs	r1, #5
 8002d60:	4834      	ldr	r0, [pc, #208]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d62:	f7ff fe23 	bl	80029ac <LL_DMA_EnableIT_TC>
  LL_DMA_EnableIT_HT(DMA1, LL_DMA_CHANNEL_5);
 8002d66:	2105      	movs	r1, #5
 8002d68:	4832      	ldr	r0, [pc, #200]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d6a:	f7ff fe3f 	bl	80029ec <LL_DMA_EnableIT_HT>

  /* USART1_TX Init */
  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 8002d6e:	2210      	movs	r2, #16
 8002d70:	2104      	movs	r1, #4
 8002d72:	4830      	ldr	r0, [pc, #192]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d74:	f7ff fc5e 	bl	8002634 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_MEDIUM);
 8002d78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002d7c:	2104      	movs	r1, #4
 8002d7e:	482d      	ldr	r0, [pc, #180]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d80:	f7ff fd4a 	bl	8002818 <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 8002d84:	2200      	movs	r2, #0
 8002d86:	2104      	movs	r1, #4
 8002d88:	482a      	ldr	r0, [pc, #168]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d8a:	f7ff fc91 	bl	80026b0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 8002d8e:	2200      	movs	r2, #0
 8002d90:	2104      	movs	r1, #4
 8002d92:	4828      	ldr	r0, [pc, #160]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d94:	f7ff fcb0 	bl	80026f8 <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 8002d98:	2280      	movs	r2, #128	; 0x80
 8002d9a:	2104      	movs	r1, #4
 8002d9c:	4825      	ldr	r0, [pc, #148]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002d9e:	f7ff fccf 	bl	8002740 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8002da2:	2200      	movs	r2, #0
 8002da4:	2104      	movs	r1, #4
 8002da6:	4823      	ldr	r0, [pc, #140]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002da8:	f7ff fcee 	bl	8002788 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 8002dac:	2200      	movs	r2, #0
 8002dae:	2104      	movs	r1, #4
 8002db0:	4820      	ldr	r0, [pc, #128]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002db2:	f7ff fd0d 	bl	80027d0 <LL_DMA_SetMemorySize>

  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_CHANNEL_4, LL_USART_DMA_GetRegAddr(USART1, LL_USART_DMA_REG_DATA_TRANSMIT));
 8002db6:	2100      	movs	r1, #0
 8002db8:	481f      	ldr	r0, [pc, #124]	; (8002e38 <MX_USART1_UART_Init+0x1bc>)
 8002dba:	f7ff ff37 	bl	8002c2c <LL_USART_DMA_GetRegAddr>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	461a      	mov	r2, r3
 8002dc2:	2104      	movs	r1, #4
 8002dc4:	481b      	ldr	r0, [pc, #108]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002dc6:	f7ff fdd9 	bl	800297c <LL_DMA_SetPeriphAddress>
  LL_USART_EnableDMAReq_TX(USART1);
 8002dca:	481b      	ldr	r0, [pc, #108]	; (8002e38 <MX_USART1_UART_Init+0x1bc>)
 8002dcc:	f7ff ff0b 	bl	8002be6 <LL_USART_EnableDMAReq_TX>

  LL_DMA_EnableIT_TE(DMA1, LL_DMA_CHANNEL_4);
 8002dd0:	2104      	movs	r1, #4
 8002dd2:	4818      	ldr	r0, [pc, #96]	; (8002e34 <MX_USART1_UART_Init+0x1b8>)
 8002dd4:	f7ff fe2a 	bl	8002a2c <LL_DMA_EnableIT_TE>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, 0);
 8002dd8:	2100      	movs	r1, #0
 8002dda:	2025      	movs	r0, #37	; 0x25
 8002ddc:	f7ff fbc0 	bl	8002560 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8002de0:	2025      	movs	r0, #37	; 0x25
 8002de2:	f7ff fb9f 	bl	8002524 <__NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = 9600;
 8002de6:	f44f 5316 	mov.w	r3, #9600	; 0x2580
 8002dea:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002dec:	2300      	movs	r3, #0
 8002dee:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002df0:	2300      	movs	r3, #0
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002df4:	2300      	movs	r3, #0
 8002df6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002df8:	230c      	movs	r3, #12
 8002dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8002e00:	2300      	movs	r3, #0
 8002e02:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART1, &USART_InitStruct);
 8002e04:	f107 031c 	add.w	r3, r7, #28
 8002e08:	4619      	mov	r1, r3
 8002e0a:	480b      	ldr	r0, [pc, #44]	; (8002e38 <MX_USART1_UART_Init+0x1bc>)
 8002e0c:	f000 fc32 	bl	8003674 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART1);
 8002e10:	4809      	ldr	r0, [pc, #36]	; (8002e38 <MX_USART1_UART_Init+0x1bc>)
 8002e12:	f7ff fe6b 	bl	8002aec <LL_USART_ConfigAsyncMode>
  LL_USART_DisableIT_CTS(USART1);
 8002e16:	4808      	ldr	r0, [pc, #32]	; (8002e38 <MX_USART1_UART_Init+0x1bc>)
 8002e18:	f7ff fe9f 	bl	8002b5a <LL_USART_DisableIT_CTS>

  /* Enable USART1 peripheral and interrupts*/
  LL_USART_EnableIT_IDLE(USART1);
 8002e1c:	4806      	ldr	r0, [pc, #24]	; (8002e38 <MX_USART1_UART_Init+0x1bc>)
 8002e1e:	f7ff fe7b 	bl	8002b18 <LL_USART_EnableIT_IDLE>
  LL_USART_Enable(USART1);
 8002e22:	4805      	ldr	r0, [pc, #20]	; (8002e38 <MX_USART1_UART_Init+0x1bc>)
 8002e24:	f7ff fe52 	bl	8002acc <LL_USART_Enable>
  	  //type your code here:
}
 8002e28:	bf00      	nop
 8002e2a:	3738      	adds	r7, #56	; 0x38
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e30:	48000800 	.word	0x48000800
 8002e34:	40020000 	.word	0x40020000
 8002e38:	40013800 	.word	0x40013800
 8002e3c:	20000378 	.word	0x20000378

08002e40 <USART1_CheckDmaReception>:

/* USER CODE BEGIN 1 */
uint16_t buf_read_pos = 0;

void USART1_CheckDmaReception(void)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
	uint16_t pos = DMA_USART1_BUFFER_SIZE - LL_DMA_GetDataLength(DMA1, LL_DMA_CHANNEL_5);
 8002e46:	2105      	movs	r1, #5
 8002e48:	482c      	ldr	r0, [pc, #176]	; (8002efc <USART1_CheckDmaReception+0xbc>)
 8002e4a:	f7ff fd2d 	bl	80028a8 <LL_DMA_GetDataLength>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8002e56:	80fb      	strh	r3, [r7, #6]

	if (pos >= DMA_USART1_BUFFER_SIZE)
 8002e58:	88fb      	ldrh	r3, [r7, #6]
 8002e5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e5e:	d343      	bcc.n	8002ee8 <USART1_CheckDmaReception+0xa8>
	{
		// set the DMA address pointer back to the beginning of the buffer
		LL_DMA_DisableChannel(DMA1, LL_DMA_CHANNEL_5);
 8002e60:	2105      	movs	r1, #5
 8002e62:	4826      	ldr	r0, [pc, #152]	; (8002efc <USART1_CheckDmaReception+0xbc>)
 8002e64:	f7ff fbc6 	bl	80025f4 <LL_DMA_DisableChannel>
		LL_DMA_SetMemoryAddress(DMA1, LL_DMA_CHANNEL_5, (uint32_t)bufferUSART1dma);
 8002e68:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <USART1_CheckDmaReception+0xc0>)
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	2105      	movs	r1, #5
 8002e6e:	4823      	ldr	r0, [pc, #140]	; (8002efc <USART1_CheckDmaReception+0xbc>)
 8002e70:	f7ff fd6c 	bl	800294c <LL_DMA_SetMemoryAddress>
		LL_DMA_SetDataLength(DMA1, LL_DMA_CHANNEL_5, DMA_USART1_BUFFER_SIZE);
 8002e74:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002e78:	2105      	movs	r1, #5
 8002e7a:	4820      	ldr	r0, [pc, #128]	; (8002efc <USART1_CheckDmaReception+0xbc>)
 8002e7c:	f7ff fcf0 	bl	8002860 <LL_DMA_SetDataLength>
		LL_DMA_EnableChannel(DMA1, LL_DMA_CHANNEL_5);
 8002e80:	2105      	movs	r1, #5
 8002e82:	481e      	ldr	r0, [pc, #120]	; (8002efc <USART1_CheckDmaReception+0xbc>)
 8002e84:	f7ff fb96 	bl	80025b4 <LL_DMA_EnableChannel>

		// process all data until the end of the buffer
		while(buf_read_pos < DMA_USART1_BUFFER_SIZE)
 8002e88:	e012      	b.n	8002eb0 <USART1_CheckDmaReception+0x70>
		{
			if(USART1_ProcessData != 0)
 8002e8a:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <USART1_CheckDmaReception+0xc4>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d008      	beq.n	8002ea4 <USART1_CheckDmaReception+0x64>
			{
				USART1_ProcessData(bufferUSART1dma[buf_read_pos]);
 8002e92:	4b1c      	ldr	r3, [pc, #112]	; (8002f04 <USART1_CheckDmaReception+0xc4>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a1c      	ldr	r2, [pc, #112]	; (8002f08 <USART1_CheckDmaReception+0xc8>)
 8002e98:	8812      	ldrh	r2, [r2, #0]
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	4a18      	ldr	r2, [pc, #96]	; (8002f00 <USART1_CheckDmaReception+0xc0>)
 8002e9e:	5c52      	ldrb	r2, [r2, r1]
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4798      	blx	r3
//				if(bufferUSART1dma[buf_read_pos] > 15)
//					handle_display(bufferUSART1dma[buf_read_pos]);
			}
			buf_read_pos++;
 8002ea4:	4b18      	ldr	r3, [pc, #96]	; (8002f08 <USART1_CheckDmaReception+0xc8>)
 8002ea6:	881b      	ldrh	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	b29a      	uxth	r2, r3
 8002eac:	4b16      	ldr	r3, [pc, #88]	; (8002f08 <USART1_CheckDmaReception+0xc8>)
 8002eae:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < DMA_USART1_BUFFER_SIZE)
 8002eb0:	4b15      	ldr	r3, [pc, #84]	; (8002f08 <USART1_CheckDmaReception+0xc8>)
 8002eb2:	881b      	ldrh	r3, [r3, #0]
 8002eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb8:	d3e7      	bcc.n	8002e8a <USART1_CheckDmaReception+0x4a>
		}

		buf_read_pos = 0;
 8002eba:	4b13      	ldr	r3, [pc, #76]	; (8002f08 <USART1_CheckDmaReception+0xc8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	801a      	strh	r2, [r3, #0]
//					handle_display(bufferUSART1dma[buf_read_pos]);
			}
			buf_read_pos++;
		}
	}
}
 8002ec0:	e017      	b.n	8002ef2 <USART1_CheckDmaReception+0xb2>
			if(USART1_ProcessData != 0)
 8002ec2:	4b10      	ldr	r3, [pc, #64]	; (8002f04 <USART1_CheckDmaReception+0xc4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d008      	beq.n	8002edc <USART1_CheckDmaReception+0x9c>
				USART1_ProcessData(bufferUSART1dma[buf_read_pos]);
 8002eca:	4b0e      	ldr	r3, [pc, #56]	; (8002f04 <USART1_CheckDmaReception+0xc4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a0e      	ldr	r2, [pc, #56]	; (8002f08 <USART1_CheckDmaReception+0xc8>)
 8002ed0:	8812      	ldrh	r2, [r2, #0]
 8002ed2:	4611      	mov	r1, r2
 8002ed4:	4a0a      	ldr	r2, [pc, #40]	; (8002f00 <USART1_CheckDmaReception+0xc0>)
 8002ed6:	5c52      	ldrb	r2, [r2, r1]
 8002ed8:	4610      	mov	r0, r2
 8002eda:	4798      	blx	r3
			buf_read_pos++;
 8002edc:	4b0a      	ldr	r3, [pc, #40]	; (8002f08 <USART1_CheckDmaReception+0xc8>)
 8002ede:	881b      	ldrh	r3, [r3, #0]
 8002ee0:	3301      	adds	r3, #1
 8002ee2:	b29a      	uxth	r2, r3
 8002ee4:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <USART1_CheckDmaReception+0xc8>)
 8002ee6:	801a      	strh	r2, [r3, #0]
		while(buf_read_pos < pos)
 8002ee8:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <USART1_CheckDmaReception+0xc8>)
 8002eea:	881b      	ldrh	r3, [r3, #0]
 8002eec:	88fa      	ldrh	r2, [r7, #6]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d8e7      	bhi.n	8002ec2 <USART1_CheckDmaReception+0x82>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	bf00      	nop
 8002efc:	40020000 	.word	0x40020000
 8002f00:	20000378 	.word	0x20000378
 8002f04:	20000578 	.word	0x20000578
 8002f08:	2000057c 	.word	0x2000057c

08002f0c <Reset_Handler>:
 8002f0c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f44 <LoopForever+0x2>
 8002f10:	f7ff faf6 	bl	8002500 <SystemInit>
 8002f14:	480c      	ldr	r0, [pc, #48]	; (8002f48 <LoopForever+0x6>)
 8002f16:	490d      	ldr	r1, [pc, #52]	; (8002f4c <LoopForever+0xa>)
 8002f18:	4a0d      	ldr	r2, [pc, #52]	; (8002f50 <LoopForever+0xe>)
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	e002      	b.n	8002f24 <LoopCopyDataInit>

08002f1e <CopyDataInit>:
 8002f1e:	58d4      	ldr	r4, [r2, r3]
 8002f20:	50c4      	str	r4, [r0, r3]
 8002f22:	3304      	adds	r3, #4

08002f24 <LoopCopyDataInit>:
 8002f24:	18c4      	adds	r4, r0, r3
 8002f26:	428c      	cmp	r4, r1
 8002f28:	d3f9      	bcc.n	8002f1e <CopyDataInit>
 8002f2a:	4a0a      	ldr	r2, [pc, #40]	; (8002f54 <LoopForever+0x12>)
 8002f2c:	4c0a      	ldr	r4, [pc, #40]	; (8002f58 <LoopForever+0x16>)
 8002f2e:	2300      	movs	r3, #0
 8002f30:	e001      	b.n	8002f36 <LoopFillZerobss>

08002f32 <FillZerobss>:
 8002f32:	6013      	str	r3, [r2, #0]
 8002f34:	3204      	adds	r2, #4

08002f36 <LoopFillZerobss>:
 8002f36:	42a2      	cmp	r2, r4
 8002f38:	d3fb      	bcc.n	8002f32 <FillZerobss>
 8002f3a:	f000 fc6b 	bl	8003814 <__libc_init_array>
 8002f3e:	f7ff f867 	bl	8002010 <main>

08002f42 <LoopForever>:
 8002f42:	e7fe      	b.n	8002f42 <LoopForever>
 8002f44:	20004000 	.word	0x20004000
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	20000068 	.word	0x20000068
 8002f50:	08005318 	.word	0x08005318
 8002f54:	20000068 	.word	0x20000068
 8002f58:	200006b8 	.word	0x200006b8

08002f5c <ADC1_IRQHandler>:
 8002f5c:	e7fe      	b.n	8002f5c <ADC1_IRQHandler>

08002f5e <LL_GPIO_SetPinMode>:
{
 8002f5e:	b480      	push	{r7}
 8002f60:	b089      	sub	sp, #36	; 0x24
 8002f62:	af00      	add	r7, sp, #0
 8002f64:	60f8      	str	r0, [r7, #12]
 8002f66:	60b9      	str	r1, [r7, #8]
 8002f68:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	fa93 f3a3 	rbit	r3, r3
 8002f78:	613b      	str	r3, [r7, #16]
  return result;
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	fab3 f383 	clz	r3, r3
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	2103      	movs	r1, #3
 8002f86:	fa01 f303 	lsl.w	r3, r1, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	401a      	ands	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	fa93 f3a3 	rbit	r3, r3
 8002f98:	61bb      	str	r3, [r7, #24]
  return result;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	fab3 f383 	clz	r3, r3
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	005b      	lsls	r3, r3, #1
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8002faa:	431a      	orrs	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	601a      	str	r2, [r3, #0]
}
 8002fb0:	bf00      	nop
 8002fb2:	3724      	adds	r7, #36	; 0x24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fba:	4770      	bx	lr

08002fbc <LL_GPIO_SetPinOutputType>:
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b085      	sub	sp, #20
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60f8      	str	r0, [r7, #12]
 8002fc4:	60b9      	str	r1, [r7, #8]
 8002fc6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	685a      	ldr	r2, [r3, #4]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	401a      	ands	r2, r3
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	6879      	ldr	r1, [r7, #4]
 8002fd6:	fb01 f303 	mul.w	r3, r1, r3
 8002fda:	431a      	orrs	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	605a      	str	r2, [r3, #4]
}
 8002fe0:	bf00      	nop
 8002fe2:	3714      	adds	r7, #20
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <LL_GPIO_SetPinSpeed>:
{
 8002fec:	b480      	push	{r7}
 8002fee:	b089      	sub	sp, #36	; 0x24
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	fa93 f3a3 	rbit	r3, r3
 8003006:	613b      	str	r3, [r7, #16]
  return result;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	fab3 f383 	clz	r3, r3
 800300e:	b2db      	uxtb	r3, r3
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2103      	movs	r1, #3
 8003014:	fa01 f303 	lsl.w	r3, r1, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	401a      	ands	r2, r3
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	61bb      	str	r3, [r7, #24]
  return result;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	6879      	ldr	r1, [r7, #4]
 8003034:	fa01 f303 	lsl.w	r3, r1, r3
 8003038:	431a      	orrs	r2, r3
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	609a      	str	r2, [r3, #8]
}
 800303e:	bf00      	nop
 8003040:	3724      	adds	r7, #36	; 0x24
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr

0800304a <LL_GPIO_SetPinPull>:
{
 800304a:	b480      	push	{r7}
 800304c:	b089      	sub	sp, #36	; 0x24
 800304e:	af00      	add	r7, sp, #0
 8003050:	60f8      	str	r0, [r7, #12]
 8003052:	60b9      	str	r1, [r7, #8]
 8003054:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	68da      	ldr	r2, [r3, #12]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	fa93 f3a3 	rbit	r3, r3
 8003064:	613b      	str	r3, [r7, #16]
  return result;
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
 800306e:	005b      	lsls	r3, r3, #1
 8003070:	2103      	movs	r1, #3
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	401a      	ands	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	61bb      	str	r3, [r7, #24]
  return result;
 8003086:	69bb      	ldr	r3, [r7, #24]
 8003088:	fab3 f383 	clz	r3, r3
 800308c:	b2db      	uxtb	r3, r3
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	6879      	ldr	r1, [r7, #4]
 8003092:	fa01 f303 	lsl.w	r3, r1, r3
 8003096:	431a      	orrs	r2, r3
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	60da      	str	r2, [r3, #12]
}
 800309c:	bf00      	nop
 800309e:	3724      	adds	r7, #36	; 0x24
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr

080030a8 <LL_GPIO_SetAFPin_0_7>:
{
 80030a8:	b480      	push	{r7}
 80030aa:	b089      	sub	sp, #36	; 0x24
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	60f8      	str	r0, [r7, #12]
 80030b0:	60b9      	str	r1, [r7, #8]
 80030b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6a1a      	ldr	r2, [r3, #32]
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	fa93 f3a3 	rbit	r3, r3
 80030c2:	613b      	str	r3, [r7, #16]
  return result;
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	210f      	movs	r1, #15
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	43db      	mvns	r3, r3
 80030d6:	401a      	ands	r2, r3
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	fa93 f3a3 	rbit	r3, r3
 80030e2:	61bb      	str	r3, [r7, #24]
  return result;
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	fab3 f383 	clz	r3, r3
 80030ea:	b2db      	uxtb	r3, r3
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	6879      	ldr	r1, [r7, #4]
 80030f0:	fa01 f303 	lsl.w	r3, r1, r3
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	621a      	str	r2, [r3, #32]
}
 80030fa:	bf00      	nop
 80030fc:	3724      	adds	r7, #36	; 0x24
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <LL_GPIO_SetAFPin_8_15>:
{
 8003106:	b480      	push	{r7}
 8003108:	b089      	sub	sp, #36	; 0x24
 800310a:	af00      	add	r7, sp, #0
 800310c:	60f8      	str	r0, [r7, #12]
 800310e:	60b9      	str	r1, [r7, #8]
 8003110:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	0a1b      	lsrs	r3, r3, #8
 800311a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	fa93 f3a3 	rbit	r3, r3
 8003122:	613b      	str	r3, [r7, #16]
  return result;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	210f      	movs	r1, #15
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	43db      	mvns	r3, r3
 8003136:	401a      	ands	r2, r3
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	0a1b      	lsrs	r3, r3, #8
 800313c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	fa93 f3a3 	rbit	r3, r3
 8003144:	61bb      	str	r3, [r7, #24]
  return result;
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	fab3 f383 	clz	r3, r3
 800314c:	b2db      	uxtb	r3, r3
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	fa01 f303 	lsl.w	r3, r1, r3
 8003156:	431a      	orrs	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800315c:	bf00      	nop
 800315e:	3724      	adds	r7, #36	; 0x24
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b088      	sub	sp, #32
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa93 f3a3 	rbit	r3, r3
 800317e:	613b      	str	r3, [r7, #16]
  return result;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	fab3 f383 	clz	r3, r3
 8003186:	b2db      	uxtb	r3, r3
 8003188:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800318a:	e051      	b.n	8003230 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2101      	movs	r1, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa01 f303 	lsl.w	r3, r1, r3
 8003198:	4013      	ands	r3, r2
 800319a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800319c:	69bb      	ldr	r3, [r7, #24]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d043      	beq.n	800322a <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d003      	beq.n	80031b2 <LL_GPIO_Init+0x4a>
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	2b02      	cmp	r3, #2
 80031b0:	d10e      	bne.n	80031d0 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	461a      	mov	r2, r3
 80031b8:	69b9      	ldr	r1, [r7, #24]
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ff16 	bl	8002fec <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	6819      	ldr	r1, [r3, #0]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	68db      	ldr	r3, [r3, #12]
 80031c8:	461a      	mov	r2, r3
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f7ff fef6 	bl	8002fbc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	691b      	ldr	r3, [r3, #16]
 80031d4:	461a      	mov	r2, r3
 80031d6:	69b9      	ldr	r1, [r7, #24]
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7ff ff36 	bl	800304a <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d11a      	bne.n	800321c <LL_GPIO_Init+0xb4>
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	fa93 f3a3 	rbit	r3, r3
 80031f0:	60bb      	str	r3, [r7, #8]
  return result;
 80031f2:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 80031f4:	fab3 f383 	clz	r3, r3
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b07      	cmp	r3, #7
 80031fc:	d807      	bhi.n	800320e <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	461a      	mov	r2, r3
 8003204:	69b9      	ldr	r1, [r7, #24]
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f7ff ff4e 	bl	80030a8 <LL_GPIO_SetAFPin_0_7>
 800320c:	e006      	b.n	800321c <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	461a      	mov	r2, r3
 8003214:	69b9      	ldr	r1, [r7, #24]
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7ff ff75 	bl	8003106 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	461a      	mov	r2, r3
 8003222:	69b9      	ldr	r1, [r7, #24]
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f7ff fe9a 	bl	8002f5e <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	3301      	adds	r3, #1
 800322e:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	fa22 f303 	lsr.w	r3, r2, r3
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1a6      	bne.n	800318c <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 800323e:	2300      	movs	r3, #0
}
 8003240:	4618      	mov	r0, r3
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <LL_RCC_HSI_IsReady>:
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 800324c:	4b06      	ldr	r3, [pc, #24]	; (8003268 <LL_RCC_HSI_IsReady+0x20>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 0302 	and.w	r3, r3, #2
 8003254:	2b02      	cmp	r3, #2
 8003256:	bf0c      	ite	eq
 8003258:	2301      	moveq	r3, #1
 800325a:	2300      	movne	r3, #0
 800325c:	b2db      	uxtb	r3, r3
}
 800325e:	4618      	mov	r0, r3
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr
 8003268:	40021000 	.word	0x40021000

0800326c <LL_RCC_LSE_IsReady>:
{
 800326c:	b480      	push	{r7}
 800326e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 8003270:	4b06      	ldr	r3, [pc, #24]	; (800328c <LL_RCC_LSE_IsReady+0x20>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b02      	cmp	r3, #2
 800327a:	bf0c      	ite	eq
 800327c:	2301      	moveq	r3, #1
 800327e:	2300      	movne	r3, #0
 8003280:	b2db      	uxtb	r3, r3
}
 8003282:	4618      	mov	r0, r3
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40021000 	.word	0x40021000

08003290 <LL_RCC_GetSysClkSource>:
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <LL_RCC_GetSysClkSource+0x18>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f003 030c 	and.w	r3, r3, #12
}
 800329c:	4618      	mov	r0, r3
 800329e:	46bd      	mov	sp, r7
 80032a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a4:	4770      	bx	lr
 80032a6:	bf00      	nop
 80032a8:	40021000 	.word	0x40021000

080032ac <LL_RCC_GetAHBPrescaler>:
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <LL_RCC_GetAHBPrescaler+0x18>)
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000

080032c8 <LL_RCC_GetAPB1Prescaler>:
{
 80032c8:	b480      	push	{r7}
 80032ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80032cc:	4b04      	ldr	r3, [pc, #16]	; (80032e0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000

080032e4 <LL_RCC_GetAPB2Prescaler>:
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032e8:	4b04      	ldr	r3, [pc, #16]	; (80032fc <LL_RCC_GetAPB2Prescaler+0x18>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	40021000 	.word	0x40021000

08003300 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <LL_RCC_GetUSARTClockSource+0x28>)
 800330a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800330c:	2103      	movs	r1, #3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	fa01 f303 	lsl.w	r3, r1, r3
 8003314:	401a      	ands	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	4313      	orrs	r3, r2
}
 800331c:	4618      	mov	r0, r3
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003326:	4770      	bx	lr
 8003328:	40021000 	.word	0x40021000

0800332c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800332c:	b480      	push	{r7}
 800332e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8003330:	4b04      	ldr	r3, [pc, #16]	; (8003344 <LL_RCC_PLL_GetMainSource+0x18>)
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8003338:	4618      	mov	r0, r3
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr
 8003342:	bf00      	nop
 8003344:	40021000 	.word	0x40021000

08003348 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 800334c:	4b04      	ldr	r3, [pc, #16]	; (8003360 <LL_RCC_PLL_GetMultiplicator+0x18>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40021000 	.word	0x40021000

08003364 <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 8003368:	4b04      	ldr	r3, [pc, #16]	; (800337c <LL_RCC_PLL_GetPrediv+0x18>)
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	f003 030f 	and.w	r3, r3, #15
}
 8003370:	4618      	mov	r0, r3
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40021000 	.word	0x40021000

08003380 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b082      	sub	sp, #8
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 8003388:	f000 f862 	bl	8003450 <RCC_GetSystemClockFreq>
 800338c:	4602      	mov	r2, r0
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4618      	mov	r0, r3
 8003398:	f000 f880 	bl	800349c <RCC_GetHCLKClockFreq>
 800339c:	4602      	mov	r2, r0
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4618      	mov	r0, r3
 80033a8:	f000 f88e 	bl	80034c8 <RCC_GetPCLK1ClockFreq>
 80033ac:	4602      	mov	r2, r0
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 f89a 	bl	80034f0 <RCC_GetPCLK2ClockFreq>
 80033bc:	4602      	mov	r2, r0
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60da      	str	r2, [r3, #12]
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
	...

080033cc <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d130      	bne.n	8003440 <LL_RCC_GetUSARTClockFreq+0x74>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7ff ff8e 	bl	8003300 <LL_RCC_GetUSARTClockSource>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d00a      	beq.n	8003400 <LL_RCC_GetUSARTClockFreq+0x34>
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d819      	bhi.n	8003422 <LL_RCC_GetUSARTClockFreq+0x56>
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d002      	beq.n	80033f8 <LL_RCC_GetUSARTClockFreq+0x2c>
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d00c      	beq.n	8003410 <LL_RCC_GetUSARTClockFreq+0x44>
 80033f6:	e014      	b.n	8003422 <LL_RCC_GetUSARTClockFreq+0x56>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80033f8:	f000 f82a 	bl	8003450 <RCC_GetSystemClockFreq>
 80033fc:	60f8      	str	r0, [r7, #12]
        break;
 80033fe:	e01f      	b.n	8003440 <LL_RCC_GetUSARTClockFreq+0x74>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8003400:	f7ff ff22 	bl	8003248 <LL_RCC_HSI_IsReady>
 8003404:	4603      	mov	r3, r0
 8003406:	2b00      	cmp	r3, #0
 8003408:	d017      	beq.n	800343a <LL_RCC_GetUSARTClockFreq+0x6e>
        {
          usart_frequency = HSI_VALUE;
 800340a:	4b10      	ldr	r3, [pc, #64]	; (800344c <LL_RCC_GetUSARTClockFreq+0x80>)
 800340c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800340e:	e014      	b.n	800343a <LL_RCC_GetUSARTClockFreq+0x6e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8003410:	f7ff ff2c 	bl	800326c <LL_RCC_LSE_IsReady>
 8003414:	4603      	mov	r3, r0
 8003416:	2b00      	cmp	r3, #0
 8003418:	d011      	beq.n	800343e <LL_RCC_GetUSARTClockFreq+0x72>
        {
          usart_frequency = LSE_VALUE;
 800341a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800341e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003420:	e00d      	b.n	800343e <LL_RCC_GetUSARTClockFreq+0x72>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003422:	f000 f815 	bl	8003450 <RCC_GetSystemClockFreq>
 8003426:	4603      	mov	r3, r0
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f837 	bl	800349c <RCC_GetHCLKClockFreq>
 800342e:	4603      	mov	r3, r0
 8003430:	4618      	mov	r0, r3
 8003432:	f000 f849 	bl	80034c8 <RCC_GetPCLK1ClockFreq>
 8003436:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 8003438:	e002      	b.n	8003440 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800343a:	bf00      	nop
 800343c:	e000      	b.n	8003440 <LL_RCC_GetUSARTClockFreq+0x74>
        break;
 800343e:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8003440:	68fb      	ldr	r3, [r7, #12]
}
 8003442:	4618      	mov	r0, r3
 8003444:	3710      	adds	r7, #16
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	007a1200 	.word	0x007a1200

08003450 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800345a:	f7ff ff19 	bl	8003290 <LL_RCC_GetSysClkSource>
 800345e:	4603      	mov	r3, r0
 8003460:	2b08      	cmp	r3, #8
 8003462:	d00c      	beq.n	800347e <RCC_GetSystemClockFreq+0x2e>
 8003464:	2b08      	cmp	r3, #8
 8003466:	d80e      	bhi.n	8003486 <RCC_GetSystemClockFreq+0x36>
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <RCC_GetSystemClockFreq+0x22>
 800346c:	2b04      	cmp	r3, #4
 800346e:	d003      	beq.n	8003478 <RCC_GetSystemClockFreq+0x28>
 8003470:	e009      	b.n	8003486 <RCC_GetSystemClockFreq+0x36>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <RCC_GetSystemClockFreq+0x48>)
 8003474:	607b      	str	r3, [r7, #4]
      break;
 8003476:	e009      	b.n	800348c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <RCC_GetSystemClockFreq+0x48>)
 800347a:	607b      	str	r3, [r7, #4]
      break;
 800347c:	e006      	b.n	800348c <RCC_GetSystemClockFreq+0x3c>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800347e:	f000 f84b 	bl	8003518 <RCC_PLL_GetFreqDomain_SYS>
 8003482:	6078      	str	r0, [r7, #4]
      break;
 8003484:	e002      	b.n	800348c <RCC_GetSystemClockFreq+0x3c>

    default:
      frequency = HSI_VALUE;
 8003486:	4b04      	ldr	r3, [pc, #16]	; (8003498 <RCC_GetSystemClockFreq+0x48>)
 8003488:	607b      	str	r3, [r7, #4]
      break;
 800348a:	bf00      	nop
  }

  return frequency;
 800348c:	687b      	ldr	r3, [r7, #4]
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	007a1200 	.word	0x007a1200

0800349c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80034a4:	f7ff ff02 	bl	80032ac <LL_RCC_GetAHBPrescaler>
 80034a8:	4603      	mov	r3, r0
 80034aa:	091b      	lsrs	r3, r3, #4
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <RCC_GetHCLKClockFreq+0x28>)
 80034b2:	5cd3      	ldrb	r3, [r2, r3]
 80034b4:	461a      	mov	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	40d3      	lsrs	r3, r2
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	3708      	adds	r7, #8
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}
 80034c2:	bf00      	nop
 80034c4:	080050a4 	.word	0x080050a4

080034c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b082      	sub	sp, #8
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80034d0:	f7ff fefa 	bl	80032c8 <LL_RCC_GetAPB1Prescaler>
 80034d4:	4603      	mov	r3, r0
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	4a04      	ldr	r2, [pc, #16]	; (80034ec <RCC_GetPCLK1ClockFreq+0x24>)
 80034da:	5cd3      	ldrb	r3, [r2, r3]
 80034dc:	461a      	mov	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	40d3      	lsrs	r3, r2
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3708      	adds	r7, #8
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	080050b4 	.word	0x080050b4

080034f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80034f8:	f7ff fef4 	bl	80032e4 <LL_RCC_GetAPB2Prescaler>
 80034fc:	4603      	mov	r3, r0
 80034fe:	0adb      	lsrs	r3, r3, #11
 8003500:	4a04      	ldr	r2, [pc, #16]	; (8003514 <RCC_GetPCLK2ClockFreq+0x24>)
 8003502:	5cd3      	ldrb	r3, [r2, r3]
 8003504:	461a      	mov	r2, r3
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	40d3      	lsrs	r3, r2
}
 800350a:	4618      	mov	r0, r3
 800350c:	3708      	adds	r7, #8
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	080050b4 	.word	0x080050b4

08003518 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003518:	b590      	push	{r4, r7, lr}
 800351a:	b085      	sub	sp, #20
 800351c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	2300      	movs	r3, #0
 8003524:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003526:	f7ff ff01 	bl	800332c <LL_RCC_PLL_GetMainSource>
 800352a:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d004      	beq.n	800353c <RCC_PLL_GetFreqDomain_SYS+0x24>
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003538:	d003      	beq.n	8003542 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800353a:	e005      	b.n	8003548 <RCC_PLL_GetFreqDomain_SYS+0x30>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 800353c:	4b13      	ldr	r3, [pc, #76]	; (800358c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800353e:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8003540:	e005      	b.n	800354e <RCC_PLL_GetFreqDomain_SYS+0x36>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003542:	4b13      	ldr	r3, [pc, #76]	; (8003590 <RCC_PLL_GetFreqDomain_SYS+0x78>)
 8003544:	60fb      	str	r3, [r7, #12]
      break;
 8003546:	e002      	b.n	800354e <RCC_PLL_GetFreqDomain_SYS+0x36>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8003548:	4b10      	ldr	r3, [pc, #64]	; (800358c <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800354a:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800354c:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 800354e:	f7ff ff09 	bl	8003364 <LL_RCC_PLL_GetPrediv>
 8003552:	4603      	mov	r3, r0
 8003554:	3301      	adds	r3, #1
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	fbb2 f4f3 	udiv	r4, r2, r3
 800355c:	f7ff fef4 	bl	8003348 <LL_RCC_PLL_GetMultiplicator>
 8003560:	4603      	mov	r3, r0
 8003562:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8003566:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800356a:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	fa92 f2a2 	rbit	r2, r2
 8003572:	603a      	str	r2, [r7, #0]
  return result;
 8003574:	683a      	ldr	r2, [r7, #0]
 8003576:	fab2 f282 	clz	r2, r2
 800357a:	b2d2      	uxtb	r2, r2
 800357c:	40d3      	lsrs	r3, r2
 800357e:	3302      	adds	r3, #2
 8003580:	fb04 f303 	mul.w	r3, r4, r3
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 8003584:	4618      	mov	r0, r3
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	bd90      	pop	{r4, r7, pc}
 800358c:	003d0900 	.word	0x003d0900
 8003590:	007a1200 	.word	0x007a1200

08003594 <LL_USART_IsEnabled>:
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0301 	and.w	r3, r3, #1
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d101      	bne.n	80035ac <LL_USART_IsEnabled+0x18>
 80035a8:	2301      	movs	r3, #1
 80035aa:	e000      	b.n	80035ae <LL_USART_IsEnabled+0x1a>
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <LL_USART_SetStopBitsLength>:
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
 80035c2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	431a      	orrs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	605a      	str	r2, [r3, #4]
}
 80035d4:	bf00      	nop
 80035d6:	370c      	adds	r7, #12
 80035d8:	46bd      	mov	sp, r7
 80035da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035de:	4770      	bx	lr

080035e0 <LL_USART_SetHWFlowCtrl>:
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	689b      	ldr	r3, [r3, #8]
 80035ee:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	431a      	orrs	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	609a      	str	r2, [r3, #8]
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <LL_USART_SetBaudRate>:
{
 8003606:	b480      	push	{r7}
 8003608:	b087      	sub	sp, #28
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	607a      	str	r2, [r7, #4]
 8003612:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800361a:	d11a      	bne.n	8003652 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	005a      	lsls	r2, r3, #1
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	085b      	lsrs	r3, r3, #1
 8003624:	441a      	add	r2, r3
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	fbb2 f3f3 	udiv	r3, r2, r3
 800362c:	b29b      	uxth	r3, r3
 800362e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003636:	4013      	ands	r3, r2
 8003638:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	085b      	lsrs	r3, r3, #1
 800363e:	b29b      	uxth	r3, r3
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	693a      	ldr	r2, [r7, #16]
 8003646:	4313      	orrs	r3, r2
 8003648:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	60da      	str	r2, [r3, #12]
}
 8003650:	e00a      	b.n	8003668 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003652:	683b      	ldr	r3, [r7, #0]
 8003654:	085a      	lsrs	r2, r3, #1
 8003656:	68bb      	ldr	r3, [r7, #8]
 8003658:	441a      	add	r2, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003660:	b29b      	uxth	r3, r3
 8003662:	461a      	mov	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	60da      	str	r2, [r3, #12]
}
 8003668:	bf00      	nop
 800366a:	371c      	adds	r7, #28
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b088      	sub	sp, #32
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003682:	2300      	movs	r3, #0
 8003684:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ff84 	bl	8003594 <LL_USART_IsEnabled>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d14e      	bne.n	8003730 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	4b29      	ldr	r3, [pc, #164]	; (800373c <LL_USART_Init+0xc8>)
 8003698:	4013      	ands	r3, r2
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	6851      	ldr	r1, [r2, #4]
 800369e:	683a      	ldr	r2, [r7, #0]
 80036a0:	68d2      	ldr	r2, [r2, #12]
 80036a2:	4311      	orrs	r1, r2
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	6912      	ldr	r2, [r2, #16]
 80036a8:	4311      	orrs	r1, r2
 80036aa:	683a      	ldr	r2, [r7, #0]
 80036ac:	6992      	ldr	r2, [r2, #24]
 80036ae:	430a      	orrs	r2, r1
 80036b0:	431a      	orrs	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80036b6:	683b      	ldr	r3, [r7, #0]
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	4619      	mov	r1, r3
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f7ff ff7c 	bl	80035ba <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	4619      	mov	r1, r3
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f7ff ff89 	bl	80035e0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <LL_USART_Init+0xcc>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d104      	bne.n	80036e0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80036d6:	2000      	movs	r0, #0
 80036d8:	f7ff fe78 	bl	80033cc <LL_RCC_GetUSARTClockFreq>
 80036dc:	61b8      	str	r0, [r7, #24]
 80036de:	e016      	b.n	800370e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a18      	ldr	r2, [pc, #96]	; (8003744 <LL_USART_Init+0xd0>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d107      	bne.n	80036f8 <LL_USART_Init+0x84>
    {
#if defined(RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 80036e8:	f107 0308 	add.w	r3, r7, #8
 80036ec:	4618      	mov	r0, r3
 80036ee:	f7ff fe47 	bl	8003380 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	61bb      	str	r3, [r7, #24]
 80036f6:	e00a      	b.n	800370e <LL_USART_Init+0x9a>
#endif /* USART2 Clock selector flag */
    }
    else if (USARTx == USART3)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a13      	ldr	r2, [pc, #76]	; (8003748 <LL_USART_Init+0xd4>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d106      	bne.n	800370e <LL_USART_Init+0x9a>
    {
#if defined(RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8003700:	f107 0308 	add.w	r3, r7, #8
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff fe3b 	bl	8003380 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d00d      	beq.n	8003730 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d009      	beq.n	8003730 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800371c:	2300      	movs	r3, #0
 800371e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->OverSampling,
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 8003728:	69b9      	ldr	r1, [r7, #24]
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f7ff ff6b 	bl	8003606 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003730:	7ffb      	ldrb	r3, [r7, #31]
}
 8003732:	4618      	mov	r0, r3
 8003734:	3720      	adds	r7, #32
 8003736:	46bd      	mov	sp, r7
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	efff69f3 	.word	0xefff69f3
 8003740:	40013800 	.word	0x40013800
 8003744:	40004400 	.word	0x40004400
 8003748:	40004800 	.word	0x40004800

0800374c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	fbb2 f3f3 	udiv	r3, r2, r3
 800375e:	4a07      	ldr	r2, [pc, #28]	; (800377c <LL_InitTick+0x30>)
 8003760:	3b01      	subs	r3, #1
 8003762:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003764:	4b05      	ldr	r3, [pc, #20]	; (800377c <LL_InitTick+0x30>)
 8003766:	2200      	movs	r2, #0
 8003768:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800376a:	4b04      	ldr	r3, [pc, #16]	; (800377c <LL_InitTick+0x30>)
 800376c:	2205      	movs	r2, #5
 800376e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000e010 	.word	0xe000e010

08003780 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b082      	sub	sp, #8
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003788:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff ffdd 	bl	800374c <LL_InitTick>
}
 8003792:	bf00      	nop
 8003794:	3708      	adds	r7, #8
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
	...

0800379c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800379c:	b480      	push	{r7}
 800379e:	b085      	sub	sp, #20
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80037a4:	4b0f      	ldr	r3, [pc, #60]	; (80037e4 <LL_mDelay+0x48>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80037aa:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d00c      	beq.n	80037ce <LL_mDelay+0x32>
  {
    Delay++;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	3301      	adds	r3, #1
 80037b8:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 80037ba:	e008      	b.n	80037ce <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80037bc:	4b09      	ldr	r3, [pc, #36]	; (80037e4 <LL_mDelay+0x48>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d002      	beq.n	80037ce <LL_mDelay+0x32>
    {
      Delay--;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	607b      	str	r3, [r7, #4]
  while (Delay)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d1f3      	bne.n	80037bc <LL_mDelay+0x20>
    }
  }
}
 80037d4:	bf00      	nop
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr
 80037e2:	bf00      	nop
 80037e4:	e000e010 	.word	0xe000e010

080037e8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <LL_SetSystemCoreClock+0x1c>)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6013      	str	r3, [r2, #0]
}
 80037f6:	bf00      	nop
 80037f8:	370c      	adds	r7, #12
 80037fa:	46bd      	mov	sp, r7
 80037fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003800:	4770      	bx	lr
 8003802:	bf00      	nop
 8003804:	20000000 	.word	0x20000000

08003808 <__errno>:
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <__errno+0x8>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	20000050 	.word	0x20000050

08003814 <__libc_init_array>:
 8003814:	b570      	push	{r4, r5, r6, lr}
 8003816:	4d0d      	ldr	r5, [pc, #52]	; (800384c <__libc_init_array+0x38>)
 8003818:	4c0d      	ldr	r4, [pc, #52]	; (8003850 <__libc_init_array+0x3c>)
 800381a:	1b64      	subs	r4, r4, r5
 800381c:	10a4      	asrs	r4, r4, #2
 800381e:	2600      	movs	r6, #0
 8003820:	42a6      	cmp	r6, r4
 8003822:	d109      	bne.n	8003838 <__libc_init_array+0x24>
 8003824:	4d0b      	ldr	r5, [pc, #44]	; (8003854 <__libc_init_array+0x40>)
 8003826:	4c0c      	ldr	r4, [pc, #48]	; (8003858 <__libc_init_array+0x44>)
 8003828:	f001 fc20 	bl	800506c <_init>
 800382c:	1b64      	subs	r4, r4, r5
 800382e:	10a4      	asrs	r4, r4, #2
 8003830:	2600      	movs	r6, #0
 8003832:	42a6      	cmp	r6, r4
 8003834:	d105      	bne.n	8003842 <__libc_init_array+0x2e>
 8003836:	bd70      	pop	{r4, r5, r6, pc}
 8003838:	f855 3b04 	ldr.w	r3, [r5], #4
 800383c:	4798      	blx	r3
 800383e:	3601      	adds	r6, #1
 8003840:	e7ee      	b.n	8003820 <__libc_init_array+0xc>
 8003842:	f855 3b04 	ldr.w	r3, [r5], #4
 8003846:	4798      	blx	r3
 8003848:	3601      	adds	r6, #1
 800384a:	e7f2      	b.n	8003832 <__libc_init_array+0x1e>
 800384c:	08005310 	.word	0x08005310
 8003850:	08005310 	.word	0x08005310
 8003854:	08005310 	.word	0x08005310
 8003858:	08005314 	.word	0x08005314

0800385c <atan2>:
 800385c:	f000 bbbc 	b.w	8003fd8 <__ieee754_atan2>

08003860 <sqrt>:
 8003860:	b538      	push	{r3, r4, r5, lr}
 8003862:	ed2d 8b02 	vpush	{d8}
 8003866:	ec55 4b10 	vmov	r4, r5, d0
 800386a:	f000 f8d1 	bl	8003a10 <__ieee754_sqrt>
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	4620      	mov	r0, r4
 8003874:	4629      	mov	r1, r5
 8003876:	eeb0 8a40 	vmov.f32	s16, s0
 800387a:	eef0 8a60 	vmov.f32	s17, s1
 800387e:	f7fd f8f9 	bl	8000a74 <__aeabi_dcmpun>
 8003882:	b990      	cbnz	r0, 80038aa <sqrt+0x4a>
 8003884:	2200      	movs	r2, #0
 8003886:	2300      	movs	r3, #0
 8003888:	4620      	mov	r0, r4
 800388a:	4629      	mov	r1, r5
 800388c:	f7fd f8ca 	bl	8000a24 <__aeabi_dcmplt>
 8003890:	b158      	cbz	r0, 80038aa <sqrt+0x4a>
 8003892:	f7ff ffb9 	bl	8003808 <__errno>
 8003896:	2321      	movs	r3, #33	; 0x21
 8003898:	6003      	str	r3, [r0, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	2300      	movs	r3, #0
 800389e:	4610      	mov	r0, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	f7fc ff77 	bl	8000794 <__aeabi_ddiv>
 80038a6:	ec41 0b18 	vmov	d8, r0, r1
 80038aa:	eeb0 0a48 	vmov.f32	s0, s16
 80038ae:	eef0 0a68 	vmov.f32	s1, s17
 80038b2:	ecbd 8b02 	vpop	{d8}
 80038b6:	bd38      	pop	{r3, r4, r5, pc}

080038b8 <cos>:
 80038b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80038ba:	ec53 2b10 	vmov	r2, r3, d0
 80038be:	4826      	ldr	r0, [pc, #152]	; (8003958 <cos+0xa0>)
 80038c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80038c4:	4281      	cmp	r1, r0
 80038c6:	dc06      	bgt.n	80038d6 <cos+0x1e>
 80038c8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8003950 <cos+0x98>
 80038cc:	b005      	add	sp, #20
 80038ce:	f85d eb04 	ldr.w	lr, [sp], #4
 80038d2:	f000 b9f9 	b.w	8003cc8 <__kernel_cos>
 80038d6:	4821      	ldr	r0, [pc, #132]	; (800395c <cos+0xa4>)
 80038d8:	4281      	cmp	r1, r0
 80038da:	dd09      	ble.n	80038f0 <cos+0x38>
 80038dc:	ee10 0a10 	vmov	r0, s0
 80038e0:	4619      	mov	r1, r3
 80038e2:	f7fc fc75 	bl	80001d0 <__aeabi_dsub>
 80038e6:	ec41 0b10 	vmov	d0, r0, r1
 80038ea:	b005      	add	sp, #20
 80038ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80038f0:	4668      	mov	r0, sp
 80038f2:	f000 fc39 	bl	8004168 <__ieee754_rem_pio2>
 80038f6:	f000 0003 	and.w	r0, r0, #3
 80038fa:	2801      	cmp	r0, #1
 80038fc:	d00b      	beq.n	8003916 <cos+0x5e>
 80038fe:	2802      	cmp	r0, #2
 8003900:	d016      	beq.n	8003930 <cos+0x78>
 8003902:	b9e0      	cbnz	r0, 800393e <cos+0x86>
 8003904:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003908:	ed9d 0b00 	vldr	d0, [sp]
 800390c:	f000 f9dc 	bl	8003cc8 <__kernel_cos>
 8003910:	ec51 0b10 	vmov	r0, r1, d0
 8003914:	e7e7      	b.n	80038e6 <cos+0x2e>
 8003916:	ed9d 1b02 	vldr	d1, [sp, #8]
 800391a:	ed9d 0b00 	vldr	d0, [sp]
 800391e:	f000 fa9b 	bl	8003e58 <__kernel_sin>
 8003922:	ec53 2b10 	vmov	r2, r3, d0
 8003926:	ee10 0a10 	vmov	r0, s0
 800392a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800392e:	e7da      	b.n	80038e6 <cos+0x2e>
 8003930:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003934:	ed9d 0b00 	vldr	d0, [sp]
 8003938:	f000 f9c6 	bl	8003cc8 <__kernel_cos>
 800393c:	e7f1      	b.n	8003922 <cos+0x6a>
 800393e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003942:	ed9d 0b00 	vldr	d0, [sp]
 8003946:	2001      	movs	r0, #1
 8003948:	f000 fa86 	bl	8003e58 <__kernel_sin>
 800394c:	e7e0      	b.n	8003910 <cos+0x58>
 800394e:	bf00      	nop
	...
 8003958:	3fe921fb 	.word	0x3fe921fb
 800395c:	7fefffff 	.word	0x7fefffff

08003960 <sin>:
 8003960:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003962:	ec53 2b10 	vmov	r2, r3, d0
 8003966:	4828      	ldr	r0, [pc, #160]	; (8003a08 <sin+0xa8>)
 8003968:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800396c:	4281      	cmp	r1, r0
 800396e:	dc07      	bgt.n	8003980 <sin+0x20>
 8003970:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8003a00 <sin+0xa0>
 8003974:	2000      	movs	r0, #0
 8003976:	b005      	add	sp, #20
 8003978:	f85d eb04 	ldr.w	lr, [sp], #4
 800397c:	f000 ba6c 	b.w	8003e58 <__kernel_sin>
 8003980:	4822      	ldr	r0, [pc, #136]	; (8003a0c <sin+0xac>)
 8003982:	4281      	cmp	r1, r0
 8003984:	dd09      	ble.n	800399a <sin+0x3a>
 8003986:	ee10 0a10 	vmov	r0, s0
 800398a:	4619      	mov	r1, r3
 800398c:	f7fc fc20 	bl	80001d0 <__aeabi_dsub>
 8003990:	ec41 0b10 	vmov	d0, r0, r1
 8003994:	b005      	add	sp, #20
 8003996:	f85d fb04 	ldr.w	pc, [sp], #4
 800399a:	4668      	mov	r0, sp
 800399c:	f000 fbe4 	bl	8004168 <__ieee754_rem_pio2>
 80039a0:	f000 0003 	and.w	r0, r0, #3
 80039a4:	2801      	cmp	r0, #1
 80039a6:	d00c      	beq.n	80039c2 <sin+0x62>
 80039a8:	2802      	cmp	r0, #2
 80039aa:	d011      	beq.n	80039d0 <sin+0x70>
 80039ac:	b9f0      	cbnz	r0, 80039ec <sin+0x8c>
 80039ae:	ed9d 1b02 	vldr	d1, [sp, #8]
 80039b2:	ed9d 0b00 	vldr	d0, [sp]
 80039b6:	2001      	movs	r0, #1
 80039b8:	f000 fa4e 	bl	8003e58 <__kernel_sin>
 80039bc:	ec51 0b10 	vmov	r0, r1, d0
 80039c0:	e7e6      	b.n	8003990 <sin+0x30>
 80039c2:	ed9d 1b02 	vldr	d1, [sp, #8]
 80039c6:	ed9d 0b00 	vldr	d0, [sp]
 80039ca:	f000 f97d 	bl	8003cc8 <__kernel_cos>
 80039ce:	e7f5      	b.n	80039bc <sin+0x5c>
 80039d0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80039d4:	ed9d 0b00 	vldr	d0, [sp]
 80039d8:	2001      	movs	r0, #1
 80039da:	f000 fa3d 	bl	8003e58 <__kernel_sin>
 80039de:	ec53 2b10 	vmov	r2, r3, d0
 80039e2:	ee10 0a10 	vmov	r0, s0
 80039e6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80039ea:	e7d1      	b.n	8003990 <sin+0x30>
 80039ec:	ed9d 1b02 	vldr	d1, [sp, #8]
 80039f0:	ed9d 0b00 	vldr	d0, [sp]
 80039f4:	f000 f968 	bl	8003cc8 <__kernel_cos>
 80039f8:	e7f1      	b.n	80039de <sin+0x7e>
 80039fa:	bf00      	nop
 80039fc:	f3af 8000 	nop.w
	...
 8003a08:	3fe921fb 	.word	0x3fe921fb
 8003a0c:	7fefffff 	.word	0x7fefffff

08003a10 <__ieee754_sqrt>:
 8003a10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a14:	ec55 4b10 	vmov	r4, r5, d0
 8003a18:	4e67      	ldr	r6, [pc, #412]	; (8003bb8 <__ieee754_sqrt+0x1a8>)
 8003a1a:	43ae      	bics	r6, r5
 8003a1c:	ee10 0a10 	vmov	r0, s0
 8003a20:	ee10 2a10 	vmov	r2, s0
 8003a24:	4629      	mov	r1, r5
 8003a26:	462b      	mov	r3, r5
 8003a28:	d10d      	bne.n	8003a46 <__ieee754_sqrt+0x36>
 8003a2a:	f7fc fd89 	bl	8000540 <__aeabi_dmul>
 8003a2e:	4602      	mov	r2, r0
 8003a30:	460b      	mov	r3, r1
 8003a32:	4620      	mov	r0, r4
 8003a34:	4629      	mov	r1, r5
 8003a36:	f7fc fbcd 	bl	80001d4 <__adddf3>
 8003a3a:	4604      	mov	r4, r0
 8003a3c:	460d      	mov	r5, r1
 8003a3e:	ec45 4b10 	vmov	d0, r4, r5
 8003a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a46:	2d00      	cmp	r5, #0
 8003a48:	dc0b      	bgt.n	8003a62 <__ieee754_sqrt+0x52>
 8003a4a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8003a4e:	4326      	orrs	r6, r4
 8003a50:	d0f5      	beq.n	8003a3e <__ieee754_sqrt+0x2e>
 8003a52:	b135      	cbz	r5, 8003a62 <__ieee754_sqrt+0x52>
 8003a54:	f7fc fbbc 	bl	80001d0 <__aeabi_dsub>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	460b      	mov	r3, r1
 8003a5c:	f7fc fe9a 	bl	8000794 <__aeabi_ddiv>
 8003a60:	e7eb      	b.n	8003a3a <__ieee754_sqrt+0x2a>
 8003a62:	1509      	asrs	r1, r1, #20
 8003a64:	f000 808d 	beq.w	8003b82 <__ieee754_sqrt+0x172>
 8003a68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003a6c:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8003a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003a74:	07c9      	lsls	r1, r1, #31
 8003a76:	bf5c      	itt	pl
 8003a78:	005b      	lslpl	r3, r3, #1
 8003a7a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8003a7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8003a82:	bf58      	it	pl
 8003a84:	0052      	lslpl	r2, r2, #1
 8003a86:	2500      	movs	r5, #0
 8003a88:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003a8c:	1076      	asrs	r6, r6, #1
 8003a8e:	0052      	lsls	r2, r2, #1
 8003a90:	f04f 0e16 	mov.w	lr, #22
 8003a94:	46ac      	mov	ip, r5
 8003a96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003a9a:	eb0c 0001 	add.w	r0, ip, r1
 8003a9e:	4298      	cmp	r0, r3
 8003aa0:	bfde      	ittt	le
 8003aa2:	1a1b      	suble	r3, r3, r0
 8003aa4:	eb00 0c01 	addle.w	ip, r0, r1
 8003aa8:	186d      	addle	r5, r5, r1
 8003aaa:	005b      	lsls	r3, r3, #1
 8003aac:	f1be 0e01 	subs.w	lr, lr, #1
 8003ab0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003ab4:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003ab8:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003abc:	d1ed      	bne.n	8003a9a <__ieee754_sqrt+0x8a>
 8003abe:	4674      	mov	r4, lr
 8003ac0:	2720      	movs	r7, #32
 8003ac2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003ac6:	4563      	cmp	r3, ip
 8003ac8:	eb01 000e 	add.w	r0, r1, lr
 8003acc:	dc02      	bgt.n	8003ad4 <__ieee754_sqrt+0xc4>
 8003ace:	d113      	bne.n	8003af8 <__ieee754_sqrt+0xe8>
 8003ad0:	4290      	cmp	r0, r2
 8003ad2:	d811      	bhi.n	8003af8 <__ieee754_sqrt+0xe8>
 8003ad4:	2800      	cmp	r0, #0
 8003ad6:	eb00 0e01 	add.w	lr, r0, r1
 8003ada:	da57      	bge.n	8003b8c <__ieee754_sqrt+0x17c>
 8003adc:	f1be 0f00 	cmp.w	lr, #0
 8003ae0:	db54      	blt.n	8003b8c <__ieee754_sqrt+0x17c>
 8003ae2:	f10c 0801 	add.w	r8, ip, #1
 8003ae6:	eba3 030c 	sub.w	r3, r3, ip
 8003aea:	4290      	cmp	r0, r2
 8003aec:	bf88      	it	hi
 8003aee:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8003af2:	1a12      	subs	r2, r2, r0
 8003af4:	440c      	add	r4, r1
 8003af6:	46c4      	mov	ip, r8
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	3f01      	subs	r7, #1
 8003afc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8003b00:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8003b04:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8003b08:	d1dd      	bne.n	8003ac6 <__ieee754_sqrt+0xb6>
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	d01b      	beq.n	8003b46 <__ieee754_sqrt+0x136>
 8003b0e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8003bbc <__ieee754_sqrt+0x1ac>
 8003b12:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8003bc0 <__ieee754_sqrt+0x1b0>
 8003b16:	e9da 0100 	ldrd	r0, r1, [sl]
 8003b1a:	e9db 2300 	ldrd	r2, r3, [fp]
 8003b1e:	f7fc fb57 	bl	80001d0 <__aeabi_dsub>
 8003b22:	e9da 8900 	ldrd	r8, r9, [sl]
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4640      	mov	r0, r8
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	f7fc ff83 	bl	8000a38 <__aeabi_dcmple>
 8003b32:	b140      	cbz	r0, 8003b46 <__ieee754_sqrt+0x136>
 8003b34:	f1b4 3fff 	cmp.w	r4, #4294967295
 8003b38:	e9da 0100 	ldrd	r0, r1, [sl]
 8003b3c:	e9db 2300 	ldrd	r2, r3, [fp]
 8003b40:	d126      	bne.n	8003b90 <__ieee754_sqrt+0x180>
 8003b42:	3501      	adds	r5, #1
 8003b44:	463c      	mov	r4, r7
 8003b46:	106a      	asrs	r2, r5, #1
 8003b48:	0863      	lsrs	r3, r4, #1
 8003b4a:	07e9      	lsls	r1, r5, #31
 8003b4c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8003b50:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8003b54:	bf48      	it	mi
 8003b56:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8003b5a:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8003b5e:	461c      	mov	r4, r3
 8003b60:	e76d      	b.n	8003a3e <__ieee754_sqrt+0x2e>
 8003b62:	0ad3      	lsrs	r3, r2, #11
 8003b64:	3815      	subs	r0, #21
 8003b66:	0552      	lsls	r2, r2, #21
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d0fa      	beq.n	8003b62 <__ieee754_sqrt+0x152>
 8003b6c:	02dc      	lsls	r4, r3, #11
 8003b6e:	d50a      	bpl.n	8003b86 <__ieee754_sqrt+0x176>
 8003b70:	f1c1 0420 	rsb	r4, r1, #32
 8003b74:	fa22 f404 	lsr.w	r4, r2, r4
 8003b78:	1e4d      	subs	r5, r1, #1
 8003b7a:	408a      	lsls	r2, r1
 8003b7c:	4323      	orrs	r3, r4
 8003b7e:	1b41      	subs	r1, r0, r5
 8003b80:	e772      	b.n	8003a68 <__ieee754_sqrt+0x58>
 8003b82:	4608      	mov	r0, r1
 8003b84:	e7f0      	b.n	8003b68 <__ieee754_sqrt+0x158>
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	3101      	adds	r1, #1
 8003b8a:	e7ef      	b.n	8003b6c <__ieee754_sqrt+0x15c>
 8003b8c:	46e0      	mov	r8, ip
 8003b8e:	e7aa      	b.n	8003ae6 <__ieee754_sqrt+0xd6>
 8003b90:	f7fc fb20 	bl	80001d4 <__adddf3>
 8003b94:	e9da 8900 	ldrd	r8, r9, [sl]
 8003b98:	4602      	mov	r2, r0
 8003b9a:	460b      	mov	r3, r1
 8003b9c:	4640      	mov	r0, r8
 8003b9e:	4649      	mov	r1, r9
 8003ba0:	f7fc ff40 	bl	8000a24 <__aeabi_dcmplt>
 8003ba4:	b120      	cbz	r0, 8003bb0 <__ieee754_sqrt+0x1a0>
 8003ba6:	1ca0      	adds	r0, r4, #2
 8003ba8:	bf08      	it	eq
 8003baa:	3501      	addeq	r5, #1
 8003bac:	3402      	adds	r4, #2
 8003bae:	e7ca      	b.n	8003b46 <__ieee754_sqrt+0x136>
 8003bb0:	3401      	adds	r4, #1
 8003bb2:	f024 0401 	bic.w	r4, r4, #1
 8003bb6:	e7c6      	b.n	8003b46 <__ieee754_sqrt+0x136>
 8003bb8:	7ff00000 	.word	0x7ff00000
 8003bbc:	20000058 	.word	0x20000058
 8003bc0:	20000060 	.word	0x20000060
 8003bc4:	00000000 	.word	0x00000000

08003bc8 <floor>:
 8003bc8:	ec51 0b10 	vmov	r0, r1, d0
 8003bcc:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bd4:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8003bd8:	2e13      	cmp	r6, #19
 8003bda:	ee10 5a10 	vmov	r5, s0
 8003bde:	ee10 8a10 	vmov	r8, s0
 8003be2:	460c      	mov	r4, r1
 8003be4:	dc31      	bgt.n	8003c4a <floor+0x82>
 8003be6:	2e00      	cmp	r6, #0
 8003be8:	da14      	bge.n	8003c14 <floor+0x4c>
 8003bea:	a333      	add	r3, pc, #204	; (adr r3, 8003cb8 <floor+0xf0>)
 8003bec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf0:	f7fc faf0 	bl	80001d4 <__adddf3>
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	f7fc ff32 	bl	8000a60 <__aeabi_dcmpgt>
 8003bfc:	b138      	cbz	r0, 8003c0e <floor+0x46>
 8003bfe:	2c00      	cmp	r4, #0
 8003c00:	da53      	bge.n	8003caa <floor+0xe2>
 8003c02:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8003c06:	4325      	orrs	r5, r4
 8003c08:	d052      	beq.n	8003cb0 <floor+0xe8>
 8003c0a:	4c2d      	ldr	r4, [pc, #180]	; (8003cc0 <floor+0xf8>)
 8003c0c:	2500      	movs	r5, #0
 8003c0e:	4621      	mov	r1, r4
 8003c10:	4628      	mov	r0, r5
 8003c12:	e024      	b.n	8003c5e <floor+0x96>
 8003c14:	4f2b      	ldr	r7, [pc, #172]	; (8003cc4 <floor+0xfc>)
 8003c16:	4137      	asrs	r7, r6
 8003c18:	ea01 0307 	and.w	r3, r1, r7
 8003c1c:	4303      	orrs	r3, r0
 8003c1e:	d01e      	beq.n	8003c5e <floor+0x96>
 8003c20:	a325      	add	r3, pc, #148	; (adr r3, 8003cb8 <floor+0xf0>)
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f7fc fad5 	bl	80001d4 <__adddf3>
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	f7fc ff17 	bl	8000a60 <__aeabi_dcmpgt>
 8003c32:	2800      	cmp	r0, #0
 8003c34:	d0eb      	beq.n	8003c0e <floor+0x46>
 8003c36:	2c00      	cmp	r4, #0
 8003c38:	bfbe      	ittt	lt
 8003c3a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003c3e:	4133      	asrlt	r3, r6
 8003c40:	18e4      	addlt	r4, r4, r3
 8003c42:	ea24 0407 	bic.w	r4, r4, r7
 8003c46:	2500      	movs	r5, #0
 8003c48:	e7e1      	b.n	8003c0e <floor+0x46>
 8003c4a:	2e33      	cmp	r6, #51	; 0x33
 8003c4c:	dd0b      	ble.n	8003c66 <floor+0x9e>
 8003c4e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8003c52:	d104      	bne.n	8003c5e <floor+0x96>
 8003c54:	ee10 2a10 	vmov	r2, s0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	f7fc fabb 	bl	80001d4 <__adddf3>
 8003c5e:	ec41 0b10 	vmov	d0, r0, r1
 8003c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c66:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8003c6a:	f04f 37ff 	mov.w	r7, #4294967295
 8003c6e:	40df      	lsrs	r7, r3
 8003c70:	4238      	tst	r0, r7
 8003c72:	d0f4      	beq.n	8003c5e <floor+0x96>
 8003c74:	a310      	add	r3, pc, #64	; (adr r3, 8003cb8 <floor+0xf0>)
 8003c76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c7a:	f7fc faab 	bl	80001d4 <__adddf3>
 8003c7e:	2200      	movs	r2, #0
 8003c80:	2300      	movs	r3, #0
 8003c82:	f7fc feed 	bl	8000a60 <__aeabi_dcmpgt>
 8003c86:	2800      	cmp	r0, #0
 8003c88:	d0c1      	beq.n	8003c0e <floor+0x46>
 8003c8a:	2c00      	cmp	r4, #0
 8003c8c:	da0a      	bge.n	8003ca4 <floor+0xdc>
 8003c8e:	2e14      	cmp	r6, #20
 8003c90:	d101      	bne.n	8003c96 <floor+0xce>
 8003c92:	3401      	adds	r4, #1
 8003c94:	e006      	b.n	8003ca4 <floor+0xdc>
 8003c96:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	40b3      	lsls	r3, r6
 8003c9e:	441d      	add	r5, r3
 8003ca0:	45a8      	cmp	r8, r5
 8003ca2:	d8f6      	bhi.n	8003c92 <floor+0xca>
 8003ca4:	ea25 0507 	bic.w	r5, r5, r7
 8003ca8:	e7b1      	b.n	8003c0e <floor+0x46>
 8003caa:	2500      	movs	r5, #0
 8003cac:	462c      	mov	r4, r5
 8003cae:	e7ae      	b.n	8003c0e <floor+0x46>
 8003cb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8003cb4:	e7ab      	b.n	8003c0e <floor+0x46>
 8003cb6:	bf00      	nop
 8003cb8:	8800759c 	.word	0x8800759c
 8003cbc:	7e37e43c 	.word	0x7e37e43c
 8003cc0:	bff00000 	.word	0xbff00000
 8003cc4:	000fffff 	.word	0x000fffff

08003cc8 <__kernel_cos>:
 8003cc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ccc:	ec57 6b10 	vmov	r6, r7, d0
 8003cd0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003cd4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8003cd8:	ed8d 1b00 	vstr	d1, [sp]
 8003cdc:	da07      	bge.n	8003cee <__kernel_cos+0x26>
 8003cde:	ee10 0a10 	vmov	r0, s0
 8003ce2:	4639      	mov	r1, r7
 8003ce4:	f7fc fedc 	bl	8000aa0 <__aeabi_d2iz>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	f000 8088 	beq.w	8003dfe <__kernel_cos+0x136>
 8003cee:	4632      	mov	r2, r6
 8003cf0:	463b      	mov	r3, r7
 8003cf2:	4630      	mov	r0, r6
 8003cf4:	4639      	mov	r1, r7
 8003cf6:	f7fc fc23 	bl	8000540 <__aeabi_dmul>
 8003cfa:	4b51      	ldr	r3, [pc, #324]	; (8003e40 <__kernel_cos+0x178>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	4604      	mov	r4, r0
 8003d00:	460d      	mov	r5, r1
 8003d02:	f7fc fc1d 	bl	8000540 <__aeabi_dmul>
 8003d06:	a340      	add	r3, pc, #256	; (adr r3, 8003e08 <__kernel_cos+0x140>)
 8003d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0c:	4682      	mov	sl, r0
 8003d0e:	468b      	mov	fp, r1
 8003d10:	4620      	mov	r0, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7fc fc14 	bl	8000540 <__aeabi_dmul>
 8003d18:	a33d      	add	r3, pc, #244	; (adr r3, 8003e10 <__kernel_cos+0x148>)
 8003d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d1e:	f7fc fa59 	bl	80001d4 <__adddf3>
 8003d22:	4622      	mov	r2, r4
 8003d24:	462b      	mov	r3, r5
 8003d26:	f7fc fc0b 	bl	8000540 <__aeabi_dmul>
 8003d2a:	a33b      	add	r3, pc, #236	; (adr r3, 8003e18 <__kernel_cos+0x150>)
 8003d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d30:	f7fc fa4e 	bl	80001d0 <__aeabi_dsub>
 8003d34:	4622      	mov	r2, r4
 8003d36:	462b      	mov	r3, r5
 8003d38:	f7fc fc02 	bl	8000540 <__aeabi_dmul>
 8003d3c:	a338      	add	r3, pc, #224	; (adr r3, 8003e20 <__kernel_cos+0x158>)
 8003d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d42:	f7fc fa47 	bl	80001d4 <__adddf3>
 8003d46:	4622      	mov	r2, r4
 8003d48:	462b      	mov	r3, r5
 8003d4a:	f7fc fbf9 	bl	8000540 <__aeabi_dmul>
 8003d4e:	a336      	add	r3, pc, #216	; (adr r3, 8003e28 <__kernel_cos+0x160>)
 8003d50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d54:	f7fc fa3c 	bl	80001d0 <__aeabi_dsub>
 8003d58:	4622      	mov	r2, r4
 8003d5a:	462b      	mov	r3, r5
 8003d5c:	f7fc fbf0 	bl	8000540 <__aeabi_dmul>
 8003d60:	a333      	add	r3, pc, #204	; (adr r3, 8003e30 <__kernel_cos+0x168>)
 8003d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d66:	f7fc fa35 	bl	80001d4 <__adddf3>
 8003d6a:	4622      	mov	r2, r4
 8003d6c:	462b      	mov	r3, r5
 8003d6e:	f7fc fbe7 	bl	8000540 <__aeabi_dmul>
 8003d72:	4622      	mov	r2, r4
 8003d74:	462b      	mov	r3, r5
 8003d76:	f7fc fbe3 	bl	8000540 <__aeabi_dmul>
 8003d7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003d7e:	4604      	mov	r4, r0
 8003d80:	460d      	mov	r5, r1
 8003d82:	4630      	mov	r0, r6
 8003d84:	4639      	mov	r1, r7
 8003d86:	f7fc fbdb 	bl	8000540 <__aeabi_dmul>
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4620      	mov	r0, r4
 8003d92:	f7fc fa1d 	bl	80001d0 <__aeabi_dsub>
 8003d96:	4b2b      	ldr	r3, [pc, #172]	; (8003e44 <__kernel_cos+0x17c>)
 8003d98:	4598      	cmp	r8, r3
 8003d9a:	4606      	mov	r6, r0
 8003d9c:	460f      	mov	r7, r1
 8003d9e:	dc10      	bgt.n	8003dc2 <__kernel_cos+0xfa>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4650      	mov	r0, sl
 8003da6:	4659      	mov	r1, fp
 8003da8:	f7fc fa12 	bl	80001d0 <__aeabi_dsub>
 8003dac:	460b      	mov	r3, r1
 8003dae:	4926      	ldr	r1, [pc, #152]	; (8003e48 <__kernel_cos+0x180>)
 8003db0:	4602      	mov	r2, r0
 8003db2:	2000      	movs	r0, #0
 8003db4:	f7fc fa0c 	bl	80001d0 <__aeabi_dsub>
 8003db8:	ec41 0b10 	vmov	d0, r0, r1
 8003dbc:	b003      	add	sp, #12
 8003dbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dc2:	4b22      	ldr	r3, [pc, #136]	; (8003e4c <__kernel_cos+0x184>)
 8003dc4:	4920      	ldr	r1, [pc, #128]	; (8003e48 <__kernel_cos+0x180>)
 8003dc6:	4598      	cmp	r8, r3
 8003dc8:	bfcc      	ite	gt
 8003dca:	4d21      	ldrgt	r5, [pc, #132]	; (8003e50 <__kernel_cos+0x188>)
 8003dcc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8003dd0:	2400      	movs	r4, #0
 8003dd2:	4622      	mov	r2, r4
 8003dd4:	462b      	mov	r3, r5
 8003dd6:	2000      	movs	r0, #0
 8003dd8:	f7fc f9fa 	bl	80001d0 <__aeabi_dsub>
 8003ddc:	4622      	mov	r2, r4
 8003dde:	4680      	mov	r8, r0
 8003de0:	4689      	mov	r9, r1
 8003de2:	462b      	mov	r3, r5
 8003de4:	4650      	mov	r0, sl
 8003de6:	4659      	mov	r1, fp
 8003de8:	f7fc f9f2 	bl	80001d0 <__aeabi_dsub>
 8003dec:	4632      	mov	r2, r6
 8003dee:	463b      	mov	r3, r7
 8003df0:	f7fc f9ee 	bl	80001d0 <__aeabi_dsub>
 8003df4:	4602      	mov	r2, r0
 8003df6:	460b      	mov	r3, r1
 8003df8:	4640      	mov	r0, r8
 8003dfa:	4649      	mov	r1, r9
 8003dfc:	e7da      	b.n	8003db4 <__kernel_cos+0xec>
 8003dfe:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8003e38 <__kernel_cos+0x170>
 8003e02:	e7db      	b.n	8003dbc <__kernel_cos+0xf4>
 8003e04:	f3af 8000 	nop.w
 8003e08:	be8838d4 	.word	0xbe8838d4
 8003e0c:	bda8fae9 	.word	0xbda8fae9
 8003e10:	bdb4b1c4 	.word	0xbdb4b1c4
 8003e14:	3e21ee9e 	.word	0x3e21ee9e
 8003e18:	809c52ad 	.word	0x809c52ad
 8003e1c:	3e927e4f 	.word	0x3e927e4f
 8003e20:	19cb1590 	.word	0x19cb1590
 8003e24:	3efa01a0 	.word	0x3efa01a0
 8003e28:	16c15177 	.word	0x16c15177
 8003e2c:	3f56c16c 	.word	0x3f56c16c
 8003e30:	5555554c 	.word	0x5555554c
 8003e34:	3fa55555 	.word	0x3fa55555
 8003e38:	00000000 	.word	0x00000000
 8003e3c:	3ff00000 	.word	0x3ff00000
 8003e40:	3fe00000 	.word	0x3fe00000
 8003e44:	3fd33332 	.word	0x3fd33332
 8003e48:	3ff00000 	.word	0x3ff00000
 8003e4c:	3fe90000 	.word	0x3fe90000
 8003e50:	3fd20000 	.word	0x3fd20000
 8003e54:	00000000 	.word	0x00000000

08003e58 <__kernel_sin>:
 8003e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5c:	ed2d 8b04 	vpush	{d8-d9}
 8003e60:	eeb0 8a41 	vmov.f32	s16, s2
 8003e64:	eef0 8a61 	vmov.f32	s17, s3
 8003e68:	ec55 4b10 	vmov	r4, r5, d0
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003e72:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003e76:	9001      	str	r0, [sp, #4]
 8003e78:	da06      	bge.n	8003e88 <__kernel_sin+0x30>
 8003e7a:	ee10 0a10 	vmov	r0, s0
 8003e7e:	4629      	mov	r1, r5
 8003e80:	f7fc fe0e 	bl	8000aa0 <__aeabi_d2iz>
 8003e84:	2800      	cmp	r0, #0
 8003e86:	d051      	beq.n	8003f2c <__kernel_sin+0xd4>
 8003e88:	4622      	mov	r2, r4
 8003e8a:	462b      	mov	r3, r5
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	4629      	mov	r1, r5
 8003e90:	f7fc fb56 	bl	8000540 <__aeabi_dmul>
 8003e94:	4682      	mov	sl, r0
 8003e96:	468b      	mov	fp, r1
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	4629      	mov	r1, r5
 8003ea0:	f7fc fb4e 	bl	8000540 <__aeabi_dmul>
 8003ea4:	a341      	add	r3, pc, #260	; (adr r3, 8003fac <__kernel_sin+0x154>)
 8003ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eaa:	4680      	mov	r8, r0
 8003eac:	4689      	mov	r9, r1
 8003eae:	4650      	mov	r0, sl
 8003eb0:	4659      	mov	r1, fp
 8003eb2:	f7fc fb45 	bl	8000540 <__aeabi_dmul>
 8003eb6:	a33f      	add	r3, pc, #252	; (adr r3, 8003fb4 <__kernel_sin+0x15c>)
 8003eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ebc:	f7fc f988 	bl	80001d0 <__aeabi_dsub>
 8003ec0:	4652      	mov	r2, sl
 8003ec2:	465b      	mov	r3, fp
 8003ec4:	f7fc fb3c 	bl	8000540 <__aeabi_dmul>
 8003ec8:	a33c      	add	r3, pc, #240	; (adr r3, 8003fbc <__kernel_sin+0x164>)
 8003eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ece:	f7fc f981 	bl	80001d4 <__adddf3>
 8003ed2:	4652      	mov	r2, sl
 8003ed4:	465b      	mov	r3, fp
 8003ed6:	f7fc fb33 	bl	8000540 <__aeabi_dmul>
 8003eda:	a33a      	add	r3, pc, #232	; (adr r3, 8003fc4 <__kernel_sin+0x16c>)
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f7fc f976 	bl	80001d0 <__aeabi_dsub>
 8003ee4:	4652      	mov	r2, sl
 8003ee6:	465b      	mov	r3, fp
 8003ee8:	f7fc fb2a 	bl	8000540 <__aeabi_dmul>
 8003eec:	a337      	add	r3, pc, #220	; (adr r3, 8003fcc <__kernel_sin+0x174>)
 8003eee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef2:	f7fc f96f 	bl	80001d4 <__adddf3>
 8003ef6:	9b01      	ldr	r3, [sp, #4]
 8003ef8:	4606      	mov	r6, r0
 8003efa:	460f      	mov	r7, r1
 8003efc:	b9eb      	cbnz	r3, 8003f3a <__kernel_sin+0xe2>
 8003efe:	4602      	mov	r2, r0
 8003f00:	460b      	mov	r3, r1
 8003f02:	4650      	mov	r0, sl
 8003f04:	4659      	mov	r1, fp
 8003f06:	f7fc fb1b 	bl	8000540 <__aeabi_dmul>
 8003f0a:	a325      	add	r3, pc, #148	; (adr r3, 8003fa0 <__kernel_sin+0x148>)
 8003f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f10:	f7fc f95e 	bl	80001d0 <__aeabi_dsub>
 8003f14:	4642      	mov	r2, r8
 8003f16:	464b      	mov	r3, r9
 8003f18:	f7fc fb12 	bl	8000540 <__aeabi_dmul>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4620      	mov	r0, r4
 8003f22:	4629      	mov	r1, r5
 8003f24:	f7fc f956 	bl	80001d4 <__adddf3>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	460d      	mov	r5, r1
 8003f2c:	ec45 4b10 	vmov	d0, r4, r5
 8003f30:	b003      	add	sp, #12
 8003f32:	ecbd 8b04 	vpop	{d8-d9}
 8003f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f3a:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <__kernel_sin+0x150>)
 8003f3c:	ec51 0b18 	vmov	r0, r1, d8
 8003f40:	2200      	movs	r2, #0
 8003f42:	f7fc fafd 	bl	8000540 <__aeabi_dmul>
 8003f46:	4632      	mov	r2, r6
 8003f48:	ec41 0b19 	vmov	d9, r0, r1
 8003f4c:	463b      	mov	r3, r7
 8003f4e:	4640      	mov	r0, r8
 8003f50:	4649      	mov	r1, r9
 8003f52:	f7fc faf5 	bl	8000540 <__aeabi_dmul>
 8003f56:	4602      	mov	r2, r0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	ec51 0b19 	vmov	r0, r1, d9
 8003f5e:	f7fc f937 	bl	80001d0 <__aeabi_dsub>
 8003f62:	4652      	mov	r2, sl
 8003f64:	465b      	mov	r3, fp
 8003f66:	f7fc faeb 	bl	8000540 <__aeabi_dmul>
 8003f6a:	ec53 2b18 	vmov	r2, r3, d8
 8003f6e:	f7fc f92f 	bl	80001d0 <__aeabi_dsub>
 8003f72:	a30b      	add	r3, pc, #44	; (adr r3, 8003fa0 <__kernel_sin+0x148>)
 8003f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f78:	4606      	mov	r6, r0
 8003f7a:	460f      	mov	r7, r1
 8003f7c:	4640      	mov	r0, r8
 8003f7e:	4649      	mov	r1, r9
 8003f80:	f7fc fade 	bl	8000540 <__aeabi_dmul>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4630      	mov	r0, r6
 8003f8a:	4639      	mov	r1, r7
 8003f8c:	f7fc f922 	bl	80001d4 <__adddf3>
 8003f90:	4602      	mov	r2, r0
 8003f92:	460b      	mov	r3, r1
 8003f94:	4620      	mov	r0, r4
 8003f96:	4629      	mov	r1, r5
 8003f98:	f7fc f91a 	bl	80001d0 <__aeabi_dsub>
 8003f9c:	e7c4      	b.n	8003f28 <__kernel_sin+0xd0>
 8003f9e:	bf00      	nop
 8003fa0:	55555549 	.word	0x55555549
 8003fa4:	3fc55555 	.word	0x3fc55555
 8003fa8:	3fe00000 	.word	0x3fe00000
 8003fac:	5acfd57c 	.word	0x5acfd57c
 8003fb0:	3de5d93a 	.word	0x3de5d93a
 8003fb4:	8a2b9ceb 	.word	0x8a2b9ceb
 8003fb8:	3e5ae5e6 	.word	0x3e5ae5e6
 8003fbc:	57b1fe7d 	.word	0x57b1fe7d
 8003fc0:	3ec71de3 	.word	0x3ec71de3
 8003fc4:	19c161d5 	.word	0x19c161d5
 8003fc8:	3f2a01a0 	.word	0x3f2a01a0
 8003fcc:	1110f8a6 	.word	0x1110f8a6
 8003fd0:	3f811111 	.word	0x3f811111
 8003fd4:	00000000 	.word	0x00000000

08003fd8 <__ieee754_atan2>:
 8003fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003fdc:	ec57 6b11 	vmov	r6, r7, d1
 8003fe0:	4273      	negs	r3, r6
 8003fe2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8004160 <__ieee754_atan2+0x188>
 8003fe6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8003fea:	4333      	orrs	r3, r6
 8003fec:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8003ff0:	4543      	cmp	r3, r8
 8003ff2:	ec51 0b10 	vmov	r0, r1, d0
 8003ff6:	ee11 5a10 	vmov	r5, s2
 8003ffa:	d80a      	bhi.n	8004012 <__ieee754_atan2+0x3a>
 8003ffc:	4244      	negs	r4, r0
 8003ffe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004002:	4304      	orrs	r4, r0
 8004004:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8004008:	4544      	cmp	r4, r8
 800400a:	ee10 9a10 	vmov	r9, s0
 800400e:	468e      	mov	lr, r1
 8004010:	d907      	bls.n	8004022 <__ieee754_atan2+0x4a>
 8004012:	4632      	mov	r2, r6
 8004014:	463b      	mov	r3, r7
 8004016:	f7fc f8dd 	bl	80001d4 <__adddf3>
 800401a:	ec41 0b10 	vmov	d0, r0, r1
 800401e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004022:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8004026:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800402a:	4334      	orrs	r4, r6
 800402c:	d103      	bne.n	8004036 <__ieee754_atan2+0x5e>
 800402e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004032:	f000 baa1 	b.w	8004578 <atan>
 8004036:	17bc      	asrs	r4, r7, #30
 8004038:	f004 0402 	and.w	r4, r4, #2
 800403c:	ea53 0909 	orrs.w	r9, r3, r9
 8004040:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8004044:	d107      	bne.n	8004056 <__ieee754_atan2+0x7e>
 8004046:	2c02      	cmp	r4, #2
 8004048:	d05f      	beq.n	800410a <__ieee754_atan2+0x132>
 800404a:	2c03      	cmp	r4, #3
 800404c:	d1e5      	bne.n	800401a <__ieee754_atan2+0x42>
 800404e:	a140      	add	r1, pc, #256	; (adr r1, 8004150 <__ieee754_atan2+0x178>)
 8004050:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004054:	e7e1      	b.n	800401a <__ieee754_atan2+0x42>
 8004056:	4315      	orrs	r5, r2
 8004058:	d106      	bne.n	8004068 <__ieee754_atan2+0x90>
 800405a:	f1be 0f00 	cmp.w	lr, #0
 800405e:	da5f      	bge.n	8004120 <__ieee754_atan2+0x148>
 8004060:	a13d      	add	r1, pc, #244	; (adr r1, 8004158 <__ieee754_atan2+0x180>)
 8004062:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004066:	e7d8      	b.n	800401a <__ieee754_atan2+0x42>
 8004068:	4542      	cmp	r2, r8
 800406a:	d10f      	bne.n	800408c <__ieee754_atan2+0xb4>
 800406c:	4293      	cmp	r3, r2
 800406e:	f104 34ff 	add.w	r4, r4, #4294967295
 8004072:	d107      	bne.n	8004084 <__ieee754_atan2+0xac>
 8004074:	2c02      	cmp	r4, #2
 8004076:	d84c      	bhi.n	8004112 <__ieee754_atan2+0x13a>
 8004078:	4b33      	ldr	r3, [pc, #204]	; (8004148 <__ieee754_atan2+0x170>)
 800407a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800407e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004082:	e7ca      	b.n	800401a <__ieee754_atan2+0x42>
 8004084:	2c02      	cmp	r4, #2
 8004086:	d848      	bhi.n	800411a <__ieee754_atan2+0x142>
 8004088:	4b30      	ldr	r3, [pc, #192]	; (800414c <__ieee754_atan2+0x174>)
 800408a:	e7f6      	b.n	800407a <__ieee754_atan2+0xa2>
 800408c:	4543      	cmp	r3, r8
 800408e:	d0e4      	beq.n	800405a <__ieee754_atan2+0x82>
 8004090:	1a9b      	subs	r3, r3, r2
 8004092:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8004096:	ea4f 5223 	mov.w	r2, r3, asr #20
 800409a:	da1e      	bge.n	80040da <__ieee754_atan2+0x102>
 800409c:	2f00      	cmp	r7, #0
 800409e:	da01      	bge.n	80040a4 <__ieee754_atan2+0xcc>
 80040a0:	323c      	adds	r2, #60	; 0x3c
 80040a2:	db1e      	blt.n	80040e2 <__ieee754_atan2+0x10a>
 80040a4:	4632      	mov	r2, r6
 80040a6:	463b      	mov	r3, r7
 80040a8:	f7fc fb74 	bl	8000794 <__aeabi_ddiv>
 80040ac:	ec41 0b10 	vmov	d0, r0, r1
 80040b0:	f000 fc02 	bl	80048b8 <fabs>
 80040b4:	f000 fa60 	bl	8004578 <atan>
 80040b8:	ec51 0b10 	vmov	r0, r1, d0
 80040bc:	2c01      	cmp	r4, #1
 80040be:	d013      	beq.n	80040e8 <__ieee754_atan2+0x110>
 80040c0:	2c02      	cmp	r4, #2
 80040c2:	d015      	beq.n	80040f0 <__ieee754_atan2+0x118>
 80040c4:	2c00      	cmp	r4, #0
 80040c6:	d0a8      	beq.n	800401a <__ieee754_atan2+0x42>
 80040c8:	a317      	add	r3, pc, #92	; (adr r3, 8004128 <__ieee754_atan2+0x150>)
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f7fc f87f 	bl	80001d0 <__aeabi_dsub>
 80040d2:	a317      	add	r3, pc, #92	; (adr r3, 8004130 <__ieee754_atan2+0x158>)
 80040d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d8:	e014      	b.n	8004104 <__ieee754_atan2+0x12c>
 80040da:	a117      	add	r1, pc, #92	; (adr r1, 8004138 <__ieee754_atan2+0x160>)
 80040dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80040e0:	e7ec      	b.n	80040bc <__ieee754_atan2+0xe4>
 80040e2:	2000      	movs	r0, #0
 80040e4:	2100      	movs	r1, #0
 80040e6:	e7e9      	b.n	80040bc <__ieee754_atan2+0xe4>
 80040e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80040ec:	4619      	mov	r1, r3
 80040ee:	e794      	b.n	800401a <__ieee754_atan2+0x42>
 80040f0:	a30d      	add	r3, pc, #52	; (adr r3, 8004128 <__ieee754_atan2+0x150>)
 80040f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040f6:	f7fc f86b 	bl	80001d0 <__aeabi_dsub>
 80040fa:	4602      	mov	r2, r0
 80040fc:	460b      	mov	r3, r1
 80040fe:	a10c      	add	r1, pc, #48	; (adr r1, 8004130 <__ieee754_atan2+0x158>)
 8004100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004104:	f7fc f864 	bl	80001d0 <__aeabi_dsub>
 8004108:	e787      	b.n	800401a <__ieee754_atan2+0x42>
 800410a:	a109      	add	r1, pc, #36	; (adr r1, 8004130 <__ieee754_atan2+0x158>)
 800410c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004110:	e783      	b.n	800401a <__ieee754_atan2+0x42>
 8004112:	a10b      	add	r1, pc, #44	; (adr r1, 8004140 <__ieee754_atan2+0x168>)
 8004114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004118:	e77f      	b.n	800401a <__ieee754_atan2+0x42>
 800411a:	2000      	movs	r0, #0
 800411c:	2100      	movs	r1, #0
 800411e:	e77c      	b.n	800401a <__ieee754_atan2+0x42>
 8004120:	a105      	add	r1, pc, #20	; (adr r1, 8004138 <__ieee754_atan2+0x160>)
 8004122:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004126:	e778      	b.n	800401a <__ieee754_atan2+0x42>
 8004128:	33145c07 	.word	0x33145c07
 800412c:	3ca1a626 	.word	0x3ca1a626
 8004130:	54442d18 	.word	0x54442d18
 8004134:	400921fb 	.word	0x400921fb
 8004138:	54442d18 	.word	0x54442d18
 800413c:	3ff921fb 	.word	0x3ff921fb
 8004140:	54442d18 	.word	0x54442d18
 8004144:	3fe921fb 	.word	0x3fe921fb
 8004148:	080050c8 	.word	0x080050c8
 800414c:	080050e0 	.word	0x080050e0
 8004150:	54442d18 	.word	0x54442d18
 8004154:	c00921fb 	.word	0xc00921fb
 8004158:	54442d18 	.word	0x54442d18
 800415c:	bff921fb 	.word	0xbff921fb
 8004160:	7ff00000 	.word	0x7ff00000
 8004164:	00000000 	.word	0x00000000

08004168 <__ieee754_rem_pio2>:
 8004168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800416c:	ed2d 8b02 	vpush	{d8}
 8004170:	ec55 4b10 	vmov	r4, r5, d0
 8004174:	4bca      	ldr	r3, [pc, #808]	; (80044a0 <__ieee754_rem_pio2+0x338>)
 8004176:	b08b      	sub	sp, #44	; 0x2c
 8004178:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800417c:	4598      	cmp	r8, r3
 800417e:	4682      	mov	sl, r0
 8004180:	9502      	str	r5, [sp, #8]
 8004182:	dc08      	bgt.n	8004196 <__ieee754_rem_pio2+0x2e>
 8004184:	2200      	movs	r2, #0
 8004186:	2300      	movs	r3, #0
 8004188:	ed80 0b00 	vstr	d0, [r0]
 800418c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8004190:	f04f 0b00 	mov.w	fp, #0
 8004194:	e028      	b.n	80041e8 <__ieee754_rem_pio2+0x80>
 8004196:	4bc3      	ldr	r3, [pc, #780]	; (80044a4 <__ieee754_rem_pio2+0x33c>)
 8004198:	4598      	cmp	r8, r3
 800419a:	dc78      	bgt.n	800428e <__ieee754_rem_pio2+0x126>
 800419c:	9b02      	ldr	r3, [sp, #8]
 800419e:	4ec2      	ldr	r6, [pc, #776]	; (80044a8 <__ieee754_rem_pio2+0x340>)
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	ee10 0a10 	vmov	r0, s0
 80041a6:	a3b0      	add	r3, pc, #704	; (adr r3, 8004468 <__ieee754_rem_pio2+0x300>)
 80041a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ac:	4629      	mov	r1, r5
 80041ae:	dd39      	ble.n	8004224 <__ieee754_rem_pio2+0xbc>
 80041b0:	f7fc f80e 	bl	80001d0 <__aeabi_dsub>
 80041b4:	45b0      	cmp	r8, r6
 80041b6:	4604      	mov	r4, r0
 80041b8:	460d      	mov	r5, r1
 80041ba:	d01b      	beq.n	80041f4 <__ieee754_rem_pio2+0x8c>
 80041bc:	a3ac      	add	r3, pc, #688	; (adr r3, 8004470 <__ieee754_rem_pio2+0x308>)
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f7fc f805 	bl	80001d0 <__aeabi_dsub>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	e9ca 2300 	strd	r2, r3, [sl]
 80041ce:	4620      	mov	r0, r4
 80041d0:	4629      	mov	r1, r5
 80041d2:	f7fb fffd 	bl	80001d0 <__aeabi_dsub>
 80041d6:	a3a6      	add	r3, pc, #664	; (adr r3, 8004470 <__ieee754_rem_pio2+0x308>)
 80041d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041dc:	f7fb fff8 	bl	80001d0 <__aeabi_dsub>
 80041e0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80041e4:	f04f 0b01 	mov.w	fp, #1
 80041e8:	4658      	mov	r0, fp
 80041ea:	b00b      	add	sp, #44	; 0x2c
 80041ec:	ecbd 8b02 	vpop	{d8}
 80041f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041f4:	a3a0      	add	r3, pc, #640	; (adr r3, 8004478 <__ieee754_rem_pio2+0x310>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fb ffe9 	bl	80001d0 <__aeabi_dsub>
 80041fe:	a3a0      	add	r3, pc, #640	; (adr r3, 8004480 <__ieee754_rem_pio2+0x318>)
 8004200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004204:	4604      	mov	r4, r0
 8004206:	460d      	mov	r5, r1
 8004208:	f7fb ffe2 	bl	80001d0 <__aeabi_dsub>
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	e9ca 2300 	strd	r2, r3, [sl]
 8004214:	4620      	mov	r0, r4
 8004216:	4629      	mov	r1, r5
 8004218:	f7fb ffda 	bl	80001d0 <__aeabi_dsub>
 800421c:	a398      	add	r3, pc, #608	; (adr r3, 8004480 <__ieee754_rem_pio2+0x318>)
 800421e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004222:	e7db      	b.n	80041dc <__ieee754_rem_pio2+0x74>
 8004224:	f7fb ffd6 	bl	80001d4 <__adddf3>
 8004228:	45b0      	cmp	r8, r6
 800422a:	4604      	mov	r4, r0
 800422c:	460d      	mov	r5, r1
 800422e:	d016      	beq.n	800425e <__ieee754_rem_pio2+0xf6>
 8004230:	a38f      	add	r3, pc, #572	; (adr r3, 8004470 <__ieee754_rem_pio2+0x308>)
 8004232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004236:	f7fb ffcd 	bl	80001d4 <__adddf3>
 800423a:	4602      	mov	r2, r0
 800423c:	460b      	mov	r3, r1
 800423e:	e9ca 2300 	strd	r2, r3, [sl]
 8004242:	4620      	mov	r0, r4
 8004244:	4629      	mov	r1, r5
 8004246:	f7fb ffc3 	bl	80001d0 <__aeabi_dsub>
 800424a:	a389      	add	r3, pc, #548	; (adr r3, 8004470 <__ieee754_rem_pio2+0x308>)
 800424c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004250:	f7fb ffc0 	bl	80001d4 <__adddf3>
 8004254:	f04f 3bff 	mov.w	fp, #4294967295
 8004258:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800425c:	e7c4      	b.n	80041e8 <__ieee754_rem_pio2+0x80>
 800425e:	a386      	add	r3, pc, #536	; (adr r3, 8004478 <__ieee754_rem_pio2+0x310>)
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f7fb ffb6 	bl	80001d4 <__adddf3>
 8004268:	a385      	add	r3, pc, #532	; (adr r3, 8004480 <__ieee754_rem_pio2+0x318>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	4604      	mov	r4, r0
 8004270:	460d      	mov	r5, r1
 8004272:	f7fb ffaf 	bl	80001d4 <__adddf3>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	e9ca 2300 	strd	r2, r3, [sl]
 800427e:	4620      	mov	r0, r4
 8004280:	4629      	mov	r1, r5
 8004282:	f7fb ffa5 	bl	80001d0 <__aeabi_dsub>
 8004286:	a37e      	add	r3, pc, #504	; (adr r3, 8004480 <__ieee754_rem_pio2+0x318>)
 8004288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428c:	e7e0      	b.n	8004250 <__ieee754_rem_pio2+0xe8>
 800428e:	4b87      	ldr	r3, [pc, #540]	; (80044ac <__ieee754_rem_pio2+0x344>)
 8004290:	4598      	cmp	r8, r3
 8004292:	f300 80d8 	bgt.w	8004446 <__ieee754_rem_pio2+0x2de>
 8004296:	f000 fb0f 	bl	80048b8 <fabs>
 800429a:	ec55 4b10 	vmov	r4, r5, d0
 800429e:	ee10 0a10 	vmov	r0, s0
 80042a2:	a379      	add	r3, pc, #484	; (adr r3, 8004488 <__ieee754_rem_pio2+0x320>)
 80042a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a8:	4629      	mov	r1, r5
 80042aa:	f7fc f949 	bl	8000540 <__aeabi_dmul>
 80042ae:	4b80      	ldr	r3, [pc, #512]	; (80044b0 <__ieee754_rem_pio2+0x348>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	f7fb ff8f 	bl	80001d4 <__adddf3>
 80042b6:	f7fc fbf3 	bl	8000aa0 <__aeabi_d2iz>
 80042ba:	4683      	mov	fp, r0
 80042bc:	f7fc f8d6 	bl	800046c <__aeabi_i2d>
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	ec43 2b18 	vmov	d8, r2, r3
 80042c8:	a367      	add	r3, pc, #412	; (adr r3, 8004468 <__ieee754_rem_pio2+0x300>)
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f7fc f937 	bl	8000540 <__aeabi_dmul>
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4620      	mov	r0, r4
 80042d8:	4629      	mov	r1, r5
 80042da:	f7fb ff79 	bl	80001d0 <__aeabi_dsub>
 80042de:	a364      	add	r3, pc, #400	; (adr r3, 8004470 <__ieee754_rem_pio2+0x308>)
 80042e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e4:	4606      	mov	r6, r0
 80042e6:	460f      	mov	r7, r1
 80042e8:	ec51 0b18 	vmov	r0, r1, d8
 80042ec:	f7fc f928 	bl	8000540 <__aeabi_dmul>
 80042f0:	f1bb 0f1f 	cmp.w	fp, #31
 80042f4:	4604      	mov	r4, r0
 80042f6:	460d      	mov	r5, r1
 80042f8:	dc0d      	bgt.n	8004316 <__ieee754_rem_pio2+0x1ae>
 80042fa:	4b6e      	ldr	r3, [pc, #440]	; (80044b4 <__ieee754_rem_pio2+0x34c>)
 80042fc:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004300:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004304:	4543      	cmp	r3, r8
 8004306:	d006      	beq.n	8004316 <__ieee754_rem_pio2+0x1ae>
 8004308:	4622      	mov	r2, r4
 800430a:	462b      	mov	r3, r5
 800430c:	4630      	mov	r0, r6
 800430e:	4639      	mov	r1, r7
 8004310:	f7fb ff5e 	bl	80001d0 <__aeabi_dsub>
 8004314:	e00e      	b.n	8004334 <__ieee754_rem_pio2+0x1cc>
 8004316:	462b      	mov	r3, r5
 8004318:	4622      	mov	r2, r4
 800431a:	4630      	mov	r0, r6
 800431c:	4639      	mov	r1, r7
 800431e:	f7fb ff57 	bl	80001d0 <__aeabi_dsub>
 8004322:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004326:	9303      	str	r3, [sp, #12]
 8004328:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800432c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004330:	2b10      	cmp	r3, #16
 8004332:	dc02      	bgt.n	800433a <__ieee754_rem_pio2+0x1d2>
 8004334:	e9ca 0100 	strd	r0, r1, [sl]
 8004338:	e039      	b.n	80043ae <__ieee754_rem_pio2+0x246>
 800433a:	a34f      	add	r3, pc, #316	; (adr r3, 8004478 <__ieee754_rem_pio2+0x310>)
 800433c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004340:	ec51 0b18 	vmov	r0, r1, d8
 8004344:	f7fc f8fc 	bl	8000540 <__aeabi_dmul>
 8004348:	4604      	mov	r4, r0
 800434a:	460d      	mov	r5, r1
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4630      	mov	r0, r6
 8004352:	4639      	mov	r1, r7
 8004354:	f7fb ff3c 	bl	80001d0 <__aeabi_dsub>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4680      	mov	r8, r0
 800435e:	4689      	mov	r9, r1
 8004360:	4630      	mov	r0, r6
 8004362:	4639      	mov	r1, r7
 8004364:	f7fb ff34 	bl	80001d0 <__aeabi_dsub>
 8004368:	4622      	mov	r2, r4
 800436a:	462b      	mov	r3, r5
 800436c:	f7fb ff30 	bl	80001d0 <__aeabi_dsub>
 8004370:	a343      	add	r3, pc, #268	; (adr r3, 8004480 <__ieee754_rem_pio2+0x318>)
 8004372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004376:	4604      	mov	r4, r0
 8004378:	460d      	mov	r5, r1
 800437a:	ec51 0b18 	vmov	r0, r1, d8
 800437e:	f7fc f8df 	bl	8000540 <__aeabi_dmul>
 8004382:	4622      	mov	r2, r4
 8004384:	462b      	mov	r3, r5
 8004386:	f7fb ff23 	bl	80001d0 <__aeabi_dsub>
 800438a:	4602      	mov	r2, r0
 800438c:	460b      	mov	r3, r1
 800438e:	4604      	mov	r4, r0
 8004390:	460d      	mov	r5, r1
 8004392:	4640      	mov	r0, r8
 8004394:	4649      	mov	r1, r9
 8004396:	f7fb ff1b 	bl	80001d0 <__aeabi_dsub>
 800439a:	9a03      	ldr	r2, [sp, #12]
 800439c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b31      	cmp	r3, #49	; 0x31
 80043a4:	dc24      	bgt.n	80043f0 <__ieee754_rem_pio2+0x288>
 80043a6:	e9ca 0100 	strd	r0, r1, [sl]
 80043aa:	4646      	mov	r6, r8
 80043ac:	464f      	mov	r7, r9
 80043ae:	e9da 8900 	ldrd	r8, r9, [sl]
 80043b2:	4630      	mov	r0, r6
 80043b4:	4642      	mov	r2, r8
 80043b6:	464b      	mov	r3, r9
 80043b8:	4639      	mov	r1, r7
 80043ba:	f7fb ff09 	bl	80001d0 <__aeabi_dsub>
 80043be:	462b      	mov	r3, r5
 80043c0:	4622      	mov	r2, r4
 80043c2:	f7fb ff05 	bl	80001d0 <__aeabi_dsub>
 80043c6:	9b02      	ldr	r3, [sp, #8]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80043ce:	f6bf af0b 	bge.w	80041e8 <__ieee754_rem_pio2+0x80>
 80043d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80043d6:	f8ca 3004 	str.w	r3, [sl, #4]
 80043da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80043de:	f8ca 8000 	str.w	r8, [sl]
 80043e2:	f8ca 0008 	str.w	r0, [sl, #8]
 80043e6:	f8ca 300c 	str.w	r3, [sl, #12]
 80043ea:	f1cb 0b00 	rsb	fp, fp, #0
 80043ee:	e6fb      	b.n	80041e8 <__ieee754_rem_pio2+0x80>
 80043f0:	a327      	add	r3, pc, #156	; (adr r3, 8004490 <__ieee754_rem_pio2+0x328>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	ec51 0b18 	vmov	r0, r1, d8
 80043fa:	f7fc f8a1 	bl	8000540 <__aeabi_dmul>
 80043fe:	4604      	mov	r4, r0
 8004400:	460d      	mov	r5, r1
 8004402:	4602      	mov	r2, r0
 8004404:	460b      	mov	r3, r1
 8004406:	4640      	mov	r0, r8
 8004408:	4649      	mov	r1, r9
 800440a:	f7fb fee1 	bl	80001d0 <__aeabi_dsub>
 800440e:	4602      	mov	r2, r0
 8004410:	460b      	mov	r3, r1
 8004412:	4606      	mov	r6, r0
 8004414:	460f      	mov	r7, r1
 8004416:	4640      	mov	r0, r8
 8004418:	4649      	mov	r1, r9
 800441a:	f7fb fed9 	bl	80001d0 <__aeabi_dsub>
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	f7fb fed5 	bl	80001d0 <__aeabi_dsub>
 8004426:	a31c      	add	r3, pc, #112	; (adr r3, 8004498 <__ieee754_rem_pio2+0x330>)
 8004428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800442c:	4604      	mov	r4, r0
 800442e:	460d      	mov	r5, r1
 8004430:	ec51 0b18 	vmov	r0, r1, d8
 8004434:	f7fc f884 	bl	8000540 <__aeabi_dmul>
 8004438:	4622      	mov	r2, r4
 800443a:	462b      	mov	r3, r5
 800443c:	f7fb fec8 	bl	80001d0 <__aeabi_dsub>
 8004440:	4604      	mov	r4, r0
 8004442:	460d      	mov	r5, r1
 8004444:	e760      	b.n	8004308 <__ieee754_rem_pio2+0x1a0>
 8004446:	4b1c      	ldr	r3, [pc, #112]	; (80044b8 <__ieee754_rem_pio2+0x350>)
 8004448:	4598      	cmp	r8, r3
 800444a:	dd37      	ble.n	80044bc <__ieee754_rem_pio2+0x354>
 800444c:	ee10 2a10 	vmov	r2, s0
 8004450:	462b      	mov	r3, r5
 8004452:	4620      	mov	r0, r4
 8004454:	4629      	mov	r1, r5
 8004456:	f7fb febb 	bl	80001d0 <__aeabi_dsub>
 800445a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800445e:	e9ca 0100 	strd	r0, r1, [sl]
 8004462:	e695      	b.n	8004190 <__ieee754_rem_pio2+0x28>
 8004464:	f3af 8000 	nop.w
 8004468:	54400000 	.word	0x54400000
 800446c:	3ff921fb 	.word	0x3ff921fb
 8004470:	1a626331 	.word	0x1a626331
 8004474:	3dd0b461 	.word	0x3dd0b461
 8004478:	1a600000 	.word	0x1a600000
 800447c:	3dd0b461 	.word	0x3dd0b461
 8004480:	2e037073 	.word	0x2e037073
 8004484:	3ba3198a 	.word	0x3ba3198a
 8004488:	6dc9c883 	.word	0x6dc9c883
 800448c:	3fe45f30 	.word	0x3fe45f30
 8004490:	2e000000 	.word	0x2e000000
 8004494:	3ba3198a 	.word	0x3ba3198a
 8004498:	252049c1 	.word	0x252049c1
 800449c:	397b839a 	.word	0x397b839a
 80044a0:	3fe921fb 	.word	0x3fe921fb
 80044a4:	4002d97b 	.word	0x4002d97b
 80044a8:	3ff921fb 	.word	0x3ff921fb
 80044ac:	413921fb 	.word	0x413921fb
 80044b0:	3fe00000 	.word	0x3fe00000
 80044b4:	080050f8 	.word	0x080050f8
 80044b8:	7fefffff 	.word	0x7fefffff
 80044bc:	ea4f 5628 	mov.w	r6, r8, asr #20
 80044c0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80044c4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80044c8:	4620      	mov	r0, r4
 80044ca:	460d      	mov	r5, r1
 80044cc:	f7fc fae8 	bl	8000aa0 <__aeabi_d2iz>
 80044d0:	f7fb ffcc 	bl	800046c <__aeabi_i2d>
 80044d4:	4602      	mov	r2, r0
 80044d6:	460b      	mov	r3, r1
 80044d8:	4620      	mov	r0, r4
 80044da:	4629      	mov	r1, r5
 80044dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80044e0:	f7fb fe76 	bl	80001d0 <__aeabi_dsub>
 80044e4:	4b21      	ldr	r3, [pc, #132]	; (800456c <__ieee754_rem_pio2+0x404>)
 80044e6:	2200      	movs	r2, #0
 80044e8:	f7fc f82a 	bl	8000540 <__aeabi_dmul>
 80044ec:	460d      	mov	r5, r1
 80044ee:	4604      	mov	r4, r0
 80044f0:	f7fc fad6 	bl	8000aa0 <__aeabi_d2iz>
 80044f4:	f7fb ffba 	bl	800046c <__aeabi_i2d>
 80044f8:	4602      	mov	r2, r0
 80044fa:	460b      	mov	r3, r1
 80044fc:	4620      	mov	r0, r4
 80044fe:	4629      	mov	r1, r5
 8004500:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004504:	f7fb fe64 	bl	80001d0 <__aeabi_dsub>
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <__ieee754_rem_pio2+0x404>)
 800450a:	2200      	movs	r2, #0
 800450c:	f7fc f818 	bl	8000540 <__aeabi_dmul>
 8004510:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004514:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8004518:	2703      	movs	r7, #3
 800451a:	2400      	movs	r4, #0
 800451c:	2500      	movs	r5, #0
 800451e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8004522:	4622      	mov	r2, r4
 8004524:	462b      	mov	r3, r5
 8004526:	46b9      	mov	r9, r7
 8004528:	3f01      	subs	r7, #1
 800452a:	f7fc fa71 	bl	8000a10 <__aeabi_dcmpeq>
 800452e:	2800      	cmp	r0, #0
 8004530:	d1f5      	bne.n	800451e <__ieee754_rem_pio2+0x3b6>
 8004532:	4b0f      	ldr	r3, [pc, #60]	; (8004570 <__ieee754_rem_pio2+0x408>)
 8004534:	9301      	str	r3, [sp, #4]
 8004536:	2302      	movs	r3, #2
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	4632      	mov	r2, r6
 800453c:	464b      	mov	r3, r9
 800453e:	4651      	mov	r1, sl
 8004540:	a804      	add	r0, sp, #16
 8004542:	f000 f9c5 	bl	80048d0 <__kernel_rem_pio2>
 8004546:	9b02      	ldr	r3, [sp, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	4683      	mov	fp, r0
 800454c:	f6bf ae4c 	bge.w	80041e8 <__ieee754_rem_pio2+0x80>
 8004550:	e9da 2100 	ldrd	r2, r1, [sl]
 8004554:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004558:	e9ca 2300 	strd	r2, r3, [sl]
 800455c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8004560:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004564:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8004568:	e73f      	b.n	80043ea <__ieee754_rem_pio2+0x282>
 800456a:	bf00      	nop
 800456c:	41700000 	.word	0x41700000
 8004570:	08005178 	.word	0x08005178
 8004574:	00000000 	.word	0x00000000

08004578 <atan>:
 8004578:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800457c:	ec55 4b10 	vmov	r4, r5, d0
 8004580:	4bc3      	ldr	r3, [pc, #780]	; (8004890 <atan+0x318>)
 8004582:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8004586:	429e      	cmp	r6, r3
 8004588:	46ab      	mov	fp, r5
 800458a:	dd18      	ble.n	80045be <atan+0x46>
 800458c:	4bc1      	ldr	r3, [pc, #772]	; (8004894 <atan+0x31c>)
 800458e:	429e      	cmp	r6, r3
 8004590:	dc01      	bgt.n	8004596 <atan+0x1e>
 8004592:	d109      	bne.n	80045a8 <atan+0x30>
 8004594:	b144      	cbz	r4, 80045a8 <atan+0x30>
 8004596:	4622      	mov	r2, r4
 8004598:	462b      	mov	r3, r5
 800459a:	4620      	mov	r0, r4
 800459c:	4629      	mov	r1, r5
 800459e:	f7fb fe19 	bl	80001d4 <__adddf3>
 80045a2:	4604      	mov	r4, r0
 80045a4:	460d      	mov	r5, r1
 80045a6:	e006      	b.n	80045b6 <atan+0x3e>
 80045a8:	f1bb 0f00 	cmp.w	fp, #0
 80045ac:	f300 8131 	bgt.w	8004812 <atan+0x29a>
 80045b0:	a59b      	add	r5, pc, #620	; (adr r5, 8004820 <atan+0x2a8>)
 80045b2:	e9d5 4500 	ldrd	r4, r5, [r5]
 80045b6:	ec45 4b10 	vmov	d0, r4, r5
 80045ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045be:	4bb6      	ldr	r3, [pc, #728]	; (8004898 <atan+0x320>)
 80045c0:	429e      	cmp	r6, r3
 80045c2:	dc14      	bgt.n	80045ee <atan+0x76>
 80045c4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80045c8:	429e      	cmp	r6, r3
 80045ca:	dc0d      	bgt.n	80045e8 <atan+0x70>
 80045cc:	a396      	add	r3, pc, #600	; (adr r3, 8004828 <atan+0x2b0>)
 80045ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d2:	ee10 0a10 	vmov	r0, s0
 80045d6:	4629      	mov	r1, r5
 80045d8:	f7fb fdfc 	bl	80001d4 <__adddf3>
 80045dc:	4baf      	ldr	r3, [pc, #700]	; (800489c <atan+0x324>)
 80045de:	2200      	movs	r2, #0
 80045e0:	f7fc fa3e 	bl	8000a60 <__aeabi_dcmpgt>
 80045e4:	2800      	cmp	r0, #0
 80045e6:	d1e6      	bne.n	80045b6 <atan+0x3e>
 80045e8:	f04f 3aff 	mov.w	sl, #4294967295
 80045ec:	e02b      	b.n	8004646 <atan+0xce>
 80045ee:	f000 f963 	bl	80048b8 <fabs>
 80045f2:	4bab      	ldr	r3, [pc, #684]	; (80048a0 <atan+0x328>)
 80045f4:	429e      	cmp	r6, r3
 80045f6:	ec55 4b10 	vmov	r4, r5, d0
 80045fa:	f300 80bf 	bgt.w	800477c <atan+0x204>
 80045fe:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8004602:	429e      	cmp	r6, r3
 8004604:	f300 80a0 	bgt.w	8004748 <atan+0x1d0>
 8004608:	ee10 2a10 	vmov	r2, s0
 800460c:	ee10 0a10 	vmov	r0, s0
 8004610:	462b      	mov	r3, r5
 8004612:	4629      	mov	r1, r5
 8004614:	f7fb fdde 	bl	80001d4 <__adddf3>
 8004618:	4ba0      	ldr	r3, [pc, #640]	; (800489c <atan+0x324>)
 800461a:	2200      	movs	r2, #0
 800461c:	f7fb fdd8 	bl	80001d0 <__aeabi_dsub>
 8004620:	2200      	movs	r2, #0
 8004622:	4606      	mov	r6, r0
 8004624:	460f      	mov	r7, r1
 8004626:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800462a:	4620      	mov	r0, r4
 800462c:	4629      	mov	r1, r5
 800462e:	f7fb fdd1 	bl	80001d4 <__adddf3>
 8004632:	4602      	mov	r2, r0
 8004634:	460b      	mov	r3, r1
 8004636:	4630      	mov	r0, r6
 8004638:	4639      	mov	r1, r7
 800463a:	f7fc f8ab 	bl	8000794 <__aeabi_ddiv>
 800463e:	f04f 0a00 	mov.w	sl, #0
 8004642:	4604      	mov	r4, r0
 8004644:	460d      	mov	r5, r1
 8004646:	4622      	mov	r2, r4
 8004648:	462b      	mov	r3, r5
 800464a:	4620      	mov	r0, r4
 800464c:	4629      	mov	r1, r5
 800464e:	f7fb ff77 	bl	8000540 <__aeabi_dmul>
 8004652:	4602      	mov	r2, r0
 8004654:	460b      	mov	r3, r1
 8004656:	4680      	mov	r8, r0
 8004658:	4689      	mov	r9, r1
 800465a:	f7fb ff71 	bl	8000540 <__aeabi_dmul>
 800465e:	a374      	add	r3, pc, #464	; (adr r3, 8004830 <atan+0x2b8>)
 8004660:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004664:	4606      	mov	r6, r0
 8004666:	460f      	mov	r7, r1
 8004668:	f7fb ff6a 	bl	8000540 <__aeabi_dmul>
 800466c:	a372      	add	r3, pc, #456	; (adr r3, 8004838 <atan+0x2c0>)
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f7fb fdaf 	bl	80001d4 <__adddf3>
 8004676:	4632      	mov	r2, r6
 8004678:	463b      	mov	r3, r7
 800467a:	f7fb ff61 	bl	8000540 <__aeabi_dmul>
 800467e:	a370      	add	r3, pc, #448	; (adr r3, 8004840 <atan+0x2c8>)
 8004680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004684:	f7fb fda6 	bl	80001d4 <__adddf3>
 8004688:	4632      	mov	r2, r6
 800468a:	463b      	mov	r3, r7
 800468c:	f7fb ff58 	bl	8000540 <__aeabi_dmul>
 8004690:	a36d      	add	r3, pc, #436	; (adr r3, 8004848 <atan+0x2d0>)
 8004692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004696:	f7fb fd9d 	bl	80001d4 <__adddf3>
 800469a:	4632      	mov	r2, r6
 800469c:	463b      	mov	r3, r7
 800469e:	f7fb ff4f 	bl	8000540 <__aeabi_dmul>
 80046a2:	a36b      	add	r3, pc, #428	; (adr r3, 8004850 <atan+0x2d8>)
 80046a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046a8:	f7fb fd94 	bl	80001d4 <__adddf3>
 80046ac:	4632      	mov	r2, r6
 80046ae:	463b      	mov	r3, r7
 80046b0:	f7fb ff46 	bl	8000540 <__aeabi_dmul>
 80046b4:	a368      	add	r3, pc, #416	; (adr r3, 8004858 <atan+0x2e0>)
 80046b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046ba:	f7fb fd8b 	bl	80001d4 <__adddf3>
 80046be:	4642      	mov	r2, r8
 80046c0:	464b      	mov	r3, r9
 80046c2:	f7fb ff3d 	bl	8000540 <__aeabi_dmul>
 80046c6:	a366      	add	r3, pc, #408	; (adr r3, 8004860 <atan+0x2e8>)
 80046c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046cc:	4680      	mov	r8, r0
 80046ce:	4689      	mov	r9, r1
 80046d0:	4630      	mov	r0, r6
 80046d2:	4639      	mov	r1, r7
 80046d4:	f7fb ff34 	bl	8000540 <__aeabi_dmul>
 80046d8:	a363      	add	r3, pc, #396	; (adr r3, 8004868 <atan+0x2f0>)
 80046da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046de:	f7fb fd77 	bl	80001d0 <__aeabi_dsub>
 80046e2:	4632      	mov	r2, r6
 80046e4:	463b      	mov	r3, r7
 80046e6:	f7fb ff2b 	bl	8000540 <__aeabi_dmul>
 80046ea:	a361      	add	r3, pc, #388	; (adr r3, 8004870 <atan+0x2f8>)
 80046ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f0:	f7fb fd6e 	bl	80001d0 <__aeabi_dsub>
 80046f4:	4632      	mov	r2, r6
 80046f6:	463b      	mov	r3, r7
 80046f8:	f7fb ff22 	bl	8000540 <__aeabi_dmul>
 80046fc:	a35e      	add	r3, pc, #376	; (adr r3, 8004878 <atan+0x300>)
 80046fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004702:	f7fb fd65 	bl	80001d0 <__aeabi_dsub>
 8004706:	4632      	mov	r2, r6
 8004708:	463b      	mov	r3, r7
 800470a:	f7fb ff19 	bl	8000540 <__aeabi_dmul>
 800470e:	a35c      	add	r3, pc, #368	; (adr r3, 8004880 <atan+0x308>)
 8004710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004714:	f7fb fd5c 	bl	80001d0 <__aeabi_dsub>
 8004718:	4632      	mov	r2, r6
 800471a:	463b      	mov	r3, r7
 800471c:	f7fb ff10 	bl	8000540 <__aeabi_dmul>
 8004720:	4602      	mov	r2, r0
 8004722:	460b      	mov	r3, r1
 8004724:	4640      	mov	r0, r8
 8004726:	4649      	mov	r1, r9
 8004728:	f7fb fd54 	bl	80001d4 <__adddf3>
 800472c:	4622      	mov	r2, r4
 800472e:	462b      	mov	r3, r5
 8004730:	f7fb ff06 	bl	8000540 <__aeabi_dmul>
 8004734:	f1ba 3fff 	cmp.w	sl, #4294967295
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	d14b      	bne.n	80047d6 <atan+0x25e>
 800473e:	4620      	mov	r0, r4
 8004740:	4629      	mov	r1, r5
 8004742:	f7fb fd45 	bl	80001d0 <__aeabi_dsub>
 8004746:	e72c      	b.n	80045a2 <atan+0x2a>
 8004748:	ee10 0a10 	vmov	r0, s0
 800474c:	4b53      	ldr	r3, [pc, #332]	; (800489c <atan+0x324>)
 800474e:	2200      	movs	r2, #0
 8004750:	4629      	mov	r1, r5
 8004752:	f7fb fd3d 	bl	80001d0 <__aeabi_dsub>
 8004756:	4b51      	ldr	r3, [pc, #324]	; (800489c <atan+0x324>)
 8004758:	4606      	mov	r6, r0
 800475a:	460f      	mov	r7, r1
 800475c:	2200      	movs	r2, #0
 800475e:	4620      	mov	r0, r4
 8004760:	4629      	mov	r1, r5
 8004762:	f7fb fd37 	bl	80001d4 <__adddf3>
 8004766:	4602      	mov	r2, r0
 8004768:	460b      	mov	r3, r1
 800476a:	4630      	mov	r0, r6
 800476c:	4639      	mov	r1, r7
 800476e:	f7fc f811 	bl	8000794 <__aeabi_ddiv>
 8004772:	f04f 0a01 	mov.w	sl, #1
 8004776:	4604      	mov	r4, r0
 8004778:	460d      	mov	r5, r1
 800477a:	e764      	b.n	8004646 <atan+0xce>
 800477c:	4b49      	ldr	r3, [pc, #292]	; (80048a4 <atan+0x32c>)
 800477e:	429e      	cmp	r6, r3
 8004780:	da1d      	bge.n	80047be <atan+0x246>
 8004782:	ee10 0a10 	vmov	r0, s0
 8004786:	4b48      	ldr	r3, [pc, #288]	; (80048a8 <atan+0x330>)
 8004788:	2200      	movs	r2, #0
 800478a:	4629      	mov	r1, r5
 800478c:	f7fb fd20 	bl	80001d0 <__aeabi_dsub>
 8004790:	4b45      	ldr	r3, [pc, #276]	; (80048a8 <atan+0x330>)
 8004792:	4606      	mov	r6, r0
 8004794:	460f      	mov	r7, r1
 8004796:	2200      	movs	r2, #0
 8004798:	4620      	mov	r0, r4
 800479a:	4629      	mov	r1, r5
 800479c:	f7fb fed0 	bl	8000540 <__aeabi_dmul>
 80047a0:	4b3e      	ldr	r3, [pc, #248]	; (800489c <atan+0x324>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	f7fb fd16 	bl	80001d4 <__adddf3>
 80047a8:	4602      	mov	r2, r0
 80047aa:	460b      	mov	r3, r1
 80047ac:	4630      	mov	r0, r6
 80047ae:	4639      	mov	r1, r7
 80047b0:	f7fb fff0 	bl	8000794 <__aeabi_ddiv>
 80047b4:	f04f 0a02 	mov.w	sl, #2
 80047b8:	4604      	mov	r4, r0
 80047ba:	460d      	mov	r5, r1
 80047bc:	e743      	b.n	8004646 <atan+0xce>
 80047be:	462b      	mov	r3, r5
 80047c0:	ee10 2a10 	vmov	r2, s0
 80047c4:	4939      	ldr	r1, [pc, #228]	; (80048ac <atan+0x334>)
 80047c6:	2000      	movs	r0, #0
 80047c8:	f7fb ffe4 	bl	8000794 <__aeabi_ddiv>
 80047cc:	f04f 0a03 	mov.w	sl, #3
 80047d0:	4604      	mov	r4, r0
 80047d2:	460d      	mov	r5, r1
 80047d4:	e737      	b.n	8004646 <atan+0xce>
 80047d6:	4b36      	ldr	r3, [pc, #216]	; (80048b0 <atan+0x338>)
 80047d8:	4e36      	ldr	r6, [pc, #216]	; (80048b4 <atan+0x33c>)
 80047da:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80047de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047e2:	f7fb fcf5 	bl	80001d0 <__aeabi_dsub>
 80047e6:	4622      	mov	r2, r4
 80047e8:	462b      	mov	r3, r5
 80047ea:	f7fb fcf1 	bl	80001d0 <__aeabi_dsub>
 80047ee:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	e9d6 0100 	ldrd	r0, r1, [r6]
 80047fa:	f7fb fce9 	bl	80001d0 <__aeabi_dsub>
 80047fe:	f1bb 0f00 	cmp.w	fp, #0
 8004802:	4604      	mov	r4, r0
 8004804:	460d      	mov	r5, r1
 8004806:	f6bf aed6 	bge.w	80045b6 <atan+0x3e>
 800480a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800480e:	461d      	mov	r5, r3
 8004810:	e6d1      	b.n	80045b6 <atan+0x3e>
 8004812:	a51d      	add	r5, pc, #116	; (adr r5, 8004888 <atan+0x310>)
 8004814:	e9d5 4500 	ldrd	r4, r5, [r5]
 8004818:	e6cd      	b.n	80045b6 <atan+0x3e>
 800481a:	bf00      	nop
 800481c:	f3af 8000 	nop.w
 8004820:	54442d18 	.word	0x54442d18
 8004824:	bff921fb 	.word	0xbff921fb
 8004828:	8800759c 	.word	0x8800759c
 800482c:	7e37e43c 	.word	0x7e37e43c
 8004830:	e322da11 	.word	0xe322da11
 8004834:	3f90ad3a 	.word	0x3f90ad3a
 8004838:	24760deb 	.word	0x24760deb
 800483c:	3fa97b4b 	.word	0x3fa97b4b
 8004840:	a0d03d51 	.word	0xa0d03d51
 8004844:	3fb10d66 	.word	0x3fb10d66
 8004848:	c54c206e 	.word	0xc54c206e
 800484c:	3fb745cd 	.word	0x3fb745cd
 8004850:	920083ff 	.word	0x920083ff
 8004854:	3fc24924 	.word	0x3fc24924
 8004858:	5555550d 	.word	0x5555550d
 800485c:	3fd55555 	.word	0x3fd55555
 8004860:	2c6a6c2f 	.word	0x2c6a6c2f
 8004864:	bfa2b444 	.word	0xbfa2b444
 8004868:	52defd9a 	.word	0x52defd9a
 800486c:	3fadde2d 	.word	0x3fadde2d
 8004870:	af749a6d 	.word	0xaf749a6d
 8004874:	3fb3b0f2 	.word	0x3fb3b0f2
 8004878:	fe231671 	.word	0xfe231671
 800487c:	3fbc71c6 	.word	0x3fbc71c6
 8004880:	9998ebc4 	.word	0x9998ebc4
 8004884:	3fc99999 	.word	0x3fc99999
 8004888:	54442d18 	.word	0x54442d18
 800488c:	3ff921fb 	.word	0x3ff921fb
 8004890:	440fffff 	.word	0x440fffff
 8004894:	7ff00000 	.word	0x7ff00000
 8004898:	3fdbffff 	.word	0x3fdbffff
 800489c:	3ff00000 	.word	0x3ff00000
 80048a0:	3ff2ffff 	.word	0x3ff2ffff
 80048a4:	40038000 	.word	0x40038000
 80048a8:	3ff80000 	.word	0x3ff80000
 80048ac:	bff00000 	.word	0xbff00000
 80048b0:	080052a0 	.word	0x080052a0
 80048b4:	08005280 	.word	0x08005280

080048b8 <fabs>:
 80048b8:	ec51 0b10 	vmov	r0, r1, d0
 80048bc:	ee10 2a10 	vmov	r2, s0
 80048c0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80048c4:	ec43 2b10 	vmov	d0, r2, r3
 80048c8:	4770      	bx	lr
 80048ca:	0000      	movs	r0, r0
 80048cc:	0000      	movs	r0, r0
	...

080048d0 <__kernel_rem_pio2>:
 80048d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d4:	ed2d 8b02 	vpush	{d8}
 80048d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80048dc:	f112 0f14 	cmn.w	r2, #20
 80048e0:	9306      	str	r3, [sp, #24]
 80048e2:	9104      	str	r1, [sp, #16]
 80048e4:	4bc2      	ldr	r3, [pc, #776]	; (8004bf0 <__kernel_rem_pio2+0x320>)
 80048e6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80048e8:	9009      	str	r0, [sp, #36]	; 0x24
 80048ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80048ee:	9300      	str	r3, [sp, #0]
 80048f0:	9b06      	ldr	r3, [sp, #24]
 80048f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80048f6:	bfa8      	it	ge
 80048f8:	1ed4      	subge	r4, r2, #3
 80048fa:	9305      	str	r3, [sp, #20]
 80048fc:	bfb2      	itee	lt
 80048fe:	2400      	movlt	r4, #0
 8004900:	2318      	movge	r3, #24
 8004902:	fb94 f4f3 	sdivge	r4, r4, r3
 8004906:	f06f 0317 	mvn.w	r3, #23
 800490a:	fb04 3303 	mla	r3, r4, r3, r3
 800490e:	eb03 0a02 	add.w	sl, r3, r2
 8004912:	9b00      	ldr	r3, [sp, #0]
 8004914:	9a05      	ldr	r2, [sp, #20]
 8004916:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8004be0 <__kernel_rem_pio2+0x310>
 800491a:	eb03 0802 	add.w	r8, r3, r2
 800491e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8004920:	1aa7      	subs	r7, r4, r2
 8004922:	ae20      	add	r6, sp, #128	; 0x80
 8004924:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8004928:	2500      	movs	r5, #0
 800492a:	4545      	cmp	r5, r8
 800492c:	dd13      	ble.n	8004956 <__kernel_rem_pio2+0x86>
 800492e:	9b06      	ldr	r3, [sp, #24]
 8004930:	aa20      	add	r2, sp, #128	; 0x80
 8004932:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8004936:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800493a:	f04f 0800 	mov.w	r8, #0
 800493e:	9b00      	ldr	r3, [sp, #0]
 8004940:	4598      	cmp	r8, r3
 8004942:	dc31      	bgt.n	80049a8 <__kernel_rem_pio2+0xd8>
 8004944:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8004be0 <__kernel_rem_pio2+0x310>
 8004948:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800494c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8004950:	462f      	mov	r7, r5
 8004952:	2600      	movs	r6, #0
 8004954:	e01b      	b.n	800498e <__kernel_rem_pio2+0xbe>
 8004956:	42ef      	cmn	r7, r5
 8004958:	d407      	bmi.n	800496a <__kernel_rem_pio2+0x9a>
 800495a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800495e:	f7fb fd85 	bl	800046c <__aeabi_i2d>
 8004962:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004966:	3501      	adds	r5, #1
 8004968:	e7df      	b.n	800492a <__kernel_rem_pio2+0x5a>
 800496a:	ec51 0b18 	vmov	r0, r1, d8
 800496e:	e7f8      	b.n	8004962 <__kernel_rem_pio2+0x92>
 8004970:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004974:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8004978:	f7fb fde2 	bl	8000540 <__aeabi_dmul>
 800497c:	4602      	mov	r2, r0
 800497e:	460b      	mov	r3, r1
 8004980:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004984:	f7fb fc26 	bl	80001d4 <__adddf3>
 8004988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800498c:	3601      	adds	r6, #1
 800498e:	9b05      	ldr	r3, [sp, #20]
 8004990:	429e      	cmp	r6, r3
 8004992:	f1a7 0708 	sub.w	r7, r7, #8
 8004996:	ddeb      	ble.n	8004970 <__kernel_rem_pio2+0xa0>
 8004998:	ed9d 7b02 	vldr	d7, [sp, #8]
 800499c:	f108 0801 	add.w	r8, r8, #1
 80049a0:	ecab 7b02 	vstmia	fp!, {d7}
 80049a4:	3508      	adds	r5, #8
 80049a6:	e7ca      	b.n	800493e <__kernel_rem_pio2+0x6e>
 80049a8:	9b00      	ldr	r3, [sp, #0]
 80049aa:	aa0c      	add	r2, sp, #48	; 0x30
 80049ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80049b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80049b2:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80049b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80049b8:	9c00      	ldr	r4, [sp, #0]
 80049ba:	930a      	str	r3, [sp, #40]	; 0x28
 80049bc:	00e3      	lsls	r3, r4, #3
 80049be:	9308      	str	r3, [sp, #32]
 80049c0:	ab98      	add	r3, sp, #608	; 0x260
 80049c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80049c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80049ca:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80049ce:	ab70      	add	r3, sp, #448	; 0x1c0
 80049d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80049d4:	46c3      	mov	fp, r8
 80049d6:	46a1      	mov	r9, r4
 80049d8:	f1b9 0f00 	cmp.w	r9, #0
 80049dc:	f1a5 0508 	sub.w	r5, r5, #8
 80049e0:	dc77      	bgt.n	8004ad2 <__kernel_rem_pio2+0x202>
 80049e2:	ec47 6b10 	vmov	d0, r6, r7
 80049e6:	4650      	mov	r0, sl
 80049e8:	f000 fac2 	bl	8004f70 <scalbn>
 80049ec:	ec57 6b10 	vmov	r6, r7, d0
 80049f0:	2200      	movs	r2, #0
 80049f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80049f6:	ee10 0a10 	vmov	r0, s0
 80049fa:	4639      	mov	r1, r7
 80049fc:	f7fb fda0 	bl	8000540 <__aeabi_dmul>
 8004a00:	ec41 0b10 	vmov	d0, r0, r1
 8004a04:	f7ff f8e0 	bl	8003bc8 <floor>
 8004a08:	4b7a      	ldr	r3, [pc, #488]	; (8004bf4 <__kernel_rem_pio2+0x324>)
 8004a0a:	ec51 0b10 	vmov	r0, r1, d0
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f7fb fd96 	bl	8000540 <__aeabi_dmul>
 8004a14:	4602      	mov	r2, r0
 8004a16:	460b      	mov	r3, r1
 8004a18:	4630      	mov	r0, r6
 8004a1a:	4639      	mov	r1, r7
 8004a1c:	f7fb fbd8 	bl	80001d0 <__aeabi_dsub>
 8004a20:	460f      	mov	r7, r1
 8004a22:	4606      	mov	r6, r0
 8004a24:	f7fc f83c 	bl	8000aa0 <__aeabi_d2iz>
 8004a28:	9002      	str	r0, [sp, #8]
 8004a2a:	f7fb fd1f 	bl	800046c <__aeabi_i2d>
 8004a2e:	4602      	mov	r2, r0
 8004a30:	460b      	mov	r3, r1
 8004a32:	4630      	mov	r0, r6
 8004a34:	4639      	mov	r1, r7
 8004a36:	f7fb fbcb 	bl	80001d0 <__aeabi_dsub>
 8004a3a:	f1ba 0f00 	cmp.w	sl, #0
 8004a3e:	4606      	mov	r6, r0
 8004a40:	460f      	mov	r7, r1
 8004a42:	dd6d      	ble.n	8004b20 <__kernel_rem_pio2+0x250>
 8004a44:	1e61      	subs	r1, r4, #1
 8004a46:	ab0c      	add	r3, sp, #48	; 0x30
 8004a48:	9d02      	ldr	r5, [sp, #8]
 8004a4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004a4e:	f1ca 0018 	rsb	r0, sl, #24
 8004a52:	fa43 f200 	asr.w	r2, r3, r0
 8004a56:	4415      	add	r5, r2
 8004a58:	4082      	lsls	r2, r0
 8004a5a:	1a9b      	subs	r3, r3, r2
 8004a5c:	aa0c      	add	r2, sp, #48	; 0x30
 8004a5e:	9502      	str	r5, [sp, #8]
 8004a60:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004a64:	f1ca 0217 	rsb	r2, sl, #23
 8004a68:	fa43 fb02 	asr.w	fp, r3, r2
 8004a6c:	f1bb 0f00 	cmp.w	fp, #0
 8004a70:	dd65      	ble.n	8004b3e <__kernel_rem_pio2+0x26e>
 8004a72:	9b02      	ldr	r3, [sp, #8]
 8004a74:	2200      	movs	r2, #0
 8004a76:	3301      	adds	r3, #1
 8004a78:	9302      	str	r3, [sp, #8]
 8004a7a:	4615      	mov	r5, r2
 8004a7c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004a80:	4294      	cmp	r4, r2
 8004a82:	f300 809f 	bgt.w	8004bc4 <__kernel_rem_pio2+0x2f4>
 8004a86:	f1ba 0f00 	cmp.w	sl, #0
 8004a8a:	dd07      	ble.n	8004a9c <__kernel_rem_pio2+0x1cc>
 8004a8c:	f1ba 0f01 	cmp.w	sl, #1
 8004a90:	f000 80c1 	beq.w	8004c16 <__kernel_rem_pio2+0x346>
 8004a94:	f1ba 0f02 	cmp.w	sl, #2
 8004a98:	f000 80c7 	beq.w	8004c2a <__kernel_rem_pio2+0x35a>
 8004a9c:	f1bb 0f02 	cmp.w	fp, #2
 8004aa0:	d14d      	bne.n	8004b3e <__kernel_rem_pio2+0x26e>
 8004aa2:	4632      	mov	r2, r6
 8004aa4:	463b      	mov	r3, r7
 8004aa6:	4954      	ldr	r1, [pc, #336]	; (8004bf8 <__kernel_rem_pio2+0x328>)
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f7fb fb91 	bl	80001d0 <__aeabi_dsub>
 8004aae:	4606      	mov	r6, r0
 8004ab0:	460f      	mov	r7, r1
 8004ab2:	2d00      	cmp	r5, #0
 8004ab4:	d043      	beq.n	8004b3e <__kernel_rem_pio2+0x26e>
 8004ab6:	4650      	mov	r0, sl
 8004ab8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8004be8 <__kernel_rem_pio2+0x318>
 8004abc:	f000 fa58 	bl	8004f70 <scalbn>
 8004ac0:	4630      	mov	r0, r6
 8004ac2:	4639      	mov	r1, r7
 8004ac4:	ec53 2b10 	vmov	r2, r3, d0
 8004ac8:	f7fb fb82 	bl	80001d0 <__aeabi_dsub>
 8004acc:	4606      	mov	r6, r0
 8004ace:	460f      	mov	r7, r1
 8004ad0:	e035      	b.n	8004b3e <__kernel_rem_pio2+0x26e>
 8004ad2:	4b4a      	ldr	r3, [pc, #296]	; (8004bfc <__kernel_rem_pio2+0x32c>)
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	4630      	mov	r0, r6
 8004ad8:	4639      	mov	r1, r7
 8004ada:	f7fb fd31 	bl	8000540 <__aeabi_dmul>
 8004ade:	f7fb ffdf 	bl	8000aa0 <__aeabi_d2iz>
 8004ae2:	f7fb fcc3 	bl	800046c <__aeabi_i2d>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	ec43 2b18 	vmov	d8, r2, r3
 8004aee:	4b44      	ldr	r3, [pc, #272]	; (8004c00 <__kernel_rem_pio2+0x330>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	f7fb fd25 	bl	8000540 <__aeabi_dmul>
 8004af6:	4602      	mov	r2, r0
 8004af8:	460b      	mov	r3, r1
 8004afa:	4630      	mov	r0, r6
 8004afc:	4639      	mov	r1, r7
 8004afe:	f7fb fb67 	bl	80001d0 <__aeabi_dsub>
 8004b02:	f7fb ffcd 	bl	8000aa0 <__aeabi_d2iz>
 8004b06:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004b0a:	f84b 0b04 	str.w	r0, [fp], #4
 8004b0e:	ec51 0b18 	vmov	r0, r1, d8
 8004b12:	f7fb fb5f 	bl	80001d4 <__adddf3>
 8004b16:	f109 39ff 	add.w	r9, r9, #4294967295
 8004b1a:	4606      	mov	r6, r0
 8004b1c:	460f      	mov	r7, r1
 8004b1e:	e75b      	b.n	80049d8 <__kernel_rem_pio2+0x108>
 8004b20:	d106      	bne.n	8004b30 <__kernel_rem_pio2+0x260>
 8004b22:	1e63      	subs	r3, r4, #1
 8004b24:	aa0c      	add	r2, sp, #48	; 0x30
 8004b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b2a:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8004b2e:	e79d      	b.n	8004a6c <__kernel_rem_pio2+0x19c>
 8004b30:	4b34      	ldr	r3, [pc, #208]	; (8004c04 <__kernel_rem_pio2+0x334>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	f7fb ff8a 	bl	8000a4c <__aeabi_dcmpge>
 8004b38:	2800      	cmp	r0, #0
 8004b3a:	d140      	bne.n	8004bbe <__kernel_rem_pio2+0x2ee>
 8004b3c:	4683      	mov	fp, r0
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2300      	movs	r3, #0
 8004b42:	4630      	mov	r0, r6
 8004b44:	4639      	mov	r1, r7
 8004b46:	f7fb ff63 	bl	8000a10 <__aeabi_dcmpeq>
 8004b4a:	2800      	cmp	r0, #0
 8004b4c:	f000 80c1 	beq.w	8004cd2 <__kernel_rem_pio2+0x402>
 8004b50:	1e65      	subs	r5, r4, #1
 8004b52:	462b      	mov	r3, r5
 8004b54:	2200      	movs	r2, #0
 8004b56:	9900      	ldr	r1, [sp, #0]
 8004b58:	428b      	cmp	r3, r1
 8004b5a:	da6d      	bge.n	8004c38 <__kernel_rem_pio2+0x368>
 8004b5c:	2a00      	cmp	r2, #0
 8004b5e:	f000 808a 	beq.w	8004c76 <__kernel_rem_pio2+0x3a6>
 8004b62:	ab0c      	add	r3, sp, #48	; 0x30
 8004b64:	f1aa 0a18 	sub.w	sl, sl, #24
 8004b68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80ae 	beq.w	8004cce <__kernel_rem_pio2+0x3fe>
 8004b72:	4650      	mov	r0, sl
 8004b74:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8004be8 <__kernel_rem_pio2+0x318>
 8004b78:	f000 f9fa 	bl	8004f70 <scalbn>
 8004b7c:	1c6b      	adds	r3, r5, #1
 8004b7e:	00da      	lsls	r2, r3, #3
 8004b80:	9205      	str	r2, [sp, #20]
 8004b82:	ec57 6b10 	vmov	r6, r7, d0
 8004b86:	aa70      	add	r2, sp, #448	; 0x1c0
 8004b88:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8004bfc <__kernel_rem_pio2+0x32c>
 8004b8c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8004b90:	462c      	mov	r4, r5
 8004b92:	f04f 0800 	mov.w	r8, #0
 8004b96:	2c00      	cmp	r4, #0
 8004b98:	f280 80d4 	bge.w	8004d44 <__kernel_rem_pio2+0x474>
 8004b9c:	462c      	mov	r4, r5
 8004b9e:	2c00      	cmp	r4, #0
 8004ba0:	f2c0 8102 	blt.w	8004da8 <__kernel_rem_pio2+0x4d8>
 8004ba4:	4b18      	ldr	r3, [pc, #96]	; (8004c08 <__kernel_rem_pio2+0x338>)
 8004ba6:	461e      	mov	r6, r3
 8004ba8:	ab70      	add	r3, sp, #448	; 0x1c0
 8004baa:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8004bae:	1b2b      	subs	r3, r5, r4
 8004bb0:	f04f 0900 	mov.w	r9, #0
 8004bb4:	f04f 0a00 	mov.w	sl, #0
 8004bb8:	2700      	movs	r7, #0
 8004bba:	9306      	str	r3, [sp, #24]
 8004bbc:	e0e6      	b.n	8004d8c <__kernel_rem_pio2+0x4bc>
 8004bbe:	f04f 0b02 	mov.w	fp, #2
 8004bc2:	e756      	b.n	8004a72 <__kernel_rem_pio2+0x1a2>
 8004bc4:	f8d8 3000 	ldr.w	r3, [r8]
 8004bc8:	bb05      	cbnz	r5, 8004c0c <__kernel_rem_pio2+0x33c>
 8004bca:	b123      	cbz	r3, 8004bd6 <__kernel_rem_pio2+0x306>
 8004bcc:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004bd0:	f8c8 3000 	str.w	r3, [r8]
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	3201      	adds	r2, #1
 8004bd8:	f108 0804 	add.w	r8, r8, #4
 8004bdc:	461d      	mov	r5, r3
 8004bde:	e74f      	b.n	8004a80 <__kernel_rem_pio2+0x1b0>
	...
 8004bec:	3ff00000 	.word	0x3ff00000
 8004bf0:	08005300 	.word	0x08005300
 8004bf4:	40200000 	.word	0x40200000
 8004bf8:	3ff00000 	.word	0x3ff00000
 8004bfc:	3e700000 	.word	0x3e700000
 8004c00:	41700000 	.word	0x41700000
 8004c04:	3fe00000 	.word	0x3fe00000
 8004c08:	080052c0 	.word	0x080052c0
 8004c0c:	1acb      	subs	r3, r1, r3
 8004c0e:	f8c8 3000 	str.w	r3, [r8]
 8004c12:	462b      	mov	r3, r5
 8004c14:	e7df      	b.n	8004bd6 <__kernel_rem_pio2+0x306>
 8004c16:	1e62      	subs	r2, r4, #1
 8004c18:	ab0c      	add	r3, sp, #48	; 0x30
 8004c1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c1e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004c22:	a90c      	add	r1, sp, #48	; 0x30
 8004c24:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004c28:	e738      	b.n	8004a9c <__kernel_rem_pio2+0x1cc>
 8004c2a:	1e62      	subs	r2, r4, #1
 8004c2c:	ab0c      	add	r3, sp, #48	; 0x30
 8004c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c32:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004c36:	e7f4      	b.n	8004c22 <__kernel_rem_pio2+0x352>
 8004c38:	a90c      	add	r1, sp, #48	; 0x30
 8004c3a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004c3e:	3b01      	subs	r3, #1
 8004c40:	430a      	orrs	r2, r1
 8004c42:	e788      	b.n	8004b56 <__kernel_rem_pio2+0x286>
 8004c44:	3301      	adds	r3, #1
 8004c46:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004c4a:	2900      	cmp	r1, #0
 8004c4c:	d0fa      	beq.n	8004c44 <__kernel_rem_pio2+0x374>
 8004c4e:	9a08      	ldr	r2, [sp, #32]
 8004c50:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8004c54:	446a      	add	r2, sp
 8004c56:	3a98      	subs	r2, #152	; 0x98
 8004c58:	9208      	str	r2, [sp, #32]
 8004c5a:	9a06      	ldr	r2, [sp, #24]
 8004c5c:	a920      	add	r1, sp, #128	; 0x80
 8004c5e:	18a2      	adds	r2, r4, r2
 8004c60:	18e3      	adds	r3, r4, r3
 8004c62:	f104 0801 	add.w	r8, r4, #1
 8004c66:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8004c6a:	9302      	str	r3, [sp, #8]
 8004c6c:	9b02      	ldr	r3, [sp, #8]
 8004c6e:	4543      	cmp	r3, r8
 8004c70:	da04      	bge.n	8004c7c <__kernel_rem_pio2+0x3ac>
 8004c72:	461c      	mov	r4, r3
 8004c74:	e6a2      	b.n	80049bc <__kernel_rem_pio2+0xec>
 8004c76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e7e4      	b.n	8004c46 <__kernel_rem_pio2+0x376>
 8004c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004c82:	f7fb fbf3 	bl	800046c <__aeabi_i2d>
 8004c86:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c8c:	46ab      	mov	fp, r5
 8004c8e:	461c      	mov	r4, r3
 8004c90:	f04f 0900 	mov.w	r9, #0
 8004c94:	2600      	movs	r6, #0
 8004c96:	2700      	movs	r7, #0
 8004c98:	9b05      	ldr	r3, [sp, #20]
 8004c9a:	4599      	cmp	r9, r3
 8004c9c:	dd06      	ble.n	8004cac <__kernel_rem_pio2+0x3dc>
 8004c9e:	9b08      	ldr	r3, [sp, #32]
 8004ca0:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004ca4:	f108 0801 	add.w	r8, r8, #1
 8004ca8:	9308      	str	r3, [sp, #32]
 8004caa:	e7df      	b.n	8004c6c <__kernel_rem_pio2+0x39c>
 8004cac:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004cb0:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004cb4:	f7fb fc44 	bl	8000540 <__aeabi_dmul>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4630      	mov	r0, r6
 8004cbe:	4639      	mov	r1, r7
 8004cc0:	f7fb fa88 	bl	80001d4 <__adddf3>
 8004cc4:	f109 0901 	add.w	r9, r9, #1
 8004cc8:	4606      	mov	r6, r0
 8004cca:	460f      	mov	r7, r1
 8004ccc:	e7e4      	b.n	8004c98 <__kernel_rem_pio2+0x3c8>
 8004cce:	3d01      	subs	r5, #1
 8004cd0:	e747      	b.n	8004b62 <__kernel_rem_pio2+0x292>
 8004cd2:	ec47 6b10 	vmov	d0, r6, r7
 8004cd6:	f1ca 0000 	rsb	r0, sl, #0
 8004cda:	f000 f949 	bl	8004f70 <scalbn>
 8004cde:	ec57 6b10 	vmov	r6, r7, d0
 8004ce2:	4ba0      	ldr	r3, [pc, #640]	; (8004f64 <__kernel_rem_pio2+0x694>)
 8004ce4:	ee10 0a10 	vmov	r0, s0
 8004ce8:	2200      	movs	r2, #0
 8004cea:	4639      	mov	r1, r7
 8004cec:	f7fb feae 	bl	8000a4c <__aeabi_dcmpge>
 8004cf0:	b1f8      	cbz	r0, 8004d32 <__kernel_rem_pio2+0x462>
 8004cf2:	4b9d      	ldr	r3, [pc, #628]	; (8004f68 <__kernel_rem_pio2+0x698>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	4630      	mov	r0, r6
 8004cf8:	4639      	mov	r1, r7
 8004cfa:	f7fb fc21 	bl	8000540 <__aeabi_dmul>
 8004cfe:	f7fb fecf 	bl	8000aa0 <__aeabi_d2iz>
 8004d02:	4680      	mov	r8, r0
 8004d04:	f7fb fbb2 	bl	800046c <__aeabi_i2d>
 8004d08:	4b96      	ldr	r3, [pc, #600]	; (8004f64 <__kernel_rem_pio2+0x694>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f7fb fc18 	bl	8000540 <__aeabi_dmul>
 8004d10:	460b      	mov	r3, r1
 8004d12:	4602      	mov	r2, r0
 8004d14:	4639      	mov	r1, r7
 8004d16:	4630      	mov	r0, r6
 8004d18:	f7fb fa5a 	bl	80001d0 <__aeabi_dsub>
 8004d1c:	f7fb fec0 	bl	8000aa0 <__aeabi_d2iz>
 8004d20:	1c65      	adds	r5, r4, #1
 8004d22:	ab0c      	add	r3, sp, #48	; 0x30
 8004d24:	f10a 0a18 	add.w	sl, sl, #24
 8004d28:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004d2c:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004d30:	e71f      	b.n	8004b72 <__kernel_rem_pio2+0x2a2>
 8004d32:	4630      	mov	r0, r6
 8004d34:	4639      	mov	r1, r7
 8004d36:	f7fb feb3 	bl	8000aa0 <__aeabi_d2iz>
 8004d3a:	ab0c      	add	r3, sp, #48	; 0x30
 8004d3c:	4625      	mov	r5, r4
 8004d3e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004d42:	e716      	b.n	8004b72 <__kernel_rem_pio2+0x2a2>
 8004d44:	ab0c      	add	r3, sp, #48	; 0x30
 8004d46:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8004d4a:	f7fb fb8f 	bl	800046c <__aeabi_i2d>
 8004d4e:	4632      	mov	r2, r6
 8004d50:	463b      	mov	r3, r7
 8004d52:	f7fb fbf5 	bl	8000540 <__aeabi_dmul>
 8004d56:	4642      	mov	r2, r8
 8004d58:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004d5c:	464b      	mov	r3, r9
 8004d5e:	4630      	mov	r0, r6
 8004d60:	4639      	mov	r1, r7
 8004d62:	f7fb fbed 	bl	8000540 <__aeabi_dmul>
 8004d66:	3c01      	subs	r4, #1
 8004d68:	4606      	mov	r6, r0
 8004d6a:	460f      	mov	r7, r1
 8004d6c:	e713      	b.n	8004b96 <__kernel_rem_pio2+0x2c6>
 8004d6e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004d72:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8004d76:	f7fb fbe3 	bl	8000540 <__aeabi_dmul>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	460b      	mov	r3, r1
 8004d7e:	4648      	mov	r0, r9
 8004d80:	4651      	mov	r1, sl
 8004d82:	f7fb fa27 	bl	80001d4 <__adddf3>
 8004d86:	3701      	adds	r7, #1
 8004d88:	4681      	mov	r9, r0
 8004d8a:	468a      	mov	sl, r1
 8004d8c:	9b00      	ldr	r3, [sp, #0]
 8004d8e:	429f      	cmp	r7, r3
 8004d90:	dc02      	bgt.n	8004d98 <__kernel_rem_pio2+0x4c8>
 8004d92:	9b06      	ldr	r3, [sp, #24]
 8004d94:	429f      	cmp	r7, r3
 8004d96:	ddea      	ble.n	8004d6e <__kernel_rem_pio2+0x49e>
 8004d98:	9a06      	ldr	r2, [sp, #24]
 8004d9a:	ab48      	add	r3, sp, #288	; 0x120
 8004d9c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8004da0:	e9c6 9a00 	strd	r9, sl, [r6]
 8004da4:	3c01      	subs	r4, #1
 8004da6:	e6fa      	b.n	8004b9e <__kernel_rem_pio2+0x2ce>
 8004da8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	dc0b      	bgt.n	8004dc6 <__kernel_rem_pio2+0x4f6>
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	dc39      	bgt.n	8004e26 <__kernel_rem_pio2+0x556>
 8004db2:	d05d      	beq.n	8004e70 <__kernel_rem_pio2+0x5a0>
 8004db4:	9b02      	ldr	r3, [sp, #8]
 8004db6:	f003 0007 	and.w	r0, r3, #7
 8004dba:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8004dbe:	ecbd 8b02 	vpop	{d8}
 8004dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dc6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d1f3      	bne.n	8004db4 <__kernel_rem_pio2+0x4e4>
 8004dcc:	9b05      	ldr	r3, [sp, #20]
 8004dce:	9500      	str	r5, [sp, #0]
 8004dd0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8004dd4:	eb0d 0403 	add.w	r4, sp, r3
 8004dd8:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 8004ddc:	46a2      	mov	sl, r4
 8004dde:	9b00      	ldr	r3, [sp, #0]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f1aa 0a08 	sub.w	sl, sl, #8
 8004de6:	dc69      	bgt.n	8004ebc <__kernel_rem_pio2+0x5ec>
 8004de8:	46aa      	mov	sl, r5
 8004dea:	f1ba 0f01 	cmp.w	sl, #1
 8004dee:	f1a4 0408 	sub.w	r4, r4, #8
 8004df2:	f300 8083 	bgt.w	8004efc <__kernel_rem_pio2+0x62c>
 8004df6:	9c05      	ldr	r4, [sp, #20]
 8004df8:	ab48      	add	r3, sp, #288	; 0x120
 8004dfa:	441c      	add	r4, r3
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	2100      	movs	r1, #0
 8004e00:	2d01      	cmp	r5, #1
 8004e02:	f300 809a 	bgt.w	8004f3a <__kernel_rem_pio2+0x66a>
 8004e06:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 8004e0a:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004e0e:	f1bb 0f00 	cmp.w	fp, #0
 8004e12:	f040 8098 	bne.w	8004f46 <__kernel_rem_pio2+0x676>
 8004e16:	9b04      	ldr	r3, [sp, #16]
 8004e18:	e9c3 7800 	strd	r7, r8, [r3]
 8004e1c:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004e20:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004e24:	e7c6      	b.n	8004db4 <__kernel_rem_pio2+0x4e4>
 8004e26:	9e05      	ldr	r6, [sp, #20]
 8004e28:	ab48      	add	r3, sp, #288	; 0x120
 8004e2a:	441e      	add	r6, r3
 8004e2c:	462c      	mov	r4, r5
 8004e2e:	2000      	movs	r0, #0
 8004e30:	2100      	movs	r1, #0
 8004e32:	2c00      	cmp	r4, #0
 8004e34:	da33      	bge.n	8004e9e <__kernel_rem_pio2+0x5ce>
 8004e36:	f1bb 0f00 	cmp.w	fp, #0
 8004e3a:	d036      	beq.n	8004eaa <__kernel_rem_pio2+0x5da>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e42:	9c04      	ldr	r4, [sp, #16]
 8004e44:	e9c4 2300 	strd	r2, r3, [r4]
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8004e50:	f7fb f9be 	bl	80001d0 <__aeabi_dsub>
 8004e54:	ae4a      	add	r6, sp, #296	; 0x128
 8004e56:	2401      	movs	r4, #1
 8004e58:	42a5      	cmp	r5, r4
 8004e5a:	da29      	bge.n	8004eb0 <__kernel_rem_pio2+0x5e0>
 8004e5c:	f1bb 0f00 	cmp.w	fp, #0
 8004e60:	d002      	beq.n	8004e68 <__kernel_rem_pio2+0x598>
 8004e62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e66:	4619      	mov	r1, r3
 8004e68:	9b04      	ldr	r3, [sp, #16]
 8004e6a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004e6e:	e7a1      	b.n	8004db4 <__kernel_rem_pio2+0x4e4>
 8004e70:	9c05      	ldr	r4, [sp, #20]
 8004e72:	ab48      	add	r3, sp, #288	; 0x120
 8004e74:	441c      	add	r4, r3
 8004e76:	2000      	movs	r0, #0
 8004e78:	2100      	movs	r1, #0
 8004e7a:	2d00      	cmp	r5, #0
 8004e7c:	da09      	bge.n	8004e92 <__kernel_rem_pio2+0x5c2>
 8004e7e:	f1bb 0f00 	cmp.w	fp, #0
 8004e82:	d002      	beq.n	8004e8a <__kernel_rem_pio2+0x5ba>
 8004e84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004e88:	4619      	mov	r1, r3
 8004e8a:	9b04      	ldr	r3, [sp, #16]
 8004e8c:	e9c3 0100 	strd	r0, r1, [r3]
 8004e90:	e790      	b.n	8004db4 <__kernel_rem_pio2+0x4e4>
 8004e92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004e96:	f7fb f99d 	bl	80001d4 <__adddf3>
 8004e9a:	3d01      	subs	r5, #1
 8004e9c:	e7ed      	b.n	8004e7a <__kernel_rem_pio2+0x5aa>
 8004e9e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8004ea2:	f7fb f997 	bl	80001d4 <__adddf3>
 8004ea6:	3c01      	subs	r4, #1
 8004ea8:	e7c3      	b.n	8004e32 <__kernel_rem_pio2+0x562>
 8004eaa:	4602      	mov	r2, r0
 8004eac:	460b      	mov	r3, r1
 8004eae:	e7c8      	b.n	8004e42 <__kernel_rem_pio2+0x572>
 8004eb0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004eb4:	f7fb f98e 	bl	80001d4 <__adddf3>
 8004eb8:	3401      	adds	r4, #1
 8004eba:	e7cd      	b.n	8004e58 <__kernel_rem_pio2+0x588>
 8004ebc:	e9da 8900 	ldrd	r8, r9, [sl]
 8004ec0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004ec4:	9b00      	ldr	r3, [sp, #0]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	9300      	str	r3, [sp, #0]
 8004eca:	4632      	mov	r2, r6
 8004ecc:	463b      	mov	r3, r7
 8004ece:	4640      	mov	r0, r8
 8004ed0:	4649      	mov	r1, r9
 8004ed2:	f7fb f97f 	bl	80001d4 <__adddf3>
 8004ed6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4640      	mov	r0, r8
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	f7fb f975 	bl	80001d0 <__aeabi_dsub>
 8004ee6:	4632      	mov	r2, r6
 8004ee8:	463b      	mov	r3, r7
 8004eea:	f7fb f973 	bl	80001d4 <__adddf3>
 8004eee:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004ef2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004ef6:	ed8a 7b00 	vstr	d7, [sl]
 8004efa:	e770      	b.n	8004dde <__kernel_rem_pio2+0x50e>
 8004efc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004f00:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004f04:	4640      	mov	r0, r8
 8004f06:	4632      	mov	r2, r6
 8004f08:	463b      	mov	r3, r7
 8004f0a:	4649      	mov	r1, r9
 8004f0c:	f7fb f962 	bl	80001d4 <__adddf3>
 8004f10:	e9cd 0100 	strd	r0, r1, [sp]
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4640      	mov	r0, r8
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	f7fb f958 	bl	80001d0 <__aeabi_dsub>
 8004f20:	4632      	mov	r2, r6
 8004f22:	463b      	mov	r3, r7
 8004f24:	f7fb f956 	bl	80001d4 <__adddf3>
 8004f28:	ed9d 7b00 	vldr	d7, [sp]
 8004f2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004f30:	ed84 7b00 	vstr	d7, [r4]
 8004f34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004f38:	e757      	b.n	8004dea <__kernel_rem_pio2+0x51a>
 8004f3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004f3e:	f7fb f949 	bl	80001d4 <__adddf3>
 8004f42:	3d01      	subs	r5, #1
 8004f44:	e75c      	b.n	8004e00 <__kernel_rem_pio2+0x530>
 8004f46:	9b04      	ldr	r3, [sp, #16]
 8004f48:	9a04      	ldr	r2, [sp, #16]
 8004f4a:	601f      	str	r7, [r3, #0]
 8004f4c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8004f50:	605c      	str	r4, [r3, #4]
 8004f52:	609d      	str	r5, [r3, #8]
 8004f54:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004f58:	60d3      	str	r3, [r2, #12]
 8004f5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004f5e:	6110      	str	r0, [r2, #16]
 8004f60:	6153      	str	r3, [r2, #20]
 8004f62:	e727      	b.n	8004db4 <__kernel_rem_pio2+0x4e4>
 8004f64:	41700000 	.word	0x41700000
 8004f68:	3e700000 	.word	0x3e700000
 8004f6c:	00000000 	.word	0x00000000

08004f70 <scalbn>:
 8004f70:	b570      	push	{r4, r5, r6, lr}
 8004f72:	ec55 4b10 	vmov	r4, r5, d0
 8004f76:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	462b      	mov	r3, r5
 8004f7e:	b999      	cbnz	r1, 8004fa8 <scalbn+0x38>
 8004f80:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004f84:	4323      	orrs	r3, r4
 8004f86:	d03f      	beq.n	8005008 <scalbn+0x98>
 8004f88:	4b35      	ldr	r3, [pc, #212]	; (8005060 <scalbn+0xf0>)
 8004f8a:	4629      	mov	r1, r5
 8004f8c:	ee10 0a10 	vmov	r0, s0
 8004f90:	2200      	movs	r2, #0
 8004f92:	f7fb fad5 	bl	8000540 <__aeabi_dmul>
 8004f96:	4b33      	ldr	r3, [pc, #204]	; (8005064 <scalbn+0xf4>)
 8004f98:	429e      	cmp	r6, r3
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	460d      	mov	r5, r1
 8004f9e:	da10      	bge.n	8004fc2 <scalbn+0x52>
 8004fa0:	a327      	add	r3, pc, #156	; (adr r3, 8005040 <scalbn+0xd0>)
 8004fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa6:	e01f      	b.n	8004fe8 <scalbn+0x78>
 8004fa8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004fac:	4291      	cmp	r1, r2
 8004fae:	d10c      	bne.n	8004fca <scalbn+0x5a>
 8004fb0:	ee10 2a10 	vmov	r2, s0
 8004fb4:	4620      	mov	r0, r4
 8004fb6:	4629      	mov	r1, r5
 8004fb8:	f7fb f90c 	bl	80001d4 <__adddf3>
 8004fbc:	4604      	mov	r4, r0
 8004fbe:	460d      	mov	r5, r1
 8004fc0:	e022      	b.n	8005008 <scalbn+0x98>
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004fc8:	3936      	subs	r1, #54	; 0x36
 8004fca:	f24c 3250 	movw	r2, #50000	; 0xc350
 8004fce:	4296      	cmp	r6, r2
 8004fd0:	dd0d      	ble.n	8004fee <scalbn+0x7e>
 8004fd2:	2d00      	cmp	r5, #0
 8004fd4:	a11c      	add	r1, pc, #112	; (adr r1, 8005048 <scalbn+0xd8>)
 8004fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fda:	da02      	bge.n	8004fe2 <scalbn+0x72>
 8004fdc:	a11c      	add	r1, pc, #112	; (adr r1, 8005050 <scalbn+0xe0>)
 8004fde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fe2:	a319      	add	r3, pc, #100	; (adr r3, 8005048 <scalbn+0xd8>)
 8004fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe8:	f7fb faaa 	bl	8000540 <__aeabi_dmul>
 8004fec:	e7e6      	b.n	8004fbc <scalbn+0x4c>
 8004fee:	1872      	adds	r2, r6, r1
 8004ff0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8004ff4:	428a      	cmp	r2, r1
 8004ff6:	dcec      	bgt.n	8004fd2 <scalbn+0x62>
 8004ff8:	2a00      	cmp	r2, #0
 8004ffa:	dd08      	ble.n	800500e <scalbn+0x9e>
 8004ffc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005000:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005004:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005008:	ec45 4b10 	vmov	d0, r4, r5
 800500c:	bd70      	pop	{r4, r5, r6, pc}
 800500e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005012:	da08      	bge.n	8005026 <scalbn+0xb6>
 8005014:	2d00      	cmp	r5, #0
 8005016:	a10a      	add	r1, pc, #40	; (adr r1, 8005040 <scalbn+0xd0>)
 8005018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800501c:	dac0      	bge.n	8004fa0 <scalbn+0x30>
 800501e:	a10e      	add	r1, pc, #56	; (adr r1, 8005058 <scalbn+0xe8>)
 8005020:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005024:	e7bc      	b.n	8004fa0 <scalbn+0x30>
 8005026:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800502a:	3236      	adds	r2, #54	; 0x36
 800502c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005030:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005034:	4620      	mov	r0, r4
 8005036:	4b0c      	ldr	r3, [pc, #48]	; (8005068 <scalbn+0xf8>)
 8005038:	2200      	movs	r2, #0
 800503a:	e7d5      	b.n	8004fe8 <scalbn+0x78>
 800503c:	f3af 8000 	nop.w
 8005040:	c2f8f359 	.word	0xc2f8f359
 8005044:	01a56e1f 	.word	0x01a56e1f
 8005048:	8800759c 	.word	0x8800759c
 800504c:	7e37e43c 	.word	0x7e37e43c
 8005050:	8800759c 	.word	0x8800759c
 8005054:	fe37e43c 	.word	0xfe37e43c
 8005058:	c2f8f359 	.word	0xc2f8f359
 800505c:	81a56e1f 	.word	0x81a56e1f
 8005060:	43500000 	.word	0x43500000
 8005064:	ffff3cb0 	.word	0xffff3cb0
 8005068:	3c900000 	.word	0x3c900000

0800506c <_init>:
 800506c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800506e:	bf00      	nop
 8005070:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005072:	bc08      	pop	{r3}
 8005074:	469e      	mov	lr, r3
 8005076:	4770      	bx	lr

08005078 <_fini>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	bf00      	nop
 800507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800507e:	bc08      	pop	{r3}
 8005080:	469e      	mov	lr, r3
 8005082:	4770      	bx	lr
